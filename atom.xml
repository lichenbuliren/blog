<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Heaven 的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://heavenru.com/"/>
  <updated>2021-04-06T12:22:39.214Z</updated>
  <id>https://heavenru.com/</id>
  
  <author>
    <name>Heaven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vite + React + Typescript 最佳实践</title>
    <link href="https://heavenru.com//post/Vite-with-React-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5"/>
    <id>https://heavenru.com//post/Vite-with-React-最佳实践</id>
    <published>2021-03-22T12:02:16.000Z</published>
    <updated>2021-04-06T12:22:39.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Vite-React-Typescript-打造一个前端单页应用模板"><a href="#使用-Vite-React-Typescript-打造一个前端单页应用模板" class="headerlink" title="使用 Vite + React + Typescript 打造一个前端单页应用模板"></a>使用 Vite + React + Typescript 打造一个前端单页应用模板</h1><blockquote><p>最近前端大火的 Vite 2.0 版本终于出来了，在这里分享一下如何使用 vite 构建一个前端单页应用</p></blockquote><p><strong>该文章主要面向对 Vite 感兴趣，或者做前端项目架构的同学</strong></p><p>源码地址：<a href="https://github.com/lichenbuliren/fe-project-base">fe-project-base</a></p><p>通过这篇文章，你能了解到以下几点：</p><ul><li><code>vscode 编辑器配置</code><a href="#editor">#</a></li><li><code>git pre-commit 如何配置</code><a href="#precommit">#</a></li><li><code>ESLint + Pritter 配置</code><a href="#eslint">#</a></li><li><code>标准前端单页应用目录规划</code><a href="#dir">#</a></li><li><code>从 0 到 1 学习 vite 构建优化</code><a href="#vite">#</a></li><li><code>mobx/6.x + react + TypeScript 最佳实践</code><a href="#mobx">#</a></li></ul><p>想快速了解 Vite 配置构建的，可以直接跳到 <a href="#vite">这里</a></p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>这里我们项目名是 <a href="https://github.com/lichenbuliren/fe-project-base">fe-project-base</a><br>这里我们采用的 <a href="https://vitejs.dev/guide/#overview">vite 2.0</a> 来初始化我们的项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> init @vitejs/app fe-project-base --template react-ts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候，会出现命令行提示，咱们按照自己想要的模板，选择对应初始化类型就 OK 了</p><h2 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a>安装项目依赖</h2><p>首先，我们需要安装依赖，要打造一个基本的前端单页应用模板，咱们需要安装以下依赖：</p><ol><li><code>react</code> &amp; <code>react-dom</code>：基础核心</li><li><code>react-router</code>：路由配置</li><li><code>@loadable/component</code>：动态路由加载</li><li><code>classnames</code>：更好的 className 写法</li><li><code>react-router-config</code>：更好的 react-router 路由配置包</li><li><code>mobx-react</code> &amp; <code>mobx-persist</code>：mobx 状态管理</li><li><code>eslint</code> &amp; <code>lint-staged</code> &amp; <code>husky</code> &amp; <code>prettier</code>：代码校验配置</li><li><code>eslint-config-alloy</code>：ESLint 配置插件</li></ol><p>dependencies:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save react react-dom react-router @loadable/component classnames react-router-config mobx-react mobx-persist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>devDependencies：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint lint-staged husky@4.3.8 prettier<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="pre-commit-配置"><a href="#pre-commit-配置" class="headerlink" title="pre-commit 配置"></a>pre-commit 配置</h2><p>在安装完上面的依赖之后，通过 <code>cat .git/hooks/pre-commit</code> 来判断 husky 是否正常安装，如果不存在该文件，则说明安装失败，需要重新安装试试</p><p><span style="color:red;font-weight:bold;"><br>这里的 husky 使用 4.x 版本，5.x 版本已经不是免费协议了<br/>测试发现 node/14.15.1 版本会导致 husky 自动创建 .git/hooks/pre-commit 配置失败，升级 node/14.16.0 修复该问题<br></span></p><p>在完成了以上安装配置之后，我们还需要对 <code>package.json</code> 添加相关配置</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"husky"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"lint-staged"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"src/**/*.&#123;ts,tsx&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"eslint --cache --fix"</span><span class="token punctuation">,</span>      <span class="token string">"git add"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"src/**/*.&#123;js,jsx&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"eslint --cache --fix"</span><span class="token punctuation">,</span>      <span class="token string">"git add"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，我们的整个项目就具备了针对提交的文件做 ESLint 校验并修复格式化的能力了</p><p><img src="/images/fe-base/eslint-error.png" alt="ESLintError"><em>**</em></p><h2 id="编辑器配置"><a href="#编辑器配置" class="headerlink" title="编辑器配置"></a><a id="editor">编辑器配置</a></h2><p>工欲善其事必先利其器，我们首要解决的是在团队内部编辑器协作问题，这个时候，就需要开发者的编辑器统一安装 <a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditorConfig</a> 插件（这里以 vscode 插件为例）</p><p>首先，我们在项目根目录新建一个配置文件：<code>.editorconfig</code></p><p>参考配置：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">root</span> <span class="token attr-value"><span class="token punctuation">=</span> true</span><span class="token selector">[*]</span><span class="token constant">indent_style</span> <span class="token attr-value"><span class="token punctuation">=</span> space</span><span class="token constant">indent_size</span> <span class="token attr-value"><span class="token punctuation">=</span> 2</span><span class="token constant">end_of_line</span> <span class="token attr-value"><span class="token punctuation">=</span> lf</span><span class="token constant">charset</span> <span class="token attr-value"><span class="token punctuation">=</span> utf-8</span><span class="token constant">trim_trailing_whitespace</span> <span class="token attr-value"><span class="token punctuation">=</span> true</span><span class="token constant">insert_final_newline</span> <span class="token attr-value"><span class="token punctuation">=</span> true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置自动格式化与代码校验</strong></p><p>在 vscode 编辑器中，Mac 快捷键 <code>command + ,</code> 来快速打开配置项，切换到 <code>workspace</code> 模块，并点击右上角的 <code>open settings json</code> 按钮，配置如下信息：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"source.fixAll.tslint"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span><span class="token punctuation">,</span>  <span class="token property">"[javascript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"[typescript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"typescript.tsdk"</span><span class="token operator">:</span> <span class="token string">"node_modules/typescript/lib"</span><span class="token punctuation">,</span>  <span class="token property">"[typescriptreact]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候，咱们的编辑器已经具备了保存并自动格式化的功能了</p><h2 id="ESLint-Prettier"><a href="#ESLint-Prettier" class="headerlink" title="ESLint + Prettier"></a><a id="eslint">ESLint + Prettier</a></h2><ol><li><p><code>.eslintignore</code>：配置 ESLint 忽略文件</p></li><li><p><code>.eslintrc</code>：ESLint 编码规则配置，这里推荐使用业界统一标准，这里我推荐 AlloyTeam 的 <a href="https://github.com/AlloyTeam/eslint-config-alloy">eslint-config-alloy</a>，按照文档安装对应的 ESLint 配置：</p></li><li> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-plugin-react eslint-config-alloy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>.prettierignore</code>：配置 Prettier 忽略文件</p></li><li><p><code>.prettierrc</code>：格式化自定义配置</p> <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"tabWidth"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"bracketSpacing"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"overrides"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"files"</span><span class="token operator">:</span> <span class="token string">".prettierrc"</span><span class="token punctuation">,</span>      <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"typescript"</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择 <code>eslint-config-alloy</code> 的几大理由如下：</p></li><li><p>更清晰的 ESLint 提示：比如特殊字符需要转义的提示等等</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">error <span class="token variable"><span class="token variable">`</span>'<span class="token variable">`</span></span> can be escaped with <span class="token variable"><span class="token variable">`</span><span class="token operator">&amp;</span>apos<span class="token punctuation">;</span><span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span><span class="token operator">&amp;</span>lsquo<span class="token punctuation">;</span><span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span><span class="token operator">&amp;</span><span class="token comment">#39;</span><span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span><span class="token operator">&amp;</span>rsquo<span class="token punctuation">;</span><span class="token variable">`</span></span>  react/no-unescaped-entities<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>更加严格的 ESLint 配置提示：比如会提示 ESLint 没有配置指明 React 的 version 就会告警 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Warning: React version not specified <span class="token keyword">in</span> eslint-plugin-react settings. See https://github.com/yannickcr/eslint-plugin-react<span class="token comment">#configuration</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 这里我们补上对 <code>react</code> 版本的配置 <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// .eslintrc</span><span class="token punctuation">&#123;</span>  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"detect"</span> <span class="token comment">// 表示探测当前 node_modules 安装的 react 版本</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整体目录规划"><a href="#整体目录规划" class="headerlink" title="整体目录规划"></a><a id="dir">整体目录规划</a></h2></li></ol><p>一个基本的前端单页应用，需要的大致的目录架构如下：</p><p>这里以 <code>src</code> 下面的目录划分为例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── app.tsx├── assets // 静态资源，会被打包优化│   ├── favicon.svg│   └── logo.svg├── common // 公共配置，比如统一请求封装，session 封装│   ├── http-client│   └── session├── components // 全局组件，分业务组件或 UI 组件│   ├── Toast├── config // 配置文件目录│   ├── index.ts├── hooks // 自定义 hook│   └── index.ts├── layouts // 模板，不同的路由，可以配置不同的模板│   └── index.tsx├── lib // 通常这里防止第三方库，比如 jweixin.js、jsBridge.js│   ├── README.md│   ├── jsBridge.js│   └── jweixin.js├── pages // 页面存放位置│   ├── components // 就近原则页面级别的组件│   ├── home├── routes // 路由配置│   └── index.ts├── store // 全局状态管理│   ├── common.ts│   ├── index.ts│   └── session.ts├── styles // 全局样式│   ├── global.less│   └── reset.less└── utils // 工具方法  └── index.ts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK，到这里，我们规划好了一个大致的前端项目目录结构，接下来我们要配置一下别名，来优化代码中的，比如： <code>import xxx from &#39;@/utils&#39;</code> 路径体验</p><p><em>通常这里还会有一个 public 目录与 src 目录同级，该目录下的文件会直接拷贝到构建目录</em></p><h3 id="别名配置"><a href="#别名配置" class="headerlink" title="别名配置"></a>别名配置</h3><p>别名的配置，我们需要关注的是两个地方：<code>vite.config.ts</code> &amp; <code>tsconfig.json</code></p><p>其中 <code>vite.config.ts</code> 用来编译识别用的；<code>tsconfig.json</code> 是用来给 Typescript 识别用的；</p><p>这里建议采用的是 <code>@/</code> 开头，为什么不用 <code>@</code> 开头，这是为了避免跟业界某些 npm 包名冲突（例如 @vitejs）</p><ul><li><code>vite.config.ts</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// vite.config.ts</span><span class="token punctuation">&#123;</span>  resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">'@/'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@/config'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/config'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@/components'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/components'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@/styles'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/styles'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@/utils'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/utils'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@/common'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/common'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@/assets'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/assets'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@/pages'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/pages'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@/routes'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/routes'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@/layouts'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/layouts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@/hooks'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/hooks'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@/store'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/store'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>tsconfig.json</code></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"@/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@/components/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/components/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@/styles/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/styles/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@/config/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/config/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@/utils/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/utils/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@/common/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/common/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@/assets/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/assets/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@/pages/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/pages/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@/routes/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/routes/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@/hooks/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/hooks/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@/store/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/store/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"typeRoots"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./typings/"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src"</span><span class="token punctuation">,</span> <span class="token string">"./typings"</span><span class="token punctuation">,</span> <span class="token string">"./vite.config.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从-0-到-1-vite-构建配置"><a href="#从-0-到-1-vite-构建配置" class="headerlink" title="从 0 到 1 vite 构建配置"></a><a id="vite">从 0 到 1 vite 构建配置</a></h2><p><strong>截止作者写该篇文章时，<code>vite</code> 版本为 <code>vite/2.1.2</code>，以下所有配置仅针对该版本负责</strong></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>默认的 <code>vite</code> 初始化项目，是不会给我们创建 <code>.env</code>，<code>.env.production</code>，<code>.env.devlopment</code> 三个配置文件的，然后官方模板默认提供的 <code>package.json</code> 文件中，三个 <code>script</code> 分别会要用到这几个文件，所以需要我们<strong>手动先创建</strong>，这里提供官方文档：<a href="https://vitejs.dev/guide/env-and-mode.html#env-files">.env 配置</a></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># package.json<span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite"</span><span class="token punctuation">,</span> <span class="token comment">// 等于 vite -m development，此时 command='serve',mode='development'</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"tsc &amp;&amp; vite build"</span><span class="token punctuation">,</span> <span class="token comment">// 等于 vite -m production，此时 command='build', mode='production'</span>    <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"vite preview"</span><span class="token punctuation">,</span>    <span class="token property">"start:qa"</span><span class="token operator">:</span> <span class="token string">"vite -m qa"</span> <span class="token comment">// 自定义命令，会寻找 .env.qa 的配置文件;此时 command='serve'，mode='qa'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时这里的命令，对应的配置文件：<a href="https://vitejs.dev/guide/env-and-mode.html#modes">mode 区分</a><br><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ConfigEnv <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">&#125;</span><span class="token operator">:</span> ConfigEnv</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里的 command 默认 === 'serve'</span>  <span class="token comment">// 当执行 vite build 时，command === 'build'</span>  <span class="token comment">// 所以这里可以根据 command 与 mode 做条件判断来导出对应环境的配置</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>具体配置文件参考：<a href="https://github.com/lichenbuliren/fe-project-base/blob/main/vite.config.ts">fe-project-vite/vite.config.ts</a></p><h3 id="路由规划"><a href="#路由规划" class="headerlink" title="路由规划"></a>路由规划</h3><p>首先，一个项目最重要的部分，就是路由配置；那么我们需要一个配置文件作为入口来配置所有的页面路由，这里以 <code>react-router</code> 为例：</p><h4 id="路由配置文件配置"><a href="#路由配置文件配置" class="headerlink" title="路由配置文件配置"></a>路由配置文件配置</h4><p><code>src/routes/index.ts</code>，这里我们引入的了 <code>@loadable/component</code> 库来做路由动态加载，<a href="https://vitejs.dev/guide/features.html#dynamic-import-polyfill">vite 默认支持动态加载特性</a>，以此提高程序打包效率</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> loadable <span class="token keyword">from</span> <span class="token string">'@loadable/component'</span><span class="token keyword">import</span> Layout<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> H5Layout <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/layouts'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RouteConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-router-config'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'@/pages/home'</span><span class="token keyword">const</span> routesConfig<span class="token operator">:</span> RouteConfig<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Home  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// hybird 路由</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/hybird'</span><span class="token punctuation">,</span>    exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Layout<span class="token punctuation">,</span>    routes<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        exact<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> <span class="token function">loadable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/pages/hybird'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// H5 相关路由</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/h5'</span><span class="token punctuation">,</span>    exact<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> H5Layout<span class="token punctuation">,</span>    routes<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        exact<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> <span class="token function">loadable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/pages/h5'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> routesConfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="入口-main-tsx-文件配置路由路口"><a href="#入口-main-tsx-文件配置路由路口" class="headerlink" title="入口 main.tsx 文件配置路由路口"></a>入口 main.tsx 文件配置路由路口</h4><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BrowserRouter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> <span class="token string">'@/styles/global.less'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> renderRoutes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-router-config'</span><span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">'./routes'</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token function">renderRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的面的 <code>renderRoutes</code> 采用的 <code>react-router-config</code> 提供的方法，其实就是咱们 <code>react-router</code> 的配置写法，通过查看 <a href="https://github.com/ReactTraining/react-router/blob/master/packages/react-router-config/modules/renderRoutes.js">源码</a> 如下：</p><pre class="line-numbers language-none"><code class="language-none">import React from &quot;react&quot;;import &#123; Switch, Route &#125; from &quot;react-router&quot;;function renderRoutes(routes, extraProps &#x3D; &#123;&#125;, switchProps &#x3D; &#123;&#125;) &#123;  return routes ? (    &lt;Switch &#123;...switchProps&#125;&gt;      &#123;routes.map((route, i) &#x3D;&gt; (        &lt;Route          key&#x3D;&#123;route.key || i&#125;          path&#x3D;&#123;route.path&#125;          exact&#x3D;&#123;route.exact&#125;          strict&#x3D;&#123;route.strict&#125;          render&#x3D;&#123;props &#x3D;&gt;            route.render ? (              route.render(&#123; ...props, ...extraProps, route: route &#125;)            ) : (              &lt;route.component &#123;...props&#125; &#123;...extraProps&#125; route&#x3D;&#123;route&#125; &#x2F;&gt;            )          &#125;        &#x2F;&gt;      ))&#125;    &lt;&#x2F;Switch&gt;  ) : null;&#125;export default renderRoutes;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上两个配置，咱们就基本能把项目跑起来了，同时也具备了路由的懒加载能力；</p><p>执行 <code>npm run build</code>，查看文件输出，就能发现我们的动态路由加载已经配置成功了<br><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ tsc <span class="token operator">&amp;&amp;</span> vite buildvite v2.1.2 building <span class="token keyword">for</span> production<span class="token punctuation">..</span>.✓ <span class="token number">53</span> modules transformed.dist/index.html                  <span class="token number">0</span>.41kbdist/assets/index.c034ae3d.js    <span class="token number">0</span>.11kb / brotli: <span class="token number">0</span>.09kbdist/assets/index.c034ae3d.js.map <span class="token number">0</span>.30kbdist/assets/index.f0d0ea4f.js    <span class="token number">0</span>.10kb / brotli: <span class="token number">0</span>.09kbdist/assets/index.f0d0ea4f.js.map <span class="token number">0</span>.29kbdist/assets/index.8105412a.js    <span class="token number">2</span>.25kb / brotli: <span class="token number">0</span>.89kbdist/assets/index.8105412a.js.map <span class="token number">8</span>.52kbdist/assets/index.7be450e7.css   <span class="token number">1</span>.25kb / brotli: <span class="token number">0</span>.57kbdist/assets/vendor.7573543b.js   <span class="token number">151</span>.44kb / brotli: <span class="token number">43</span>.17kbdist/assets/vendor.7573543b.js.map <span class="token number">422</span>.16kb✨  Done <span class="token keyword">in</span> <span class="token number">9</span>.34s.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>细心的同学可能会发现，上面咱们的路由配置里面，特意拆分了两个 <code>Layout</code> &amp; <code>H5Layout</code>，这里这么做的目的是为了区分在微信 h5 与 hybird 之间的差异化而设置的模板入口，大家可以根据自己的业务来决定是否需要 <code>Layout</code> 层</p><h3 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h3><p>说到样式处理，这里咱们的示例采用的是 <code>.less</code> 文件，所以在项目里面需要安装对应的解析库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev <span class="token function">less</span> postcss<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要支持 <code>css modules</code> 特性，需要在 <code>vite.config.ts</code> 文件中开启对应的配置项：<br><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//  vite.config.ts</span><span class="token punctuation">&#123;</span>  css<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      less<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 支持内联 JavaScript</span>        javascriptEnabled<span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 样式小驼峰转化</span>      localsConvention<span class="token operator">:</span> <span class="token string">'camelCase'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="编译构建"><a href="#编译构建" class="headerlink" title="编译构建"></a>编译构建</h3><p>其实到这里，基本就讲完了 vite 的整个构建，参考前面提到的配置文件：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">&#125;</span><span class="token operator">:</span> ConfigEnv</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> envFiles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.env'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.env.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>mode<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>  <span class="token comment">// 动态的将所有配置文件环境变量赋值到 process.env 上面</span>  <span class="token comment">// 这个时候无法使用 import.meta.env 变量</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> envFiles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> envConfig <span class="token operator">=</span> dotenv<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">in</span> envConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>envConfig<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        process<span class="token punctuation">.</span>env<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> envConfig<span class="token punctuation">[</span>k<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> _config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>config<span class="token punctuation">,</span>    base<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_STATIC_CDN</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">===</span> <span class="token string">'serve'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span>_config<span class="token punctuation">,</span>      server<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 反向代理</span>        proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          api<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            target<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_API_HOST</span><span class="token punctuation">,</span>            changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> _config<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们利用了一个 <code>dotenv</code> 的库，来帮我们将配置的内容绑定到 <code>process.env</code> 上面供我们配置文件使用</p><h2 id="mobx-6-x-react-typescript-实践"><a href="#mobx-6-x-react-typescript-实践" class="headerlink" title="mobx@6.x + react + typescript 实践"></a><a href="mailto:mobx@6.x">mobx@6.x</a> + react + typescript 实践</h2><p>作者在使用 <code>mobx</code> 的时候，版本已经是 <a href="mailto:`mobx@6.x">`mobx@6.x</a>`，发现这里相比于旧版本，API 的使用上有了一些差异，特地在这里分享下踩坑经历</p><h3 id="Store-划分"><a href="#Store-划分" class="headerlink" title="Store 划分"></a>Store 划分</h3><p>store 的划分，主要参考本文的<a href="https://github.com/lichenbuliren/fe-project-base">示例</a><br>需要注意的是，在 store 初始化的时候，如果需要数据能够响应式绑定，需要在初始化的时候，给默认值，不能设置为 undefined 或者 null，这样子的话，数据是无法实现响应式的</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// store.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> makeAutoObservable<span class="token punctuation">,</span> observable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'mobx'</span><span class="token keyword">class</span> <span class="token class-name">CommonStore</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里必须给定一个初始化的只，否则响应式数据不生效</span>  title <span class="token operator">=</span> <span class="token string">''</span>  theme <span class="token operator">=</span> <span class="token string">'default'</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">makeAutoObservable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setTheme</span><span class="token punctuation">(</span>theme<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>theme <span class="token operator">=</span> theme  <span class="token punctuation">&#125;</span>  <span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">CommonStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Store-注入"><a href="#Store-注入" class="headerlink" title="Store 注入"></a>Store 注入</h3><p><code>mobx@6x</code>的数据注入，采用的 <code>react</code> 的 <code>context</code> 特性；主要分成以下三个步骤</p><h4 id="根节点变更"><a href="#根节点变更" class="headerlink" title="根节点变更"></a>根节点变更</h4><p>通过 <code>Provider</code> 组件，注入全局 <code>store</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Provider <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'mobx-react'</span><span class="token keyword">import</span> counterStore <span class="token keyword">from</span> <span class="token string">'./counter'</span><span class="token keyword">import</span> commonStore <span class="token keyword">from</span> <span class="token string">'./common'</span><span class="token keyword">const</span> stores <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  counterStore<span class="token punctuation">,</span>  commonStore<span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">></span>    <span class="token operator">&lt;</span>Provider stores<span class="token operator">=</span><span class="token punctuation">&#123;</span>stores<span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token function">renderRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a style="color:red;"><em>这里的 Provider 是由 mobx-react 提供的</em></a><br>通过查看源码我们会发现，<code>Provier</code>内部实现也是 <a href="https://reactjs.org/docs/context.html">React Context</a>：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// mobx-react Provider</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> shallowEqual <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./utils/utils"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> IValueMap <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./types/IValueMap"</span><span class="token keyword">export</span> <span class="token keyword">const</span> MobXProviderContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">createContext</span><span class="token generic class-name"><span class="token operator">&lt;</span>IValueMap<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ProviderProps</span> <span class="token keyword">extends</span> <span class="token class-name">IValueMap</span> <span class="token punctuation">&#123;</span>    children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Provider</span><span class="token punctuation">(</span>props<span class="token operator">:</span> ProviderProps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 除开 children 属性，其他的都作为 store 值</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>stores <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props    <span class="token keyword">const</span> parentValue <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>MobXProviderContext<span class="token punctuation">)</span>    <span class="token comment">// store 引用最新值</span>    <span class="token keyword">const</span> mutableProviderRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>parentValue<span class="token punctuation">,</span> <span class="token operator">...</span>stores <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> mutableProviderRef<span class="token punctuation">.</span>current    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>value<span class="token punctuation">,</span> <span class="token operator">...</span>stores <span class="token punctuation">&#125;</span> <span class="token comment">// spread in previous state for the context based stores</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">shallowEqual</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>                <span class="token string">"MobX Provider: The set of provided stores has changed. See: https://github.com/mobxjs/mobx-react#the-set-of-provided-stores-has-changed-error."</span>            <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>MobXProviderContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>MobXProviderContext<span class="token punctuation">.</span>Provider<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token comment">// 供调试工具显示 Provider 名称</span>Provider<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token string">"MobXProvider"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Store-使用"><a href="#Store-使用" class="headerlink" title="Store 使用"></a>Store 使用</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://reactjs.org/docs/hooks-reference.html#usecontext">React Hook useContext</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用-Vite-React-Typescript-打造一个前端单页应用模板&quot;&gt;&lt;a href=&quot;#使用-Vite-React-Typescript-打造一个前端单页应用模板&quot; class=&quot;headerlink&quot; title=&quot;使用 Vite + React + 
      
    
    </summary>
    
      <category term="react" scheme="https://heavenru.com/categories/react/"/>
    
    
      <category term="react" scheme="https://heavenru.com/tags/react/"/>
    
      <category term="typescript" scheme="https://heavenru.com/tags/typescript/"/>
    
      <category term="vite" scheme="https://heavenru.com/tags/vite/"/>
    
      <category term="single-page" scheme="https://heavenru.com/tags/single-page/"/>
    
  </entry>
  
  <entry>
    <title>高性能多级多选组件开发</title>
    <link href="https://heavenru.com//post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%A7%E5%A4%9A%E9%80%89%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91"/>
    <id>https://heavenru.com//post/高性能多级多选组件开发</id>
    <published>2020-05-31T12:13:09.000Z</published>
    <updated>2021-04-06T12:17:32.059Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在项目开发过程中，有个一个多级多选的公共组件开发需求，特在这里记录下开发过程中所做的一些优化以及分享一下我是如何从零开发并设计一个组件的思路，希望给阅读这篇文章的读者带来一点收获。</p></blockquote><h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><h2 id="单个项选中"><a href="#单个项选中" class="headerlink" title="单个项选中"></a>单个项选中</h2><p><img src="/images/selector/single-item-selected.png" alt="单个选中项"></p><h2 id="多个部分项选中"><a href="#多个部分项选中" class="headerlink" title="多个部分项选中"></a>多个部分项选中</h2><p><img src="/images/selector/multiple-item-selected.png" alt="多个选中项"></p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>在拿到需求之后，我们首先要做的是需求分析；通过上面的效果预览我们可以初步知道我们所需要处理的核心逻辑：</p><ol><li>默认加载第一层级数据</li><li>鼠标 hover<ol><li>异步获取数据</li><li>切换下级渲染数据</li></ol></li><li>鼠标点击<ol><li>点击当前项状态改变：选中 or 未选中</li><li>当前项的父级状态改变：选中、半选、不选中，并且需要递归处理</li><li>当前项的子级状态改变：全选、全不选</li></ol></li></ol><h1 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h1><p>在设计组件之前，我们需要考虑组件的性能、通用型等问题；如何设计一个与业务解耦的组件，是我们需要首先考虑的问题；那么，如何将组件数据请求与业务解耦呢：</p><ul><li>组件提供一个 service 入参，service 是一个返回 Promise 的异步请求方法</li><li>组件提供一个 dataMapper，用来做数据转换，将 service 请求返回的值转化为符合我们组件数据解构的数据</li><li>组件内部通过调用外部传入的 service 来获取数据</li></ul><p>入参设计如下：</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>  <span class="token comment">// 外部传入服务</span>  <span class="token function-variable function">service</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">args<span class="token operator">:</span> <span class="token punctuation">&#123;</span> parentId<span class="token operator">:</span> string <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> list<span class="token operator">:</span> SelectorItemType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span>  dataMapper<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">args<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> list<span class="token operator">:</span> SelectorItemType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">/**  * 回显数据   * @default []   */</span>  data<span class="token operator">?</span><span class="token operator">:</span> SelectorItemType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  onSubmit<span class="token operator">?</span><span class="token operator">:</span> SubmitCallback<span class="token punctuation">;</span>  onCancel<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> parentId<span class="token operator">:</span> itemId <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nextColumnList <span class="token operator">=</span> dataMapper <span class="token operator">?</span> <span class="token function">dataMapper</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>list <span class="token operator">:</span> data<span class="token punctuation">.</span>list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Notification<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  nextColumnList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="整体思路设计"><a href="#整体思路设计" class="headerlink" title="整体思路设计"></a>整体思路设计</h1><p>通过上面的 UI 呈现，现在大家应该有个基础的认识，我们需要做什么样的需求了。</p><p>我们在接到一个需求的时候，先不要着急着码代码，更好的方式是先规划我们的组件方案设计，并且提前思考好各种逻辑分支；<br>这里给大家看下我的设计初稿，我习惯性的选择脑图来发散自己的思维：</p><p><img src="/images/selector/draft.png" alt="脑图草稿"></p><p>通过上图，我们能够在大脑中有个大概的清晰认识到我们需要做哪些核心模块的设计与开发，接下来就是规划我们的核心模块划分：</p><ul><li>数据缓存</li><li>异步数据获取</li><li>选中数据缓存</li><li>渲染数据源设计</li></ul><p><img src="/images/selector/main.png" alt="核心模块"></p><h2 id="数据缓存设计"><a href="#数据缓存设计" class="headerlink" title="数据缓存设计"></a>数据缓存设计</h2><p>要设计一个高性能多级多选组件，肯定离不开我们的数据优化部分：<strong>数据缓存</strong></p><p>那么如果如何设计才能做到性能最优呢？通过上面的脑图，我们初步是通过一个 <code>dataCaheMap</code> 来缓存异步拉取回来的数据，这样子我们在取的时候，时间复杂度就是 O(1) ；既然是有 <code>Map</code> 来缓存数据，那么用什么作为 <code>key</code> 也是我们缓存的关键；<br>在这个组件里面，最终我选择的是：<strong>列索引+行索引+id 作为缓存 key</strong></p><p><em>这样设计的目的是，防止后台出现同时操作增删改类目配置；通过这种方式，能避免因为后台在同步操作到新增加或者删除了某个类目之后，取的缓存数据还是旧数据，这点是很关键的！</em></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 数据缓存映射 Map</span><span class="token keyword">const</span> <span class="token punctuation">[</span>dataCacheMap<span class="token punctuation">,</span> setDataCacheMap<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> SelectorItemType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 获取缓存 key * @param itemId selectedItem id * @param itemIndex selectedItem 当前 item 索引 * @param columnIndex 当前 column 索引 */</span><span class="token keyword">const</span> <span class="token function-variable function">getCacheKey</span> <span class="token operator">=</span> <span class="token punctuation">(</span>itemId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> itemIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> columnIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>itemId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>itemIndex<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>columnIndex<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token comment">// 取缓存值</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getItemList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>itemId<span class="token punctuation">,</span> itemIndex<span class="token punctuation">,</span> columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> nextColumnList <span class="token operator">=</span> dataCacheMap<span class="token punctuation">[</span>cacheKey<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> _selectedValues <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>selectedValues <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextColumnList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> parentId<span class="token operator">:</span> itemId <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// dataMapper 用来自定义数据转换</span>    nextColumnList <span class="token operator">=</span> dataMapper <span class="token operator">?</span> <span class="token function">dataMapper</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>list<span class="token punctuation">)</span> <span class="token operator">:</span> data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setDataCacheMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span>prev<span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cacheKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> nextColumnList<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据请求设计"><a href="#数据请求设计" class="headerlink" title="数据请求设计"></a>数据请求设计</h2><p>如果我们组件要与业务解耦，那么必须要将数据请求与组件解耦；所以我们设计组件的是，提供了一个 <code>service</code> 属性作为异步数据请求服务传入；并且通过 TS 来约束 参数与响应体结构，让接口服务返回的数据符合我们的组件所需的数据结构：单个数据项必须含有 id, parentId, label 三个必须属性，其中 parentId 是我们处理级联依赖的关键；针对不同的业务，可能第一级的 parentId 不一样，所以我们也提供了一个 <code>defaultParentId</code> 作为属性供外部传入</p><p><em>如果服务层的数据无法改变，我们还提供了 dataMapper 回调函数来帮助我们格式化返回的数据</em></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">/** * 单个类目项 */</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SelectorItemType</span> <span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">/**   * @default '0'   */</span>  parentId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 是否可选   * @default true   */</span>  disabled<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 选项文案   * @default '-'   */</span>  label<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 是否半选状态   * @default false   */</span>  indeterminate<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>  <span class="token comment">// 外部传入请求数据服务</span>  <span class="token function-variable function">service</span><span class="token operator">:</span> <span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token punctuation">&#123;</span> parentId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> list<span class="token operator">:</span> SelectorItemType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span>  defaultParentId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  dataMapper<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> list<span class="token operator">:</span> SelectorItemType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">/**   * @default []   */</span>  data<span class="token operator">?</span><span class="token operator">:</span> SelectorItemType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  onSubmit<span class="token operator">?</span><span class="token operator">:</span> SubmitCallback<span class="token punctuation">;</span>  onCancel<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="渲染数据源设计"><a href="#渲染数据源设计" class="headerlink" title="渲染数据源设计"></a>渲染数据源设计</h2><p>在有了前面的『数据缓存』、『数据请求』之后，我们接下来设计渲染所需的数据结构；从交互层面，我们最容易想到的是二维数组数据结构；通过二维数组的方式，能方便的帮助我们渲染所需的 UI；</p><p>假设我们的数据是如下数据格式：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 组件内部数据源</span><span class="token keyword">const</span> <span class="token punctuation">[</span>source<span class="token punctuation">,</span> setSource<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>SelectorItemType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是因为我们的交互上面，是有个『部分选中』这个状态存在，但是这个状态与后台类目无关，只是前端展示需要用到的字段，所以我们需要对接口返回的数据做一个初始化的操作：将数据源项新增一个半选状态 <code>indeterminate</code> 标志位，后续我们在处理级联状态的时候，需要频繁的改动到这个状态值</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">categoryList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span>item<span class="token punctuation">,</span>    id<span class="token operator">:</span> item<span class="token punctuation">.</span>categoryId<span class="token punctuation">,</span>    label<span class="token operator">:</span> item<span class="token punctuation">.</span>title<span class="token punctuation">,</span>    <span class="token comment">// 半选状态标志位</span>    indeterminate<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>selectorItemContainer<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token punctuation">&#123;</span>column<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>        <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>columnIndex<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span>        <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>selectorItem<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">onMouseEnter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">debouncedHoverCallback</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">,</span> index<span class="token punctuation">,</span> columnIndex<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>        <span class="token punctuation">></span></span><span class="token plain-text">        &lt;Checkbox          value=</span><span class="token punctuation">&#123;</span><span class="token function">Boolean</span><span class="token punctuation">(</span>selectedValues<span class="token punctuation">[</span>item<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">          disabled=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>disabled<span class="token punctuation">&#125;</span><span class="token plain-text">          // 判断是否半选          indeterminate=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>indeterminate<span class="token punctuation">&#125;</span><span class="token plain-text">          className=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>checkbox<span class="token punctuation">&#125;</span><span class="token plain-text">          onClick=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleItemClick</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> columnIndex<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">          >          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>labelText<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>label <span class="token operator">||</span> <span class="token string">'-'</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Checkbox</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Icon</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>iconRight<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arrowright<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="已选数据设计"><a href="#已选数据设计" class="headerlink" title="已选数据设计"></a>已选数据设计</h2><p>我们的组件是『多级多选』无限层级，在组件渲染的时候，如何判断当前 item 项是否选中，依靠的就是我们的已选数据 state：</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 已选择类目，组件内部维护状态</span><span class="token keyword">const</span> <span class="token punctuation">[</span>selectedValues<span class="token punctuation">,</span> setSelectedValues<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>SelectedMap<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Checkbox  <span class="token comment">// 判断是否选中</span>  value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">Boolean</span><span class="token punctuation">(</span>selectedValues<span class="token punctuation">[</span>item<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>  disabled<span class="token operator">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>disabled<span class="token punctuation">&#125;</span>  indeterminate<span class="token operator">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>indeterminate<span class="token punctuation">&#125;</span>  className<span class="token operator">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>checkbox<span class="token punctuation">&#125;</span>  onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleItemClick</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> columnIndex<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>  <span class="token operator">></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>labelText<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>label <span class="token operator">||</span> <span class="token string">'-'</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Checkbox</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过打平数据结构，我们无需关心渲染层级，时间复杂度层面也是保持 O(1)；</p><h1 id="交互逻辑详解"><a href="#交互逻辑详解" class="headerlink" title="交互逻辑详解"></a>交互逻辑详解</h1><h2 id="Hover-事件逻辑详情"><a href="#Hover-事件逻辑详情" class="headerlink" title="Hover 事件逻辑详情"></a>Hover 事件逻辑详情</h2><p>鼠标 hover 操作，我们主要是需要：</p><ol><li>处理异步数据的获取与缓存</li><li>处理当前项的子级数据状态；通过在 Hover 的时候来控制子级的状态，可以让我省去递归子级的操作来提高我们的整体性能</li></ol><p><strong>注意：在 Hover 事件过程中，我们需要对 debounce 操作</strong></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useDebouncedCallback <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'use-debounce'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>debouncedHoverCallback<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useDebouncedCallback</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">itemId<span class="token operator">:</span> string<span class="token punctuation">,</span> itemIndex<span class="token operator">:</span> number<span class="token punctuation">,</span> columnIndex<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setQueryData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        itemId<span class="token punctuation">,</span>        columnIndex<span class="token punctuation">,</span>        itemIndex<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token number">100</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>columnIndex<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span>  <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>selectorItem<span class="token punctuation">&#125;</span></span>  <span class="token attr-name">onMouseEnter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token function">debouncedHoverCallback</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">,</span> index<span class="token punctuation">,</span> columnIndex<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">  ....</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/selector/HandleHover.png" alt="Hover Detail"></p><h2 id="多选项-Click-逻辑详情"><a href="#多选项-Click-逻辑详情" class="headerlink" title="多选项 Click 逻辑详情"></a>多选项 Click 逻辑详情</h2><p>鼠标 click 操作，核心逻辑：</p><ol><li>改变当前点击项状态</li><li>改变子级状态</li><li>改变父级状态</li></ol><p><img src="/images/selector/HandleItemClick.png" alt="Click Detail"></p><h1 id="数据回调"><a href="#数据回调" class="headerlink" title="数据回调"></a>数据回调</h1><p>在我们选中操作完成之后，我们需要将用户选择的数据提交给后台，通常多级多选的数据结构设计是平级设计，所以当我们父级如果是选中的数据，那么它的子级数据就没有必要提交给后台了；</p><p>所以我们需要冲选中池中过滤出<strong>父级 parentId 不在选中池中的数据</strong>，这个就是我们最终需要返回给用户与后台的数据</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> result<span class="token operator">:</span> SelectorItemType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>selectedValues<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> selectedValues<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 核心逻辑：过滤出当前 parentId 不在选中池中数据，就表示它的父级没有选中</span>  <span class="token keyword">const</span> filterData <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>selectedValues<span class="token punctuation">[</span>item<span class="token punctuation">.</span>parentId<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>parentId<span class="token punctuation">)</span><span class="token punctuation">;</span>  onSubmit <span class="token operator">&amp;&amp;</span> <span class="token function">onSubmit</span><span class="token punctuation">(</span>filterData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><p>到这里我们就基本介绍完了如何从 0 到 1完整的设计一个多级多选的组件；该组件支持任意层级的数据，只需要满足我们的层级依赖关系的数据结构，将能复用这个组件</p><p>但是我们还有几个思考题：</p><ol><li>如果多选组件还需要能展示禁选项，逻辑如何调整？</li><li>如何解耦 DOM 结构与 CSS 实现</li></ol><p>这两个问题欢迎各位在下面讨论</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在项目开发过程中，有个一个多级多选的公共组件开发需求，特在这里记录下开发过程中所做的一些优化以及分享一下我是如何从零开发并设计一个组件的思路，希望给阅读这篇文章的读者带来一点收获。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;效果预览&quot;
      
    
    </summary>
    
    
      <category term="Typescript" scheme="https://heavenru.com/tags/Typescript/"/>
    
      <category term="React" scheme="https://heavenru.com/tags/React/"/>
    
      <category term="性能" scheme="https://heavenru.com/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>使用 TypeScript 开发小程序最佳实践</title>
    <link href="https://heavenru.com//post/%E7%94%A8-Typescript-%E7%BC%96%E5%86%99%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F"/>
    <id>https://heavenru.com//post/用-Typescript-编写微信小程序</id>
    <published>2020-01-28T07:34:33.000Z</published>
    <updated>2021-04-06T12:17:20.087Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当微信小程序遇上 Typescript 会碰撞出怎样的火花？该文章将介绍一下如何使用 TS 来提升小程序的开发体验</p></blockquote><p><strong>该文章含有大量示例代码，读者有过小程序开发经验并且对 TypeScript 熟悉最佳</strong></p><p>完整阅读该文章大概需要 10 分钟；</p><h2 id="使用-TSLib-精简代码"><a href="#使用-TSLib-精简代码" class="headerlink" title="使用 TSLib 精简代码"></a>使用 TSLib 精简代码</h2><p>在 TS 中，要像 <code>webpack</code> 中那样使用 <code>babel-runtime</code>，我们只要依赖官方提供的 <a href="https://github.com/Microsoft/tslib">tslib</a> 库；</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save tslib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改-tsconfig-json-配置文件"><a href="#修改-tsconfig-json-配置文件" class="headerlink" title="修改 tsconfig.json 配置文件"></a>修改 <code>tsconfig.json</code> 配置文件</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"importHelpers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es5"</span><span class="token punctuation">,</span> <span class="token string">"es2016"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译后代码对比"><a href="#编译后代码对比" class="headerlink" title="编译后代码对比"></a>编译后代码对比</h3><h4 id="使用前"><a href="#使用前" class="headerlink" title="使用前"></a>使用前</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> __assign <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__assign<span class="token punctuation">)</span> <span class="token operator">||</span> Object<span class="token punctuation">.</span>assign <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> s<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">in</span> s<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span>            t<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">__assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> exports<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用后"><a href="#使用后" class="headerlink" title="使用后"></a>使用后</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> tslib_1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"tslib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>y <span class="token operator">=</span> tslib_1<span class="token punctuation">.</span><span class="token function">__assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> exports<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="巧用-TS-的混合申明提升开发体验"><a href="#巧用-TS-的混合申明提升开发体验" class="headerlink" title="巧用 TS 的混合申明提升开发体验"></a>巧用 TS 的混合申明提升开发体验</h2><p>我们期望的开发体验是：无论是 Page、Component</p><ol><li><p>Class 编写开发体验，就像 React 一样</p></li><li><p>拥有和原生开发体验相同的代码提示</p></li><li>单个页面 Page 只需要 extends 一个基础类就能获得上面两者的开发体验，不需要手动 Page({}) 注册页面或者 Component({}) 注册组件</li></ol><p>要实现这三种开发体验，我们需要利用 TS 特有的<a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html">声明合并</a>特性：接口与类声明合并；</p><p>其中通过一个接口声明 BasePage 来继承小程序官方的 Page 生命周期、实例方法、实例属性；</p><p>另外通过声明一个 BasePage 的 class 类，在这里我们可以新增各种自定义的类成员变量；</p><p>如此我们就能够通过一个<code>export default class extends BasePage</code> 来编写我们的 Page 页面了；</p><p>通过声明合并的方式，抽象一个基类，只能解决前面两条，要实现第三条，我们还需要利用到 TS 的类装饰器来帮助我们在小程序中注册 Page 页面，详情看后面的拦截器部分；</p><p>接下来我们来看下如何封装基类 <code>BasePage</code> 与 <code>BaseComponent</code></p><h3 id="封装-BasePage-基类"><a href="#封装-BasePage-基类" class="headerlink" title="封装 BasePage 基类"></a>封装 BasePage 基类</h3><p>我们很容易想到 React 继承的 Component 的方式，那么我们也可以通过抽象一个基类 <code>BasePage</code> 来实现第一点的需求；</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">IAnyObject</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BasePageProps</span>  <span class="token keyword">extends</span> <span class="token class-name">WechatMiniprogram</span><span class="token punctuation">.</span>Page<span class="token punctuation">.</span>InstanceProperties <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 用来保存 onLoad(options) 传入的参数   */</span>  options<span class="token operator">:</span> IAnyObject<span class="token punctuation">;</span>  <span class="token comment">/** 页面的初始数据   *   * `data` 是页面第一次渲染使用的**初始数据**。   *   * 页面加载时，`data` 将会以`JSON`字符串的形式由逻辑层传至渲染层，因此`data`中的数据必须是可以转成`JSON`的类型：字符串，数字，布尔值，对象，数组。   *   * 渲染层可以通过 `WXML` 对数据进行绑定。   */</span>  data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>  <span class="token comment">/** 到当前页面的路径和参数，类型为`String`。最低基础库： `1.2.0` */</span>  url<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BasePage</span>  <span class="token keyword">extends</span> <span class="token class-name">WechatMiniprogram</span><span class="token punctuation">.</span>Page<span class="token punctuation">.</span>ILifetime<span class="token punctuation">,</span>    WechatMiniprogram<span class="token punctuation">.</span>Page<span class="token punctuation">.</span>InstanceMethods<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span>    BasePageProps <span class="token punctuation">&#123;</span>  <span class="token comment">// 允许其他任意自定义的 class 变量</span>  <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">BasePage</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">readonly</span> app<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@wxPage<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> BasePage <span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    abcd<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    color<span class="token operator">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token operator">...</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span>  <span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体效果如下图：</p><p><img src="/images/wx-code.gif" style="width: 100%" /></p><p><strong>思考：为啥我们不直接去继承原生的接口声明呢？</strong></p><p>感兴趣的同学可以自己尝试一下，就会明白了。</p><h3 id="封装-BaseComponent-基类"><a href="#封装-BaseComponent-基类" class="headerlink" title="封装 BaseComponent 基类"></a>封装 BaseComponent 基类</h3><p>在编写完 BasePage 基类之后，同样的 BaseComponent 实现起来原理都差不多，我们需要注意的就是需要具体继承哪些声明与属性而已：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BaseComponent</span>  <span class="token keyword">extends</span> <span class="token class-name">WechatMiniprogram</span><span class="token punctuation">.</span>Component<span class="token punctuation">.</span>Lifetimes<span class="token punctuation">,</span>    WechatMiniprogram<span class="token punctuation">.</span>Component<span class="token punctuation">.</span>OtherOption<span class="token punctuation">,</span>    WechatMiniprogram<span class="token punctuation">.</span>Component<span class="token punctuation">.</span>InstanceMethods<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  properties<span class="token operator">:</span> WechatMiniprogram<span class="token punctuation">.</span>Component<span class="token punctuation">.</span>PropertyOption<span class="token punctuation">;</span>  data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>  methods<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span>  $global<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">BaseComponent</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">readonly</span> app<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>  $global<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 该方法会被注入到 methods 对象中去</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$global <span class="token operator">=</span> $global<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里涉及的难点主要在于我们需要对微信官方提供的 d.ts 文件非常熟练，作者我也是反复查看官方提供的最新 d.ts 文件，去阅读理解官方 API 的设置</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">BaseComponent</span> <span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      c<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  properties <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    color<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      value<span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  observers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里首个参数指明 this 的指向，如果不指名，ts 会报错</span>    <span class="token function">color</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> MyComponent<span class="token punctuation">,</span> newColor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newColor'</span><span class="token punctuation">,</span> newColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 箭头函数方式，this 指向明确</span>    <span class="token function-variable function">color2</span><span class="token operator">:</span> val <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'color2'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 自定义方法，可以在生命周期除 created 之外的方法中访问</span>  <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'myFunction'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token function">attached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      d<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  methods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">handleTap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-TS-装饰器对-Page-Component-生命周期拦截注册"><a href="#使用-TS-装饰器对-Page-Component-生命周期拦截注册" class="headerlink" title="使用 TS 装饰器对 Page/Component 生命周期拦截注册"></a>使用 TS 装饰器对 Page/Component 生命周期拦截注册</h2><h3 id="wxPage-小程序-Page-装饰器"><a href="#wxPage-小程序-Page-装饰器" class="headerlink" title="wxPage-小程序 Page 装饰器"></a>wxPage-小程序 Page 装饰器</h3><p>前面我们通过抽象 Page/Component 的基类 BasePage/BaseComponent，解决了开发体验的问题，接下来我们需要解决的时候，如何优雅的注册我们的 Page/Component;</p><p>我们知道，要注册一个小程序页面或者组件，通常原生的写法是 <code>Page(&#123;xxx&#125;) or Component(&#123;xxx&#125;)</code>，但是我们现在的开发是通过 <code>MyPage extends BasePage</code> 来实现的，如要要注册一个页面，可以通过 <code>Page(MyPage 转 obj)</code> 来实现，但是这么做的话，每个页面都得写一遍这个代码，有点冗余，所以我们需要找一个更加优雅的方式来实现这个问题；</p><p>首先想到的是 TS 的<a href="https://www.typescriptlang.org/docs/handbook/decorators.html">装饰器</a>特性，</p><blockquote><p>装饰器是一种特殊类型的声明，它能够被附加到<a href="https://www.tslang.cn/docs/handbook/decorators.html#class-decorators">类声明</a>，<a href="https://www.tslang.cn/docs/handbook/decorators.html#method-decorators">方法</a>， <a href="https://www.tslang.cn/docs/handbook/decorators.html#accessor-decorators">访问符</a>，<a href="https://www.tslang.cn/docs/handbook/decorators.html#property-decorators">属性</a>或<a href="https://www.tslang.cn/docs/handbook/decorators.html#parameter-decorators">参数</a>上</p></blockquote><p>我们来看下具体的一个<strong>类装饰器</strong>的基本格式：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wxPage</span><span class="token punctuation">(</span>decoratorOptions<span class="token operator">?</span><span class="token operator">:</span> DecoratorOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> BasePage<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">WxPage</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">constructor</span></span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WxPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">toObject</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Page</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的 <code>toObject</code> 就是我们将简单的 class 转化为 obj 的一个工具方法，这里我们参考了 <a href="https://github.com/qiu8310/minapp/blob/master/packages/minapp-core/src/util/object.ts">minapp</a> 的实现，感兴趣的同学可以仔细阅读下它的源码；</p><h4 id="声明周期的拦截"><a href="#声明周期的拦截" class="headerlink" title="声明周期的拦截"></a>声明周期的拦截</h4><p>我们的 <code>wxPage</code> 装饰器除了承担注册微信小程序 Page 的任务，我们还可以在这里做一些额外的操作，比如</p><p>Page 的生命周期拦截操作、注入 store 等特性：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BasePage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../base/basePage'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> toObject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../utils/object'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DecoratorOptions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../interface'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStoreBindings <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'mobx-miniprogram-bindings'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wxPage</span><span class="token punctuation">(</span>decoratorOptions<span class="token operator">?</span><span class="token operator">:</span> DecoratorOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> BasePage<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">WxPage</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">constructor</span></span> <span class="token punctuation">&#123;</span>      storeBindings<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>      <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token operator">...</span>_args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">onLoad</span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          wxPage<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'wxPage onLoad'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$global</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> storeBindingOptions <span class="token punctuation">&#125;</span> <span class="token operator">=</span> decoratorOptions <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 绑定传入的 store 到当前 Page 对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>storeBindingOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> store<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> actions <span class="token punctuation">&#125;</span> <span class="token operator">=</span> storeBindingOptions<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>storeBindings <span class="token operator">=</span> <span class="token function">createStoreBindings</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            store<span class="token punctuation">,</span>            fields<span class="token punctuation">,</span>            actions<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>onLoad <span class="token operator">&amp;&amp;</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onLoad</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token comment">// 重写生命周期函数，可以在这里前后拦截操作</span>      <span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>onReady <span class="token operator">&amp;&amp;</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>onShow <span class="token operator">&amp;&amp;</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">onUnload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storeBindings <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storeBindings<span class="token punctuation">.</span><span class="token function">destroyStoreBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>onUnload <span class="token operator">&amp;&amp;</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onUnload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WxPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">toObject</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Page</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BasePage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../core/base/basePage'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> wxPage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../core/decorator/index'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> store <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../store/index'</span><span class="token punctuation">;</span><span class="token comment">// 这里我们以 mobx 作为数据管理</span><span class="token comment">// 通过装饰器传参，指定要绑定的 store、字段、与 actions</span>@<span class="token function">wxPage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  storeBindingOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    store<span class="token punctuation">,</span>    fields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'injectA'</span><span class="token punctuation">,</span> <span class="token string">'injectB'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    actions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'updateA'</span><span class="token punctuation">,</span> <span class="token string">'updateB'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> BasePage <span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    abcd<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    color<span class="token operator">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token operator">...</span>    <span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 通过装饰器注入的 store 方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      abc<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        color<span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，我们就基本上完成了一个小程序 Page 的 TS 版本开发模式；通过继承一个 <code>BasePage</code>的方式，同时使用<code>wxPage</code>装饰器装饰我们的类，就能完成一个小程序 Page 的注册了；</p><h3 id="wxComponent-小程序-Component-装饰器"><a href="#wxComponent-小程序-Component-装饰器" class="headerlink" title="wxComponent-小程序 Component 装饰器"></a>wxComponent-小程序 Component 装饰器</h3><p>小程序 Component 装饰器的实现原理和 wxPage 类似，不同的地方在于 <code>class =&gt; obj</code> 的时候，需要做一些额外的处理：</p><ul><li>支持生命周期函数以 <code>on</code> + 函数名的方式</li><li>支持自定义的函数，而不用写到 <code>methods</code> 对象里面</li><li>特殊处理 <code>properties</code> 字段，需要判断是对象还是字符串类型，然后进行统一赋值为对象类型</li><li>非生命周期函数自定义的方法，需要重新挂载到 <code>methods</code> 对象上面，不然无法识别自定义方法</li><li>小程序 Component() 初始化的时候，会忽略非官方支持的属性，所以如果是非官方自持的属性，我们需要在组件的 <code>created</code> 生命周期函数中执行绑定操作</li></ul><p>具体样例代码如下：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 将 on 开头的生命周期函数转变成非 on 开头的</span><span class="token keyword">const</span> <span class="token constant">RAW_LIFE_CYCLES</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Created'</span><span class="token punctuation">,</span> <span class="token string">'Attached'</span><span class="token punctuation">,</span> <span class="token string">'Ready'</span><span class="token punctuation">,</span> <span class="token string">'Moved'</span><span class="token punctuation">,</span> <span class="token string">'Detached'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">NATIVE_LIFE_CYCLES</span> <span class="token operator">=</span> <span class="token constant">RAW_LIFE_CYCLES</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k <span class="token operator">=></span> k<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">COMPONENT_NATIVE_PROPS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'externalClasses'</span><span class="token punctuation">,</span>  <span class="token string">'properties'</span><span class="token punctuation">,</span>  <span class="token string">'data'</span><span class="token punctuation">,</span>  <span class="token string">'options'</span><span class="token punctuation">,</span>  <span class="token string">'relations'</span><span class="token punctuation">,</span>  <span class="token string">'behaviors'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/** * 将一个普通的 options 对象转化处理为 Component 支持的对象 * 在这里需要对一些方法进行操作 * @param options &#123;&#125; */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">toComponent</span><span class="token punctuation">(</span>options<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 处理 properties 属性</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>properties<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// @ts-ignore</span>      <span class="token keyword">let</span> opt<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> options<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 如何不是 Object 类型，则默认指定 type = options.properties[k]；</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        opt <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token keyword">type</span><span class="token operator">:</span> opt <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// @ts-ignore</span>      options<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> opt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 处理自定义的方法和生命周期函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>methods<span class="token punctuation">)</span> options<span class="token punctuation">.</span>methods <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> inits<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> PropertyDescriptor <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>k <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> desc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>desc<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NATIVE_LIFE_CYCLES</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> desc<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 非生命周期函数挂载到 methods 对象上面</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>methods<span class="token punctuation">,</span> k<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">delete</span> options<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">COMPONENT_NATIVE_PROPS</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 非函数，也非组件内部属性</span>      <span class="token comment">// 由于小程序组件会忽略不能识别的字段，需要这里需要把这些字段配置在组件 created 的时候赋值</span>      inits<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>inits<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> oldCreated <span class="token operator">=</span> options<span class="token punctuation">.</span>created <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span><span class="token function-variable function">created</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> inits<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// eslint-disable-next-line prefer-rest-params</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCreated<span class="token punctuation">)</span> <span class="token function">oldCreated</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> options<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 将一个继承了 BaseComponent 的类转化成 小程序 Component 的调用 * 根据最新的微信 d.ts 描述文件，Component 在实例化的时候，会忽略不支持的自定义属性 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wxComponent</span><span class="token punctuation">(</span>decoratorOptions<span class="token operator">?</span><span class="token operator">:</span> DecoratorOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> BaseComponent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">WxComponent</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">constructor</span></span> <span class="token punctuation">&#123;</span>      storeBindings<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>      <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token operator">...</span>_args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> storeBindingOptions <span class="token punctuation">&#125;</span> <span class="token operator">=</span> decoratorOptions <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>storeBindingOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> store<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> actions <span class="token punctuation">&#125;</span> <span class="token operator">=</span> storeBindingOptions<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>storeBindings <span class="token operator">=</span> <span class="token function">createStoreBindings</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            store<span class="token punctuation">,</span>            fields<span class="token punctuation">,</span>            actions<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>created <span class="token operator">&amp;&amp;</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">attached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>attached <span class="token operator">&amp;&amp;</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">detached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storeBindings <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storeBindings<span class="token punctuation">.</span><span class="token function">destroyStoreBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>detached <span class="token operator">&amp;&amp;</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">detached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WxComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里是与 Page 不一样的地方</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">toComponent</span><span class="token punctuation">(</span><span class="token function">toObject</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Component</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用方式-2"><a href="#使用方式-2" class="headerlink" title="使用方式"></a>使用方式</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BaseComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../../core/base/baseComponent'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> wxComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../../core/decorator/index'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> store <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../../store/index'</span><span class="token punctuation">;</span>@<span class="token function">wxComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  storeBindingOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    store<span class="token punctuation">,</span>    fields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'injectA'</span><span class="token punctuation">,</span> <span class="token string">'injectB'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    actions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'updateA'</span><span class="token punctuation">,</span> <span class="token string">'updateB'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">BaseComponent</span> <span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      c<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  properties <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    color<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      value<span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  observers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里如果非箭头函数，需要显示指明 this 的指向</span>    <span class="token function">color</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> MyComponent<span class="token punctuation">,</span> newColor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newColor'</span><span class="token punctuation">,</span> newColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 使用箭头函数，this 指向正确</span>    <span class="token function-variable function">color2</span><span class="token operator">:</span> val <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'color2'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 自定义方法，可以在生命周期除 created 之外的方法中访问</span>  <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'myFunction'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;当微信小程序遇上 Typescript 会碰撞出怎样的火花？该文章将介绍一下如何使用 TS 来提升小程序的开发体验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;该文章含有大量示例代码，读者有过小程序开发经验并且对 TypeScript
      
    
    </summary>
    
      <category term="小程序" scheme="https://heavenru.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="typescript" scheme="https://heavenru.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/typescript/"/>
    
    
      <category term="小程序" scheme="https://heavenru.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="typescript" scheme="https://heavenru.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>小程序插件开发小结</title>
    <link href="https://heavenru.com//post/miniprogram-plugin"/>
    <id>https://heavenru.com//post/miniprogram-plugin</id>
    <published>2019-05-29T02:14:05.000Z</published>
    <updated>2021-04-06T12:18:50.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序插件开发小结"><a href="#小程序插件开发小结" class="headerlink" title="小程序插件开发小结"></a>小程序插件开发小结</h2><blockquote><p>本文主要是整理了与总结了一些小程序插件开发相关资料，按顺序阅读按文章即可对小程序插件开发有个基本了解了</p></blockquote><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="什么是小程序插件"><a href="#什么是小程序插件" class="headerlink" title="什么是小程序插件"></a>什么是小程序插件</h4><blockquote><p>插件是对一组<code>js 接口</code>、<code>自定义组件</code>或<code>页面</code>的封装，用于嵌入到小程序中使用。插件不能独立运行，必须嵌入在其他小程序中才能被用户使用；而第三方小程序在使用插件时，也无法看到插件的代码。因此，插件适合用来封装自己的功能或服务，提供给第三方小程序进行展示和使用。</p></blockquote><p> 插件的开发和使用自小程序基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.6</a> 开始支持。（如果插件包含页面，则需要基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a> 。）</p><p><strong><span style="color: red;">小程序的 AppID 可以创建小程序插件项目，插件是独立于小程序之外的，但是 AppID 是公用的</span></strong></p><p>传送门：<a href="https://developers.weixin.qq.com/miniprogram/introduction/plugin.html#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8F%92%E4%BB%B6%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D">小程序插件功能介绍</a></p><span id="more"></span><h4 id="插件所有者小程序"><a href="#插件所有者小程序" class="headerlink" title="插件所有者小程序"></a>插件所有者小程序</h4><p>开始开发之前，我们需要知道，插件功能页是指 <strong>插件所有者小程序</strong> 中的一个特殊页面。</p><p><strong>插件所有者小程序</strong>，指的是与插件 <code>AppID</code> 相同的小程序。例如，“小程序示例”小程序开发了一个“小程序示例插件”，那么无论这个插件被哪个小程序使用，这个插件的 <strong>插件所有者小程序</strong> 都是“小程序示例”。下文中会继续使用 <strong>插件所有者小程序</strong> 这个说法。</p><h4 id="什么是插件功能页"><a href="#什么是插件功能页" class="headerlink" title="什么是插件功能页"></a>什么是插件功能页</h4><blockquote><p>相对于普通 js 文件或自定义组件，插件拥有更强的独立性，拥有独立的 API 接口、域名列表等，但同时会受到一些限制，如 <strong>一些 API 无法调用或功能受限</strong>。还有个别特殊的接口，虽然插件不能直接调用，但可以使用 <strong>插件功能页</strong> 来间接实现。</p></blockquote><p><strong>激活插件功能页特性：</strong></p><p>要在插件中调用插件功能页，需要先激活插件所有者小程序的功能页特性。具体来说，在插件所有者小程序的 <code>app.json</code> 文件中添加 <code>functionalPages</code> 定义段，并令其值为 <code>true</code> ，例如：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"functionalPages"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"independent"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 兼容旧方式</span><span class="token punctuation">&#123;</span>  <span class="token property">"functionalPages"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两种写法的区别在于，新式的写法 <code>&quot;independent&quot;: true</code> 会使得插件功能页的代码独立于其他代码，这意味着插件功能页可以被独立下载、加载，具有更好的性能表现。 但也同时使得插件功能页目录 <code>functional-pages/</code> （支付功能页会使用其中的文件）不能 require 这个目录以外的文件（反之亦然：这个目录以外的文件也不能调用这个目录内的）。</p><p>注意，新增或改变这个字段时，需要这个小程序发布新版本，才能在正式环境中使用插件功能页。</p><p>传送门：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages.html">插件功能页</a></p><p>####插件调用 API 限制</p><p>插件可以调用的 API 与小程序不同，主要有两个区别：</p><ul><li>插件的请求域名列表与小程序相互独立；</li><li>一些 API 不允许插件调用（这些函数不存在于 <code>wx</code> 对象下）。</li></ul><p>有些接口虽然在插件中不能使用，但可以通过插件功能页来达到目的，请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages.html">插件功能页</a>。</p><p>目前，允许插件调用的 API 有：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/api-limit.html">插件可调用 API 列表</a></p><h4 id="插件使用组件限制"><a href="#插件使用组件限制" class="headerlink" title="插件使用组件限制"></a>插件使用组件限制</h4><p>在插件开发中，以下组件不能在插件页面中使用：</p><ul><li>开放能力（open-type）为以下之一的 button：<ul><li>contact（打开客服会话）</li><li>getPhoneNumber（获取用户手机号）</li><li>getUserInfo（获取用户信息）</li></ul></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html">open-data</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html">web-view</a></li></ul><p>以下组件的使用对基础库版本有要求：</p><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html">navigator</a> 需要基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/live-player.html">live-player</a> 和 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/live-pusher.html">live-pusher</a> 需要基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.0</a></li></ul><h3 id="开发插件"><a href="#开发插件" class="headerlink" title="开发插件"></a>开发插件</h3><h4 id="开放范围及服务类目"><a href="#开放范围及服务类目" class="headerlink" title="开放范围及服务类目"></a>开放范围及服务类目</h4><blockquote><p>开放范围：企业、媒体、政府及其他组织主体</p></blockquote><h4 id="插件开发接入流程"><a href="#插件开发接入流程" class="headerlink" title="插件开发接入流程"></a>插件开发接入流程</h4><p>以下为插件开发接入流程：</p><ol><li><a href="https://developers.weixin.qq.com/miniprogram/introduction/plugin.html#%E5%BC%80%E9%80%9A%E6%8F%92%E4%BB%B6%E5%8A%9F%E8%83%BD">开通插件功能</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/introduction/plugin.html#%E5%A1%AB%E5%86%99%E5%BC%80%E5%8F%91%E4%BF%A1%E6%81%AF%E5%B9%B6%E5%AE%8C%E6%88%90%E5%BC%80%E5%8F%91">填写开发信息并开发</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/introduction/plugin.html#%E5%AE%8C%E5%96%84%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF">完善基本信息</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/introduction/plugin.html#%E6%8F%90%E4%BA%A4%E5%AE%A1%E6%A0%B8%E3%80%81%E5%8F%91%E5%B8%83">提交审核、发布</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/introduction/plugin.html#%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%94%B3%E8%AF%B7">管理插件使用申请</a></li></ol><h4 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h4><p>传送门：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/development.html">小程序插件开发</a></p><p>阅读官方文档之后，我们大概知道如何进行一个小程序插件开发了。这里记录一些文档上没提到的地方：</p><ul><li>插件里面可以引用 <code>npm</code> 包，同样的可以将引用的包暴露给小程序使用</li><li>插件里面支持发布<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/template-message.html">模板消息</a>到第三方小程序主体中</li></ul><h3 id="小程序插件的使用"><a href="#小程序插件的使用" class="headerlink" title="小程序插件的使用"></a>小程序插件的使用</h3><blockquote><p>在使用插件前，首先要在小程序管理后台的“设置-第三方服务-插件管理”中添加插件。开发者可登录小程序管理后台，通过 appid 查找插件并添加。如果插件无需申请，添加后可直接使用；否则需要申请并等待插件开发者通过后，方可在小程序中使用相应的插件。</p></blockquote><p>使用插件前，使用者要在 <code>app.json</code> 中声明需要使用的插件，例如：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"myPlugin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 'myPlugin' 只是一个别名，可随意命名</span>      <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>      <span class="token property">"provider"</span><span class="token operator">:</span> <span class="token string">"wxidxxxxxxxxxxxxxxxx"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在分包内引入插件代码包：</strong></p><p>如果插件只在一个分包内用到，可以将插件仅放在这个分包内，例如：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"subpackages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"root"</span><span class="token operator">:</span> <span class="token string">"packageA"</span><span class="token punctuation">,</span>      <span class="token property">"pages"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"pages/cat"</span><span class="token punctuation">,</span> <span class="token string">"pages/dog"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"myPlugin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>          <span class="token property">"provider"</span><span class="token operator">:</span> <span class="token string">"wxidxxxxxxxxxxxxxxxx"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在分包内使用插件有如下限制：</p><ul><li>仅能在这个分包内使用该插件；</li><li>同一个插件不能被多个分包同时引用；</li><li>基础库版本低于 2.6.0 时，不能从分包外的页面直接跳入分包内的插件页面，需要先跳入分包内的非插件页面、再跳入同一分包内的插件页面。</li></ul><h4 id="小程序引用插件接口、页面、组件"><a href="#小程序引用插件接口、页面、组件" class="headerlink" title="小程序引用插件接口、页面、组件"></a>小程序引用插件接口、页面、组件</h4><ul><li><p>引用插件提供的组件：</p><p>使用插件提供的自定义组件，和<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/">使用普通自定义组件</a>的方式相仿。在页面的 <code>json</code> 文件定义需要引入的自定义组件时，使用 <code>plugin://</code> 协议指明插件的引用名和自定义组件名，</p></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"hello-component"</span><span class="token operator">:</span> <span class="token string">"plugin://myPlugin/hello-component"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>引用插件提供的接口</p><p>使用插件的 js 接口时，可以使用 <code>requirePlugin</code> 方法。例如，插件提供一个名为 <code>hello</code> 的方法和一个名为 <code>world</code> 的变量，则可以像下面这样调用：</p></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">const myPluginInterface = requirePlugin('myPlugin')myPluginInterface.hello()const myWorld = myPluginInterface.world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>引用插件页面</p><p>插件的页面从小程序基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a> 开始支持。</p><p>需要跳转到插件页面时，<code>url</code> 使用 <code>plugin://</code> 前缀，形如 <code>plugin://PLUGIN_NAME/PLUGIN_PAGE</code>， 如：</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plugin://myPlugin/hello-page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Go to pages/hello-page!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>####小程序与插件数据交互</p><ul><li>通过 URL 参数形式传递</li></ul><ol><li>在小程序端引用插件入口，<code>URL</code> 后面带上插件所需的数据信息，通过这种方案，我们可以将小程序的里面 取得的 <code>openId</code> 传递给插件</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>item<span class="token punctuation">'</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>plugin://myPlugin/send-message?params=&#123;&#123;params&#125;&#125;<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  表单提交推送消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在插件页面 <code>onLoad</code> 生命周期内，获取并解析数据</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 生命周期函数--监听页面加载</span><span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onLoad'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> options <span class="token operator">?</span> options<span class="token punctuation">.</span>params <span class="token operator">:</span> <span class="token string">'&#123;&#125;'</span>  <span class="token keyword">const</span> pageParams <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pageParams<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> pageParams <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过小程序提供一个消息订阅接口</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">requirePlugin</span><span class="token punctuation">(</span><span class="token string">"myPlugin"</span><span class="token punctuation">)</span><span class="token comment">// 这里的 msg 假设是一个消息订阅类</span><span class="token comment">// 消息通信 - 小程序端</span><span class="token comment">// 监听来自插件的消息</span>plugin<span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'plugin'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 发送小程序消息给插件</span>plugin<span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'mini'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">333</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 消息通信 - 插件端</span><span class="token keyword">import</span> msg <span class="token keyword">from</span> <span class="token string">'../../common/msg'</span><span class="token comment">// 监听来自小程序的消息</span>msg<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mini'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 发送插件消息给小程序</span>msg<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'plugin'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">333</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小程序插件开发小结&quot;&gt;&lt;a href=&quot;#小程序插件开发小结&quot; class=&quot;headerlink&quot; title=&quot;小程序插件开发小结&quot;&gt;&lt;/a&gt;小程序插件开发小结&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文主要是整理了与总结了一些小程序插件开发相关资料，按顺序阅读按文章即可对小程序插件开发有个基本了解了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h3&gt;&lt;h4 id=&quot;什么是小程序插件&quot;&gt;&lt;a href=&quot;#什么是小程序插件&quot; class=&quot;headerlink&quot; title=&quot;什么是小程序插件&quot;&gt;&lt;/a&gt;什么是小程序插件&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;插件是对一组&lt;code&gt;js 接口&lt;/code&gt;、&lt;code&gt;自定义组件&lt;/code&gt;或&lt;code&gt;页面&lt;/code&gt;的封装，用于嵌入到小程序中使用。插件不能独立运行，必须嵌入在其他小程序中才能被用户使用；而第三方小程序在使用插件时，也无法看到插件的代码。因此，插件适合用来封装自己的功能或服务，提供给第三方小程序进行展示和使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 插件的开发和使用自小程序基础库版本 &lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot;&gt;1.9.6&lt;/a&gt; 开始支持。（如果插件包含页面，则需要基础库版本 &lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html&quot;&gt;2.1.0&lt;/a&gt; 。）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color: red;&quot;&gt;小程序的 AppID 可以创建小程序插件项目，插件是独立于小程序之外的，但是 AppID 是公用的&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/introduction/plugin.html#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8F%92%E4%BB%B6%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D&quot;&gt;小程序插件功能介绍&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="wechat" scheme="https://heavenru.com/categories/wechat/"/>
    
    
      <category term="javascript" scheme="https://heavenru.com/tags/javascript/"/>
    
      <category term="miniprogram" scheme="https://heavenru.com/tags/miniprogram/"/>
    
  </entry>
  
  <entry>
    <title>React Hook 不完全指南</title>
    <link href="https://heavenru.com//post/react-hook"/>
    <id>https://heavenru.com//post/react-hook</id>
    <published>2019-05-18T08:31:27.000Z</published>
    <updated>2021-04-06T12:16:13.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Hook-不完全指南"><a href="#React-Hook-不完全指南" class="headerlink" title="React Hook 不完全指南"></a>React Hook 不完全指南</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文内容大部分参考了 <a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">overreacted.io</a> 博客一文，同时结合 <a href="https://zh-hans.reactjs.org/docs/hooks-intro.html">React Hook 官方</a> 文章，整理并归纳一些笔记和输出个人的一些理解</p></blockquote><span id="more"></span><h2 id="什么是-Hook-？"><a href="#什么是-Hook-？" class="headerlink" title="什么是 Hook ？"></a>什么是 Hook ？</h2><blockquote><p>官方介绍：Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p></blockquote><h2 id="React-中内置的-Hook-API"><a href="#React-中内置的-Hook-API" class="headerlink" title="React 中内置的 Hook API"></a><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#usestate">React 中内置的 Hook API</a></h2><ul><li><p>基础 Hook</p><ul><li>useState<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 传入初始值，作为 state</span><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token comment">//  `惰性初始 state`；传入函数，由函数计算出的值作为 state</span><span class="token comment">// 此函数只在初始渲染时被调用</span><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token function">someExpensiveComputation</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">return</span> initialState<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>useEffect</p><ul><li>该 Hook 接收一个包含命令式、且可能有副作用代码的函数.</li><li>在函数组件主体内（这里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器、记录日志以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性。</li><li><strong>使用 useEffect 完成副作用操作，赋值给 useEffect 的函数会在组件渲染到屏幕之后</strong>。你可以把 effect 看作从 React 的纯函数式世界通往命令式世界的逃生通道。</li><li>默认情况下，<strong style="color: red;">effect 将在每轮渲染结束后执行</strong>，但你可以选择让它 在只有某些值改变的时候才执行。详情见后面。</li><li><p><strong>清除 effect</strong><br>通常，组件卸载时需要清除 effect 创建的诸如订阅或计时器 ID 等资源。要实现这一点，useEffect 函数需返回一个清除函数。以下就是一个创建订阅的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> subscription <span class="token operator">=</span> props<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 清除订阅</span>    subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>依赖<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>useContext</li></ul></li><li>额外的 Hook<ul><li>useReducer</li><li>useCallback</li><li>useMemo</li><li>useRef</li><li>useImperativeHandle</li><li>useLayoutEffect</li><li>useDebugValue</li></ul></li></ul><h2 id="我们为什么选择使用-Hook"><a href="#我们为什么选择使用-Hook" class="headerlink" title="我们为什么选择使用 Hook ?"></a>我们为什么选择使用 Hook ?</h2><h3 id="1-在组件之间复用状态逻辑很难"><a href="#1-在组件之间复用状态逻辑很难" class="headerlink" title="1. 在组件之间复用状态逻辑很难"></a>1. 在组件之间复用状态逻辑很难</h3><blockquote><p>React 没有提供将可复用性行为“附加”到组件的途径（例如，把组件连接到 store）。如果你使用过 React 一段时间，你也许会熟悉一些解决此类问题的方案，比如 render props 和 高阶组件。但是这类方案需要重新组织你的组件结构，这可能会很麻烦，使你的代码难以理解。如果你在 React DevTools 中观察过 React 应用，你会发现由 providers，consumers，高阶组件，render props 等其他抽象层组成的组件会形成“嵌套地狱”。尽管我们可以在 DevTools 过滤掉它们，但这说明了一个更深层次的问题：React 需要为共享状态逻辑提供更好的原生途径。</p></blockquote><p>你可以使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。Hook 使你在无需修改组件结构的情况下复用状态逻辑。 这使得在组件间或社区内共享 Hook 变得更便捷。</p><h3 id="2-复杂组件变得难以理解"><a href="#2-复杂组件变得难以理解" class="headerlink" title="2. 复杂组件变得难以理解"></a>2. 复杂组件变得难以理解</h3><blockquote><p>我们经常维护一些组件，组件起初很简单，但是逐渐会被状态逻辑和副作用充斥。每个生命周期常常包含一些不相关的逻辑。例如，组件常常在 componentDidMount 和 componentDidUpdate 中获取数据。但是，同一个 componentDidMount 中可能也包含很多其它的逻辑，如设置事件监听，而之后需在 componentWillUnmount 中清除。相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起。如此很容易产生 bug，并且导致逻辑不一致。</p></blockquote><p>在多数情况下，不可能将组件拆分为更小的粒度，因为状态逻辑无处不在。这也给测试带来了一定挑战。同时，这也是很多人将 React 与状态管理库结合使用的原因之一。但是，这往往会引入了很多抽象概念，需要你在不同的文件之间来回切换，使得复用变得更加困难。</p><p>为了解决这个问题，Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。你还可以使用 reducer 来管理组件的内部状态，使其更加可预测。</p><h3 id="3-用更少的代码，实现同样的效果"><a href="#3-用更少的代码，实现同样的效果" class="headerlink" title="3. 用更少的代码，实现同样的效果"></a>3. 用更少的代码，实现同样的效果</h3><p>下面的代码可以直观的体现出来，在某些场景下，使用 hook 来实现对应的功能，可以节省大部分的代码</p><iframe src="https://codesandbox.io/embed/9j77887n1r?fontsize=14" title="CounterHook vs CounterClass" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h4 id="3-1-清除副作用更加紧凑"><a href="#3-1-清除副作用更加紧凑" class="headerlink" title="3.1 清除副作用更加紧凑"></a>3.1 清除副作用更加紧凑</h4><p>对比 <code>Class</code> 组件来说，清除副作用要简单的多，如下代码，在 <code>useEffect</code> hook 里面返回一个函数，当我们的函数组件卸载的时候，就会自动执行这个函数，从而来清除副作用。想想我们在 <code>Class</code> 组件里面需要在 <code>componentWillUnmount</code> 生命周期里面去编写对应的代码。</p><p>对比两者我们发现，使用 <code>useEffect</code> 的方式，能够将挂载和卸载的逻辑更加紧密的耦合在一起，从而减少 BUG 的发生</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">count</span> <span class="token operator">=></span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 比如给 windows 挂载监听函数</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'reszie'</span><span class="token punctuation">,</span> handleRezie<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> handleRezie<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如何正确的使用-Hook"><a href="#如何正确的使用-Hook" class="headerlink" title="如何正确的使用 Hook ?"></a>如何正确的使用 Hook ?</h2><h3 id="1-使用规则"><a href="#1-使用规则" class="headerlink" title="1. 使用规则"></a>1. 使用规则</h3><ol><li>只在最顶层使用 Hook：不要在循环，条件或嵌套函数中调用 Hook， 确保总是在你的 React 函数的最顶层调用他们。</li><li>不要在普通的 JavaScript 函数中调用 Hook。你可以<ul><li>[x] 在 React 的函数组件中调用 Hook</li><li>[x] 在自定义 Hook 中调用其他 Hook</li></ul></li></ol><h3 id="2-只有在自己依赖更新时才执行-effect"><a href="#2-只有在自己依赖更新时才执行-effect" class="headerlink" title="2. 只有在自己依赖更新时才执行 effect"></a>2. 只有在自己依赖更新时才执行 effect</h3><p><strong>使用 useEffect 完成副作用操作，赋值给 useEffect 的函数会在组件渲染到屏幕之后</strong>；牢记这句话。</p><p>仔细观察如下代码，当函数组件里面，有多个 <code>effect</code> 的时候，默认的 <code>effect</code> 将在每次 UI render 之后被调用。当我们通过 <code>useEffect</code> 的第二个数组类型参数，指明当前 <code>effect</code> 的依赖，就能避免不相关的执行开销了。</p><p>通过启用 <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks#installation">eslint-plugin-react-hooks</a> 插件，来强制提醒我们在使用 <code>effect</code> 的时候，申明所需要的依赖</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// ...</span>    <span class="token string">"react-hooks"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token property">"react-hooks/rules-of-hooks"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token property">"react-hooks/exhaustive-deps"</span><span class="token operator">:</span> <span class="token string">"warn"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">CounterHook</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'heaven'</span><span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">counterWithHook </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'you name is'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h3<span class="token operator">></span>Counter <span class="token keyword">with</span> Hook<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>You click <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span> times<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">count</span> <span class="token operator">=></span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>input placeholder<span class="token operator">=</span><span class="token string">"输入姓名"</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token function">setName</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        your name is <span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-不要忘记函数依赖"><a href="#2-1-不要忘记函数依赖" class="headerlink" title="2.1 不要忘记函数依赖"></a>2.1 不要忘记函数依赖</h4><p>对于 <code>useEffect</code> 内部方法，一旦引用外部的函数，那么这个时候需要注意了：<br><strong>需要把 useEffect 内部引用到的方式，声明为当前 effect 的依赖</strong><br>在下图的代码中，我们可以看到，在 effect 函数内部，引入外部的函数，我们的 <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks#installation">eslint-plugin-react-hooks</a> 插件会自动提示我们需要把对应的函数作为依赖添加进去</p><p>不规范示例：这里在安装了插件的情况下，会自动提示我们将 <code>fetchData</code> 函数移入 effect 内部</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getFetchUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://hn.algolia.com/api/v1/search?query=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getFetchUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resp</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>    <span class="token function">setData</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确的写法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getFetchUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://hn.algolia.com/api/v1/search?query=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getFetchUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resp</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>    <span class="token function">setData</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>query<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、理解每一次的-Rendering"><a href="#3、理解每一次的-Rendering" class="headerlink" title="3、理解每一次的 Rendering"></a>3、理解每一次的 Rendering</h3><blockquote><p>每一次渲染都有它自己的 Props and State<br>每一次渲染都有它自己的事件处理函数<br>每次渲染都有它自己的 Effects</p></blockquote><p>运行如下代码之后，在我们点击 <code>Show alert</code> 按钮之后，然后点击 <code>Click me</code> 按钮，<code>alert</code> 输出的永远是在点击的那个时刻的 count;</p><p>换句话来说；在 hooks 组件里面，每一次的渲染，都相当于记录当前次的『快照』</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleAlertClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Yout clicked me: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Yout clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>You clicked <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span> times<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleAlertClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Show alert<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用自定义-Hook"><a href="#使用自定义-Hook" class="headerlink" title="使用自定义 Hook"></a>使用自定义 Hook</h2><blockquote><p>通过自定义 Hook，可以将组件逻辑提取到可重用的函数中。</p></blockquote><p>当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中。而组件和 Hook 都是函数，所以也同样适用这种方式。</p><p><strong>自定义 Hook 是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook。</strong></p><h3 id="自定义-useService-hook"><a href="#自定义-useService-hook" class="headerlink" title="自定义 useService hook"></a>自定义 useService hook</h3><p><code>useService.js</code> 自定义的一个 server hook，该 hook 封装了 <code>ajax</code> 请求中的 <code>&#123; loading, error, response &#125;</code> 三个基础逻辑；有了这个 <code>hook</code> 我们就能很轻松的在每次网络请求里面去处理各种异常逻辑了；详细用法看文章最后的 <a href="#table-分页操作实例">Table 分页操作实例</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useCallback <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isEqual <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token keyword">const</span> <span class="token function-variable function">useService</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">service<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> prevParams <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>callback<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> response <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useServiceCallback</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span>prevParams<span class="token punctuation">.</span>current<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      prevParams<span class="token punctuation">.</span>current <span class="token operator">=</span> params      <span class="token function">callback</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> response <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">useServiceCallback</span> <span class="token operator">=</span> <span class="token parameter">service</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> setError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>response<span class="token punctuation">,</span> setResponse<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">// 使用 useCallback，来判断 service 是否改变</span>  <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>    <span class="token parameter">params</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token function">setError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token function">service</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>          <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token function">setResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token function">setError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>service<span class="token punctuation">]</span>  <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>callback<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> response <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例剖析"><a href="#实例剖析" class="headerlink" title="实例剖析"></a>实例剖析</h2><h3 id="Table-分页操作"><a href="#Table-分页操作" class="headerlink" title="Table 分页操作"></a>Table 分页操作</h3><p>如下代码，使用 <code>hook</code> 的方式来实现表格的分页，数据请求操作，</p><p><a href="https://codesandbox.io/s/0o8169rx4w?fontsize=14"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit 0o8169rx4w"></a></p><h3 id="跑马灯中奖"><a href="#跑马灯中奖" class="headerlink" title="跑马灯中奖"></a>跑马灯中奖</h3><p>使用 <code>hook</code> 实现一个简易版的跑马灯抽奖逻辑</p><p><a href="https://codesandbox.io/s/reactprize-8316t?fontsize=14"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit react-prize"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh-hans.reactjs.org/docs/hooks-overview.html">官方 Hook 介绍</a><br><a href="https://zh-hans.reactjs.org/docs/hooks-rules.html">Hook 规则</a><br><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html">Hook API 索引</a><br><a href="https://www.robinwieruch.de/react-hooks-fetch-data/">如何在 Hook 中发起请求</a><br><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">useEffect 详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-Hook-不完全指南&quot;&gt;&lt;a href=&quot;#React-Hook-不完全指南&quot; class=&quot;headerlink&quot; title=&quot;React Hook 不完全指南&quot;&gt;&lt;/a&gt;React Hook 不完全指南&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文内容大部分参考了 &lt;a href=&quot;https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/&quot;&gt;overreacted.io&lt;/a&gt; 博客一文，同时结合 &lt;a href=&quot;https://zh-hans.reactjs.org/docs/hooks-intro.html&quot;&gt;React Hook 官方&lt;/a&gt; 文章，整理并归纳一些笔记和输出个人的一些理解&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="React" scheme="https://heavenru.com/categories/React/"/>
    
    
      <category term="javascript" scheme="https://heavenru.com/tags/javascript/"/>
    
      <category term="react" scheme="https://heavenru.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>CSS GPU Animation: Doing It Right</title>
    <link href="https://heavenru.com//post/CSS-GPU-Animation-Doing-It-Right"/>
    <id>https://heavenru.com//post/CSS-GPU-Animation-Doing-It-Right</id>
    <published>2017-09-22T03:36:43.000Z</published>
    <updated>2021-04-06T12:08:05.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-GPU-Animation-Doing-It-Right"><a href="#CSS-GPU-Animation-Doing-It-Right" class="headerlink" title="CSS GPU Animation: Doing It Right"></a>CSS GPU Animation: Doing It Right</h1><p><img src="http://ownw7bv0j.bkt.clouddn.com/css-animation.png" alt="css gpu" title="CSS GPU Animation: Doing It Right"></p><blockquote><p>看完这篇文章收货良多，特地在这里留存下。</p></blockquote><p>原文地址：<a href="https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/">https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/</a><br>译文版：<a href="https://ruby-china.org/topics/32052">https://ruby-china.org/topics/32052</a></p><span id="more"></span><p>Most people now know that modern web browsers use the GPU to render parts of web pages, especially ones with animation. For example, a CSS animation using the <code>transform</code> property looks much smoother than one using the <code>left</code> and <code>top</code> properties. But if you ask, “How do I get smooth animation from the GPU?” in most cases, you’ll hear something like, “Use <code>transform: translateZ(0)</code> or <code>will-change: transform</code>.”</p><p><img src="http://ownw7bv0j.bkt.clouddn.com/css-animation.png" alt="css gpu" title="CSS GPU Animation: Doing It Right"></p><p>These properties have become something like how we used <code>zoom: 1</code>for Internet Explorer 6 (if you catch my drift) in terms of preparing animation for the GPU — or <strong>compositing</strong>, as browser vendors like to call it.</p><h3 id="Further-Reading-on-SmashingMag"><a href="#Further-Reading-on-SmashingMag" class="headerlink" title="Further Reading on SmashingMag"></a>Further Reading on SmashingMag</h3><ul><li><a href="https://www.smashingmagazine.com/2016/02/hardware-hacking-with-javascript-internet-of-things/" title="Read &#39;Hardware Hacking With JavaScript&#39;">Hardware Hacking With JavaScript</a></li><li><a href="https://www.smashingmagazine.com/2012/06/play-with-hardware-accelerated-css/" title="Read &#39;Let’s Play With Hardware-Accelerated CSS&#39;">Let’s Play With Hardware-Accelerated CSS</a></li><li><a href="https://www.smashingmagazine.com/2014/07/testing-and-responsive-web-design/" title="Read &#39;Prioritizing Devices: Testing And Responsive Web Design&#39;">Prioritizing Devices: Testing And Responsive Web Design</a></li></ul><p>But sometimes animation that is nice and smooth in a simple demo runs very slowly on a real website, introduces visual artefacts or even crashes the browser. Why does this happen? <strong>How do we fix it?</strong> Let’s try to understand.</p><h3 id="One-Big-Disclaimer-Link"><a href="#One-Big-Disclaimer-Link" class="headerlink" title="One Big Disclaimer Link"></a>One Big Disclaimer <a href="https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/#one-big-disclaimer">Link</a></h3><p>The most important thing I’d like to tell you before we dive deep into GPU compositing is this: It’s a <strong>giant hack</strong>. You won’t find anything (at least for now) in the <a href="https://www.w3.org/">W3C</a>‘s specifications about how compositing works, about how to explicitly put an element on a compositing layer or even about compositing itself. It’s just an optimization that the browser applies to perform certain tasks and that each browser vendor implements in its own way.</p><p>Everything you’ll learn in this article is not an official explanation of how things works, but rather a result of my own experimentation, accompanied by a little common sense and knowledge of how different browser subsystems work. Some things might be just plain wrong, and some things could change over time — you have been warned!</p><h3 id="How-Compositing-Works-Link"><a href="#How-Compositing-Works-Link" class="headerlink" title="How Compositing Works Link"></a>How Compositing Works <a href="https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/#how-compositing-works">Link</a></h3><p>To prepare a page for GPU animation, we have to understand how things work in the browser, not just follow some random advice from the Internet or from this article.</p><p>Let’s say we have a page with <code>A</code> and <code>B</code> elements, each with <code>position: absolute</code> and a different <code>z-index</code> applied to it. The browser will paint it from the CPU, then send the resulting image to the GPU, which will display it on screen.</p><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;#a, #b &#123; position: absolute;&#125;#a &#123; left: 30px; top: 30px; z-index: 2;&#125;#b &#123; z-index: 1;&#125;&lt;&#x2F;style&gt;&lt;div id&#x3D;&quot;#a&quot;&gt;A&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;#b&quot;&gt;B&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://ownw7bv0j.bkt.clouddn.com/15016592919959.jpg" alt=""></p><p>We’ve decided to animate the <code>A</code> element by moving it with the <code>left</code>property and CSS animation:</p><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;#a, #b &#123; position: absolute;&#125;#a &#123; left: 10px; top: 10px; z-index: 2; animation: move 1s linear;&#125;#b &#123; left: 50px; top: 50px; z-index: 1;&#125;@keyframes move &#123; from &#123; left: 30px; &#125; to &#123; left: 100px; &#125;&#125;&lt;&#x2F;style&gt;&lt;div id&#x3D;&quot;#a&quot;&gt;A&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;#b&quot;&gt;B&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><iframe src="https://sergeche.github.io/gpu-article-assets/examples/example1.html#.a:anim-left" height="280" frameborder="no" allowtransparency="true" style="width: 100%;"></iframe><p>In this case, for every animation frame, the browser has to recalculate the element’s geometry (i.e. reflow), render the image of the page’s new state (i.e. repaint) and then send it again to the GPU to display on screen. We know that repainting is very performance-costly, but every modern browser is smart enough to repaint only the changed area of the page, instead of the entire page. While browsers can repaint very fast in most cases, our animation is still not smooth.</p><p>Reflowing and repainting the entire page at each step of the animation (even incrementally) sounds really slow, especially for a large and complex layout. It would be much more effective just to paint two separate images — one for the <code>A</code> element and one for the entire page without the <code>A</code> element — and then simply offset those images relative to each other. In other words, <strong>composing</strong> the images of cached elements would be faster. And this is exactly where the GPU shines: It’s able to compose images very quickly with <strong>subpixel precision</strong>, which adds a sexy smoothness to animations.</p><p>To optimize the compositing, the browser has to ensure that the animated CSS property:</p><ul><li>does not affect the document’s flow,</li><li>does not depend on the document’s flow,</li><li>does not cause a repaint.</li></ul><p>One might think that the <code>top</code> and <code>left</code> properties, along with the <code>position</code>s <code>absolute</code> and <code>fixed</code>, don’t depend on an element’s environment, but that’s not so. For example, a <code>left</code> property may receive a percentage value that depends on the size of <code>.offsetParent</code>; also, <code>em</code>, <code>vh</code> and other units depend on their environment. Rather, <code>transform</code> and <code>opacity</code> are the only CSS properties that meet the conditions above.</p><p>Let’s animate with <code>transform</code> instead of <code>left</code>:</p><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;#a, #b &#123; position: absolute;&#125;#a &#123; left: 10px; top: 10px; z-index: 2; animation: move 1s linear;&#125;#b &#123; left: 50px; top: 50px; z-index: 1;&#125;@keyframes move &#123; from &#123; transform: translateX(0); &#125; to &#123; transform: translateX(70px); &#125;&#125;&lt;&#x2F;style&gt;&lt;div id&#x3D;&quot;#a&quot;&gt;A&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;#b&quot;&gt;B&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Here, we’ve described our animation <strong>declaratively</strong>: its start position, end position, duration, etc. This tells the browser ahead of time which CSS properties will be updated. Because the browser sees that none of the properties would cause a reflow or repaint, it can apply a compositing optimization: painting two images as <strong>compositing layers</strong>and sending them to the GPU.</p><p>What are the pros of such optimization?</p><ul><li>We get a silky smooth animation with subpixel precision that runs on a unit specially optimized for graphics tasks. And it runs very quickly.</li><li>The animation is no longer bound to the CPU. Even if you run a very intensive JavaScript task, the animation will still run quickly.</li></ul><p>Everything seems pretty clear and easy, right? What problems could we run into? Let’s see how this optimization really works.</p><p>It might surprise you, but the GPU is a <strong>separate computer</strong>. That’s right: An essential part of every modern device is actually a standalone unit with its own processors and its own memory- and data-processing models. And the browser, like any other app or game, has to talk with the GPU as it would with an external device.</p><p>To better understand how this works, think of AJAX. Suppose you want to register a website visitor with data they’ve entered in a web form. You can’t just tell a remote server, “Hey, just take the data from these input fields and that JavaScript variable and save it to the database.” The remote server doesn’t have access to the memory in the user’s browser. Instead, you’d have to collect the data from the page into a payload with a simple data format that can be easily parsed (such as JSON) and send it to the remote server.</p><p>Something very similar happens during compositing. Because the GPU is like a remote server, the browser has to create a payload first and then send it to the device. Sure, the GPU isn’t thousands of kilometers away from the CPU; it’s right there. However, whereas the 2 seconds required for a remote server request and response would be acceptable in many cases, the extra 3 to 5 milliseconds for a GPU data transfer would result in janky animation.</p><p>What does a GPU payload look like? In most cases, it consists of <strong>layer images</strong>, along with additional instructions such as for the layer’s size, offset, animation parameters, etc. Here is roughly what making a payload and transferring data with the GPU looks like:</p><ul><li>Paint each compositing layer to a separate image.</li><li>Prepare the layer data (size, offset, opacity, etc.).</li><li>Prepare shaders for the animation (if applicable).</li><li>Send the data to the GPU.</li></ul><p>As you can see, every time you add the magical <code>transform: translateZ(0)</code> or <code>will-change: transform</code> property to the element, you start the very same process. While repainting is very performance-costly, here it’s even slower. In most cases, the browser is unable to incrementally repaint. It has to paint the area that was previously covered with a newly created composite layer:</p><iframe src="https://sergeche.github.io/gpu-article-assets/examples/before-after-compositing.html" height="270" frameborder="no" allowtransparency="true" style="width: 100%;"></iframe><h3 id="Implicit-Compositing"><a href="#Implicit-Compositing" class="headerlink" title="Implicit Compositing"></a>Implicit Compositing</h3><p>Let’s get back to our example with the <code>A</code> and <code>B</code> elements. Earlier, we animated the <code>A</code> element, which sits on top of all other elements on the page. This resulted in two compositing layers: one with the <code>A</code> element and one with the <code>B</code> element and the page’s background.</p><p>Now, let’s animate the <code>B</code> element instead:</p><iframe src="https://sergeche.github.io/gpu-article-assets/examples/example3.html#.b:anim-translate" height="280" frameborder="no" allowtransparency="true" style="width: 100%;"></iframe><p>We’ve run into a logical problem. Element <code>B</code> should be on a separate compositing layer, and the final page image for the screen should be composed on the GPU. But the <code>A</code> element should appear on top of element <code>B</code>, and we haven’t specified anything about <code>A</code> that would promote it to its own layer.</p><p>Remember the <strong>big disclaimer</strong>: a special GPU-compositing mode isn’t a part of the CSS specification; it’s just an optimization that the browser applies internally. We <em>must</em> have <code>A</code> appear on top of <code>B</code> exactly in that order, as defined by <code>z-index</code>. And what will the browser do?</p><p>You guess it! It will forcibly create a new compositing layer for element <code>A</code> — and add another heavy repaint, of course:</p><iframe src="https://sergeche.github.io/gpu-article-assets/examples/example4.html#.b:anim-translate" height="280" frameborder="no" allowtransparency="true" style="width: 100%;"></iframe><p>This is called <strong>implicit compositing</strong>: One or more non-composited elements that should appear above a composited one in the stacking order are promoted to composite layers — i.e. painted to separate images that are then sent to the GPU.</p><p>We stumble upon implicit composing much more often than you might think. A browser will promote an element to a compositing layer for many reasons, just a few of which are:</p><ul><li>3D transforms: <code>translate3d</code>, <code>translateZ</code> and so on;</li><li><code>&lt;video&gt;</code>, <code>&lt;canvas&gt;</code> and <code>&lt;iframe&gt;</code> elements;</li><li>animation of <code>transform</code> and <code>opacity</code> via <code>Element.animate()</code>;</li><li>animation of <code>transform</code> and <code>opacity</code> via СSS transitions and animations;</li><li><code>position: fixed</code>;</li><li><a href="https://www.w3.org/TR/css-will-change-1/"><code>will-change</code></a>;</li><li><a href="https://drafts.fxtf.org/filters/#FilterProperty"><code>filter</code></a>;</li></ul><p>More reasons are described in the “<a href="https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/graphics/CompositingReasons.h?q=file:CompositingReasons.h">CompositingReasons.h</a>” file of the Chromium project.</p><p>It seems like the main problem of GPU animation is unexpected heavy repaints. But it’s not. The bigger problem is…</p><h3 id="Memory-Consumption"><a href="#Memory-Consumption" class="headerlink" title="Memory Consumption"></a>Memory Consumption</h3><p>Another gentle reminder that the GPU is a separate computer: It’s required not just to send rendered layer images to the GPU, but to <strong>store</strong> them as well for later reuse in animation.</p><p>How much memory does a single composite layer takes? Let’s take a simple example. Try to guess how much memory is required to store a 320 × 240-pixel rectangle, filled with a solid <code>#FF0000</code> color.</p><p><img src="http://ownw7bv0j.bkt.clouddn.com/15016595942942.jpg" alt=""></p><p>A typical web developer would think, “Hm, it’s a solid-colored image. I’ll save it as a PNG and check its size. It should be less than 1 KB.” And they’d be absolutely right: The size of this image as a PNG is 104 bytes.</p><p>The problem is that PNGs, along with JPEGs, GIFs and so on, are used to store and transfer image data. To draw such an image to the screen, a computer has to unpack it from the image format and then <strong>represent it as an array of pixels</strong>. Thus, our sample image would take <code>320 × 240 × 3 = 230,400 bytes</code> of computer memory. That is, we multiply the image’s width by its height to get the number of pixels in the image. Then, we multiply it by 3, because every pixel is described by three bytes (RGB). If the image contains transparent areas, we’d multiply it by 4, because an additional byte is required to describe transparency: (RGBa): <code>320 × 240 × 4 = 307,200 bytes</code>.</p><p>The browser <em>always</em> paints compositing layers as RGBa images. It seems that there’s no efficient way to determine whether an element contains transparent areas.</p><p>Let’s take a more probable example: a carousel with 10 photos, each measuring 800 × 600 pixels. We’ve decided to smoothly transition between images upon a user interaction, such as dragging, so we add <code>will-change: transform</code> for every image. This will promote the images to composite layers ahead of time, so that the transition begins immediately upon the user’s interaction. Now, calculate how much <strong>additional</strong> memory is required just to display such a carousel: 800 × 600 × 4 × 10 ≈ <strong>19 MB</strong>.</p><p>19 MB of additional memory is required to render a single control! And if you’re a modern web developer who is creating a website as a single-page application, with a lot of animated controls, parallax effects, high-resolution images and other visual enhancements, then an additional 100 to 200 MB per page is just the beginning. Add implicit compositing to the mix (admit it — you’ve never even thought about it before), and you’ll end up with a page filling all available memory on the device.</p><p>Moreover, in many cases, this memory would be wasted, displaying the very same result:</p><iframe src="https://sergeche.github.io/gpu-article-assets/examples/example5.html" height="620" frameborder="no" allowtransparency="true" style="width: 100%;"></iframe><p>This might not be an issue for desktop clients, but it really hurts mobile users. First, most modern devices have high-density screens: Multiply the weight of composite-layer images by 4 to 9. Secondly, mobile devices don’t have as much memory as desktops. For example, a not-so-old-yet iPhone 6 ships with 1 GB of shared memory (i.e. memory used for both RAM and VRAM). Considering that at least one third of this memory is used by the operating system and background processes, another third by the browser and the current page (a best-case scenario for a highly optimized page without a ton of frameworks), we’re left with about 200 to 300 MB for GPU effects, at most. And the iPhone 6 is a pretty expensive high-end device; more affordable phones contain much less memory on board.</p><p>You may be asking, “Is it possible to store PNG images in the GPU to reduce the memory footprint?” Technically, yes, it’s possible. The only problem is that the GPU <a href="http://www.html5rocks.com/en/tutorials/webgl/shaders/">draws the screen pixel by pixel</a>, which means it has to decode an entire PNG image for every pixel again and again. I doubt that an animation in this case would be faster that 1 frame per second.</p><p>It’s worth nothing that GPU-specific <a href="https://en.wikipedia.org/wiki/Texture_compression">image-compression formats</a> do exist, but they are not even close to PNG or JPEG in terms of compression ratio, and their usage is limited by hardware support.</p><h3 id="Pros-And-Cons"><a href="#Pros-And-Cons" class="headerlink" title="Pros And Cons"></a>Pros And Cons</h3><p>Now that we’ve learned some of the basics of GPU animation, let’s sum up its pros and cons.</p><h4 id="PROS"><a href="#PROS" class="headerlink" title="PROS"></a>PROS</h4><ul><li>The animation is fast and smooth, at 60 frames per second.</li><li>A properly crafted animation works in a separate thread and is not blocked by heavy JavaScript calculations.</li><li>3D transforms are “cheap.”</li></ul><h4 id="CONS"><a href="#CONS" class="headerlink" title="CONS"></a>CONS</h4><ul><li>Additional repainting is required to promote an element to a composite layer. Sometimes this is very slow (i.e. when we get a full-layer repaint, instead of an incremental one).</li><li>Painted layers have to be transferred to the GPU. Depending on the number and size of these layers, the transfer can be very slow, too. This could lead to an element flickering on low-end and mid-market devices.</li><li>Every composite layer consumes additional memory. Memory is a precious resource on mobile devices. Excessive memory use could <strong>crash the browser</strong>.</li><li>If you don’t consider implicit compositing, then the chances of slow repainting, extra memory usage and browser crashes are very high.</li><li>We get visual artifacts, such as with text rendering in Safari, and page content will disappear or get distorted in some cases.</li></ul><p>As you can see, despite some very useful and unique advantages, GPU animation has some very nasty issues. The most important ones are the repainting and excessive memory usage; so, all optimization techniques covered below will address these very problems.</p><h3 id="Browser-Setup"><a href="#Browser-Setup" class="headerlink" title="Browser Setup"></a>Browser Setup</h3><p>Before we start optimizing, we need to learn about the tools that will help us examine the composite layers on the page and that provide clear feedback about optimization efficiency.</p><h4 id="SAFARI"><a href="#SAFARI" class="headerlink" title="SAFARI"></a>SAFARI</h4><p>Safari’s Web Inspector has an awesome “Layers” sidebar that displays all composite layers and their memory consumption, as well as the <strong>reason</strong> for the compositing. To see this sidebar:</p><ol><li>In Safari, open the Web Inspector with <code>⌘ + ⌥ + I</code>. If that doesn’t work, open “Preferences” → “Advanced,” turn on the “Show Develop Menu in menu bar” option, and try again.</li><li>When the Web Inspector opens, select the “Elements” tab, and select “Layers” in the right sidebar.</li><li>Now, when you click on a DOM node in the main “Elements” pane, you’ll see an information layer for the selected element (if it uses compositing) and all descendant composite layers.</li><li>Click on a descendant layer to see the reason it was composited. The browser will tell you why it decided to move this element to its own compositing layer.</li></ol><p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/11/safari-large-opt.png"><img src="http://ownw7bv0j.bkt.clouddn.com/safari-preview-opt.png" alt="Safari with Web Inspector"></a></p><p>(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/11/safari-large-opt.png">View large version</a>)</p><h4 id="CHROME"><a href="#CHROME" class="headerlink" title="CHROME"></a>CHROME</h4><p>Chrome’s DevTools has a similar panel, but you have to enable a flag first:</p><ol><li>In Chrome, go to <code>chrome://flags/#enable-devtools-experiments</code>, and enable the “Developer Tools experiments” flag.</li><li><p>Open DevTools with <code>⌘ + ⌥ + I</code> (on a Mac) or <code>Ctrl + Shift + I</code> (on a PC), and then click on the following icon in the upper-right corner and pick the “Settings” menu item.</p><p> <a href="http://ownw7bv0j.bkt.clouddn.com/devtools-icon-opt.png"><img src="http://ownw7bv0j.bkt.clouddn.com/devtools-icon-opt.png" alt="DevTools settings icon"></a></p></li><li><p>Go to the “Experiments” pane, and enable the “Layers” panel.</p></li><li>Reopen DevTools. You should now see the “Layers” panel.</li></ol><p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/11/chrome-large-opt.png"><img src="http://ownw7bv0j.bkt.clouddn.com/chrome-preview-opt.png" alt="Chrome with DevTools"></a></p><p>(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/11/chrome-large-opt.png">View large version</a>)</p><p>This panel displays all active compositing layers of the current page as a tree. When you pick a layer, you’ll see information such as its size, memory consumption, repaint count and reason for being composited.</p><h3 id="Optimization-Tips"><a href="#Optimization-Tips" class="headerlink" title="Optimization Tips"></a>Optimization Tips</h3><p>Now that we’ve set up our environment, we can start optimizing the compositing layer. We’ve already identified two main problems with compositing: extra repaints, which causes data transfer to the GPU as well, and extra memory consumption. So, all optimization tips below will focus on these very problems.</p><h4 id="AVOID-IMPLICIT-COMPOSITING"><a href="#AVOID-IMPLICIT-COMPOSITING" class="headerlink" title="AVOID IMPLICIT COMPOSITING"></a>AVOID IMPLICIT COMPOSITING</h4><p>This is the simplest and most obvious tip, yet very important. Let me remind you that all non-compositing DOM elements above one with an explicit compositing reason (for example, <code>position: fixed</code>, video, CSS animation, etc.) will be forcibly promoted to their own layers just for the final image composition on the GPU. On mobile devices, this might cause the animation to start very slowly.</p><p>Let’s take a simple example:</p><iframe height="305" scrolling="no" src="https://codepen.io/sergeche/embed/jrZZgL/?height=305&amp;theme-id=light&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe><p>The <code>A</code> element should be animated upon a user interaction. If you look at this page in the “Layers” panel, you’ll see that there are no extra layers. But right after clicking the “Play” button, you’ll see a few more layers, which will be removed right after the animation finishes. If you look at this process in the “Timeline” panel, you’ll see that the animation’s start and end are accompanied with repaints of large areas:</p><p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/11/chrome-timeline-large-opt.png"><img src="http://ownw7bv0j.bkt.clouddn.com/chrome-timeline-preview-opt.png" alt="Chrome timeline"></a></p><p>(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/11/chrome-timeline-large-opt.png">View large version</a>)</p><p>Here’s what browser did, step by step:</p><ol><li>Right after the page loads, the browser doesn’t find any reason for compositing, so it picks the optimal strategy: painting the page’s entire contents on a single background layer.</li><li>By clicking the “Play” button, we’re explicitly adding compositing to element <code>A</code> — a transition with the <code>transform</code> property. But the browser determines that element <code>A</code> is below element <code>B</code> in the stacking order, so it promotes <code>B</code> to its own compositing layer, too (implicit compositing).</li><li>Promotion to a compositing layer always causes a repaint: The browser has to create a new texture for the element and remove it from the previous layer.</li><li>New layer images must be transferred to the GPU for the final image composition that the user will see on screen. Depending on the number of layers, the texture’s size and the complexity of content, repainting and data transferring could take a significant amount of time to perform. This is why we sometimes see an element flicker as an animation starts or finishes.</li><li>Right after the animation finishes, we remove the reason for compositing from <code>A</code> element. Once again, the browser sees that it doesn’t need to waste resources on compositing, so it falls back to the optimal strategy: keeping the page’s entire contents on a single layer, which means it has to paint <code>A</code> and <code>B</code> back on the background layer (another repaint) and send the updated texture to the GPU. As in the step above, this could cause flickering.</li></ol><p>To get rid of implicit compositing issues and to reduce visual artifacts, I recommend the following:</p><ul><li>Try to keep animated objects as high as possible in the <code>z-index</code>. Ideally, these elements should be direct children of the <code>body</code>element. Of course, this is not always possible in the markup when an animated element is nested deep inside the DOM tree and depends on the normal flow. In such cases, you could clone the element and put it in the <code>body</code> for animation only.</li><li>You can give browser a hint that you’re going to use compositing with the <a href="https://developer.mozilla.org/docs/Web/CSS/will-change"><code>will-change</code></a> CSS property. With this property set on an element, the browser will (but not always!) promote it to a compositing layer in advance, so that the animation can start and stop smoothly. But don’t misuse this property, or else you’ll end up with a tremendous increase in memory consumption!</li></ul><h4 id="ANIMATE-TRANSFORM-AND-OPACITY-PROPERTIES-ONLY"><a href="#ANIMATE-TRANSFORM-AND-OPACITY-PROPERTIES-ONLY" class="headerlink" title="ANIMATE TRANSFORM AND OPACITY PROPERTIES ONLY"></a>ANIMATE <code>TRANSFORM</code> AND <code>OPACITY</code> PROPERTIES ONLY</h4><p>The <code>transform</code> and <code>opacity</code> properties are guaranteed to neither affect nor be affected by the normal flow or DOM environment (that is, they won’t cause a reflow or repaint, so their animation can be completely offloaded to the GPU). Basically, this means you can effectively animate movement, scaling, rotation, opacity and affine transforms only. Sometimes you might want to emulate other animation types with these properties.</p><p>Take a very common example: a background color transition. The basic approach would be to add a <code>transition</code> property:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id&#x3D;&quot;bg-change&quot;&gt;&lt;&#x2F;div&gt;&lt;style&gt;#bg-change &#123; width: 100px; height: 100px; background: red; transition: background 0.4s;&#125;#bg-change:hover &#123; background: blue;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In this case, the animation would work entirely on the CPU and cause a repaint at each step of the animation. But we can make such an animation work on the GPU: Instead of animating the <code>background-color</code> property, we would add a layer on top and animate its opacity:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id&#x3D;&quot;bg-change&quot;&gt;&lt;&#x2F;div&gt;&lt;style&gt;#bg-change &#123; width: 100px; height: 100px; background: red;&#125;#bg-change::before &#123; background: blue; opacity: 0; transition: opacity 0.4s;&#125;#bg-change:hover::before &#123; opacity: 1;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This animation would be much faster and smoother, but keep in mind that it could cause implicit compositing and require additional memory. Yet memory consumption can be reduced greatly in this case.</p><h4 id="REDUCE-SIZE-OF-COMPOSITE-LAYER"><a href="#REDUCE-SIZE-OF-COMPOSITE-LAYER" class="headerlink" title="REDUCE SIZE OF COMPOSITE LAYER"></a>REDUCE SIZE OF COMPOSITE LAYER</h4><p>Look at the images below. Notice any difference?</p><iframe src="https://sergeche.github.io/gpu-article-assets/examples/layer-size.html" height="130" frameborder="no" allowtransparency="true" style="width: 100%;"></iframe><p>These two composite layers are <strong>visually identical</strong>, but the first weighs 40,000 bytes (39 KB), and the second just 400 bytes — 100 times smaller. Why? Look at the code:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id&#x3D;&quot;a&quot;&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;b&quot;&gt;&lt;&#x2F;div&gt;&lt;style&gt;#a, #b &#123; will-change: transform;&#125;#a &#123; width: 100px; height: 100px;&#125;#b &#123; width: 10px; height: 10px; transform: scale(10);&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The difference is that the physical size of <code>#a</code> is 100 × 100 pixels (100 × 100 × 4 = 40,000 bytes), whereas <code>#b</code> is only 10 × 10 pixels (10 × 10 × 4 = 400 bytes) but upscaled to 100 × 100 pixels with <code>transform: scale(10)</code>. Because <code>#b</code> is a composite layer, due to the <code>will-change</code>property, the <code>transform</code> now occurs entirely on the GPU during the final image paint.</p><p>The trick is pretty simple: Reduce the physical size of the composite layer with the <code>width</code> and <code>height</code> properties, and then upscale its texture with <code>transform: scale(…)</code>. Of course, this trick reduces memory consumption significantly for very simple, solid-colored layers only. But, for example, if you want to animate a large photo, you could downsize it by 5 to 10% and then upscale it; users might not see any difference, and you would save a few megabytes of precious memory.</p><h4 id="USE-CSS-TRANSITIONS-AND-ANIMATIONS-WHENEVER-POSSIBLE"><a href="#USE-CSS-TRANSITIONS-AND-ANIMATIONS-WHENEVER-POSSIBLE" class="headerlink" title="USE CSS TRANSITIONS AND ANIMATIONS WHENEVER POSSIBLE"></a>USE CSS TRANSITIONS AND ANIMATIONS WHENEVER POSSIBLE</h4><p>We already know that animation of <code>transform</code> and <code>opacity</code> via CSS transitions or animations automatically creates a compositing layer and works on the GPU. We could also animate via JavaScript, but we’d have to add <code>transform: translateZ(0)</code> or <code>will-change: transform, opacity</code> first in order to ensure that the element gets its own compositing layer.</p><p>JavaScript animation happens when each step is manually calculated in a <code>requestAnimationFrame</code> callback. Animation via <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animate"><code>Element.animate()</code></a> is a variation of declarative CSS animation.</p><p>On the one hand, creating a simple and reusable animation via a CSS transition or animation is very easy; on the other, creating complex animation with fancy trajectories is much easier with JavaScript animation than with CSS. Also, JavaScript is the only way to interact with user input.</p><p>Which one is better? Could we just use a universal JavaScript library to animate everything?</p><p>CSS-based animation has a very important feature: It <strong>works entirely on the GPU</strong>. Because you <strong>declare</strong> how an animation should start and finish, the browser can prepare all of the required instructions ahead of the animation’s start and send them to the GPU. In the case of <strong>imperative</strong> JavaScript, all that the browser knows for sure is the state of the current frame. For a smooth animation, we’d have to calculate the new frame in the main browser thread and send it to the GPU at least 60 times per second. Besides the fact that these calculations and sending of data are much slower that CSS animation, they also depend on the workload of the main thread:</p><iframe src="https://sergeche.github.io/gpu-article-assets/examples/js-vs-css.html" height="180" frameborder="no" allowtransparency="true" style="width: 100%;"></iframe><p>In the illustration above, you can see what happens when the main thread gets blocked by intensive JavaScript calculations. The CSS animation is unaffected because the new frame is calculated in a separate thread, whereas the JavaScript animation has to wait until the heavy calculation is complete and then calculate a new frame.</p><p>So, try to use CSS-based animation as much as possible, especially for loading and progress indicators. Not only is it much faster, but it won’t get blocked by heavy JavaScript calculations.</p><h3 id="A-Real-Word-Optimization-Example"><a href="#A-Real-Word-Optimization-Example" class="headerlink" title="A Real-Word Optimization Example"></a>A Real-Word Optimization Example</h3><p>This article is the result of my investigation and experimentation in developing the web page for <a href="https://ru.4game.com/chaos-fighters/">Chaos Fighters</a>. It’s a responsive promo page for a mobile game with a lot of animations. When I started its development, the only thing I knew was how to make GPU-based animation, but I didn’t know how it works. As a result, the very first milestone page caused the iPhone 5 — the latest Apple phone at the time — to crash in a few seconds right after the page loaded. Now, this page works fine, even on less powerful devices.</p><p>Let’s consider, in my opinion, the most interesting optimization of this website.</p><p>At the very top of the page is a description of the game, with something like red sun rays spinning in the background. It’s an infinitely looping, non-interactive spinner — a great candidate for simple CSS animation. One’s first (misguided) attempt would be to save the image of the sun rays, place it as an <code>img</code> element on the page and use infinite CSS animation:</p><iframe width="350" height="402" scrolling="no" src="https://codepen.io/sergeche/embed/gwBjqG/?height=402&amp;theme-id=light&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true"></iframe><p>Seems like everything works as expected. But the weight of the sun image is pretty heavy. Mobile users won’t be happy.</p><p>Take a closer look at the image. Basically, it’s just a few rays coming from the center of the image. The rays are identical, so we can save an image of a single ray and reuse it to create the final image. We’ll end up with a single-ray image, which is an order of magnitude smaller than the initial image.</p><p>For this optimization, we’ll have to complicate the markup a bit: <code>.sun</code>will be a container for elements with the ray images. Each ray will be rotated at a particular angle.</p><iframe width="350" height="402" scrolling="no" src="https://codepen.io/sergeche/embed/qaJraq/?height=402&amp;theme-id=light&amp;default-tab=css&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true"></iframe><p>The visual result will be the same, but the amount of network-transferred data will be much lower. Still, the size of the composite layer remains the same: 500 × 500 × 4 ≈ 977 KB.</p><p>To keep things simple, the size of the sun rays in our example is pretty small, only 500 × 500 pixels. On a real website, serving devices with different sizes (mobile, tablets and desktops) and pixel densities, the final image would be about 3000 × 3000 × 4 = 36 MB! And that’s just a single animated element on the page.</p><p>Look at the page’s markup once again in the “Layers” panel. We’ve made it easier on ourselves to rotate the entire sun container. So, this container was promoted to a compositing layer and painted into a single large texture image, which was then sent to the GPU. But because of our simplification, the texture now contains <strong>useless data</strong>: the gaps between the rays.</p><p>Moreover, the useless data is much larger in size than the useful data! That’s not the best way to spend our very limited resource of memory.</p><p>The solution to this problem is the same as with our optimization of the network transfer: Send only the useful data (i.e. the rays) to the GPU. We can calculate how much memory we’ll save:</p><ul><li>entire sun container: 500 × 500 × 4 ≈ 977 KB</li><li>twelve rays only: 250 × 40 × 4 × 12 ≈ 469 KB</li></ul><p>Memory consumption will be reduced by two times. To do this, we have to <strong>animate each ray separately</strong>, instead of animating the container. Thus, only the images of the rays will be sent to the GPU; the gaps between them won’t take up any resources.</p><p>We’d have to complicate our markup a bit to animate the rays independently, and CSS would be more of an obstacle here. We’ve already used <code>transform</code> for the initial rotation of rays, and we have to start the animation from exactly the same angle and make a 360-degree turn. Basically, we’d have to create a separate <code>@keyframes</code> section for every ray, and that’s a lot of code for network transferring.</p><p>It would be much easier to write a short JavaScript that takes care of the initial placement of rays and that allows us to fine-tune the animation, the number of rays and more.</p><iframe width="350" height="402" scrolling="no" src="https://codepen.io/sergeche/embed/bwmxoz/?height=402&amp;theme-id=light&amp;default-tab=js&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true"></iframe><p>The new animation looks the same as the previous one but is twice as small in memory consumption.</p><p>That’s not all. In terms of layout composition, this animated sun isn’t the main element, but rather is a background element. And the rays don’t have any crisp contrasting elements. This means we can send a lower-resolution ray texture to the GPU and upscale it afterwards, which allows us to reduce memory consumption a bit.</p><p>Let’s try to reduce the texture’s size by 10%. The physical size of the ray will be 250 × 0.9 × 40 × 0.9 = 225 × 36 pixels. To make the ray <em>look</em> like 250 × 20, we’ll have to upscale it by 250 ÷ 225 ≈ 1.111.</p><p>We’ll add a line to our code — <code>background-size: cover</code> for <code>.sun-ray</code>— so that the background image automatically resizes to the element’s size, and we’ll add <code>transform: scale(1.111)</code> for the ray’s animation.</p><iframe width="350" height="402" scrolling="no" src="https://codepen.io/sergeche/embed/YGJOva/?height=402&amp;theme-id=light&amp;default-tab=js&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true"></iframe><p>Note that we’ve only changed the size of the element; the size of the PNG image remains the same. A rectangle made by a DOM element will be rendered as a texture for the GPU, not the PNG image.</p><p>The sun ray’s new composition size on the GPU is now 225 × 36 × 4 × 12 ≈ 380 KB (it was 469 KB). We’ve reduced memory consumption by 19% and gotten very flexible code in which we can play around with downscaling to get the optimal quality-to-memory ratio. As a result, by increasing the complexity of an animation that appears to be so simple at first, we’ve reduced memory consumption by 977 ÷ 380 ≈ 2.5 times!</p><p>I guess you’ve already noticed that this solution has a significant flaw: The animation now works on the CPU and can be blocked by heavy JavaScript calculations. If you want to get more familiar with optimizing GPU animation, I propose a little homework. Fork the <a href="https://codepen.io/sergeche/pen/YGJOva">Codepen of the sun rays</a>, and make the sun ray animation work entirely on the GPU, yet be as memory-efficient and flexible as in the original example. Post your example in the comments to get feedback.</p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><p>My research into optimizing the Chaos Fighters page made me completely rethink the process of developing modern web pages. Here are my main principles:</p><ul><li>Always negotiate with the client and designer about all animations and effects on the website. It could affect the page’s markup greatly and make for better compositing.</li><li>Watch out for the number and size of composite layers from the very beginning — especially ones created by implicit compositing. The “Layers” panel in your browser’s development tools is your best friend.</li><li>Modern browsers make heavy use of compositing not just for animation but to optimize the painting of page elements. For example, <code>position: fixed</code> and the <code>iframe</code> and <code>video</code>elements use compositing.</li><li>The size of compositing layers is likely be more important than the number of layers. In some cases, the browser will try to reduce the number of composite layers (see the “Layer Squashing” section of “<a href="https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome">GPU Accelerated Compositing in Chrome</a>“); this prevents so-called “layer explosion” and reduces memory consumption, especially when layers have large intersections. But sometimes, such optimization has a negative impact, such as when a very large texture consumes much more memory than a few small layers. To bypass this optimization, I add a small, unique <code>translateZ()</code> value to each element, such as <code>translateZ(0.0001px)</code>, <code>translateZ(0.0002px)</code>, etc. The browser will determine that the elements lie on different planes in the 3D space and, thus, skip optimization.</li><li>You can’t just add <code>transform: translateZ(0)</code> or <code>will-change: transform</code> to any random element to virtually improve animation performance or to get rid of visual artifacts. GPU compositing has many drawbacks and tradeoffs to be considered. When not used sparingly, compositing will decrease overall performance at best, and crash browsers at worst.</li></ul><p>Allow me to remind you of the big disclaimer: There is no official specification for GPU compositing, and each browser solves the same problems differently. Some sections of this article may become obsolete in a few months. For example, Google Chrome developers are exploring ways to reduce the overhead of CPU-to-GPU data transfers, including use of special shared memory with zero copy overhead. And Safari is already able to delegate the drawing of simple elements (such as an empty DOM element with a <code>background-color</code>) to the GPU, instead of creating an image of it on the CPU.</p><p>In any case, I hope this article has helped you better understand how the browser uses the GPU to render, so that you can create impressive websites that run quickly on all devices.</p>]]></content>
    
    <summary type="html">
    
      CSS GPU 动画优化
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue2.0 项目总结</title>
    <link href="https://heavenru.com//post/vue2-0-%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93"/>
    <id>https://heavenru.com//post/vue2-0-项目总结</id>
    <published>2017-09-21T03:37:37.000Z</published>
    <updated>2021-04-06T12:16:41.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h1><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><pre class="line-numbers language-none"><code class="language-none">├── build├── config├── dist│   └── static│       ├── css│       ├── fonts│       ├── images│       ├── js│       └── lib├── src│   ├── api│   ├── assets│   │   ├── global│   │   └── images│   │       └── footer│   ├── components│   │   ├── common│   │   ├── news│   │   └── profile│   │       └── charge│   ├── config│   ├── mixin│   ├── router│   ├── service│   ├── store│   └── util└── static    ├── images    └── lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目目录是采用 <code>vue-cli</code> 自动生成，其它按需自己新建就好了。</p><h2 id="开发实践"><a href="#开发实践" class="headerlink" title="开发实践"></a>开发实践</h2><h3 id="动态修改-document-title"><a href="#动态修改-document-title" class="headerlink" title="动态修改 document title"></a>动态修改 document title</h3><p>在不同的路由页面，我们需要动态的修改文档标题，可以将每个页面的标题配置在路由元信息 <code>meta</code> 里面带上，然后在 <code>router.beforeEach</code> 钩子函数中修改：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  mode<span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  routes<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> Index<span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'推荐产品得丰厚奖金'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span> <span class="token string">'/news'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> News<span class="token punctuation">,</span>      meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'公告列表'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      children<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">'list'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> NewsList <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'detail/:newsId'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> NewsDetail<span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'公告详情'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span> <span class="token string">'/guide'</span><span class="token punctuation">,</span>      component<span class="token operator">:</span> GuideProtocol<span class="token punctuation">,</span>      meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        title<span class="token operator">:</span> <span class="token string">'新手指南'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用 afterEach 钩子函数，保证路由已经跳转成功之后修改 title</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> documentTitle <span class="token operator">=</span> <span class="token string">'魅族商城会员平台'</span><span class="token punctuation">;</span>  route<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      documentTitle <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>path<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> documentTitle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Event-Bus-使用场景"><a href="#Event-Bus-使用场景" class="headerlink" title="Event Bus 使用场景"></a>Event Bus 使用场景</h3><p><img src="/images/15047884561558.jpg" alt=""></p><p>我们在项目中引入了 <code>vuex</code> ，通常情况下是不需要使用 <code>event bus</code> 的，但是有一种情况下我们需要使用它，那就是在路由钩子函数内部的时候，在项目中，我们需要在 <code>beforeEnter</code> 路由钩子里面对外抛出事件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> userInfo <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>userFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrivateMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        EventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'get-localdata-error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>App.vue</code> 的 <code>mouted</code> 方法中监听这个事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">EventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'get-localdata-error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$alert</span><span class="token punctuation">(</span><span class="token string">'请勿使用无痕模式浏览'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="根据-URL-的变化，动态更新数据"><a href="#根据-URL-的变化，动态更新数据" class="headerlink" title="根据 URL 的变化，动态更新数据"></a>根据 URL 的变化，动态更新数据</h3><p>通常在一个列表集合页，我们需要做分页操作，同时分页数据需要体现在 URL 中，那么如何动态的根据 URL 的变动来动态的获取数据呢，我们可以使用 <code>watch</code> API，在 <code>watch</code> 里面监听 <code>$route</code>，同时使用 <code>this.$router.replace</code> API 来改变 URL 的值。下面是示例代码 <code>common.js</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      queryParams<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        currentPage<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        pageSize<span class="token operator">:</span> <span class="token number">10</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">handlePageNoChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>queryParams<span class="token punctuation">.</span>currentPage <span class="token operator">=</span> e<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replaceRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">replaceRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queryParams<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>location<span class="token punctuation">.</span>pathname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">routeChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">assignParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">assignParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>queryParams <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queryParams<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">assignParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  watch<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    $route<span class="token operator">:</span> <span class="token string">'routeChange'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们将这部分代码抽取到一个公共的 <code>mixin</code> 中，在需要的组件那里引入它，同时实现自定义的同名 <code>fetchData()</code> 方法<br><code>mixin</code> API <a href="https://cn.vuejs.org/v2/guide/mixins.html">文档</a>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> DemoComponent <span class="token punctuation">&#123;</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>common<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 组件内部自定义同名查询参数，将会和 mixin 中的默认参数合并</span>      queryParams<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        categoryId<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        pageSize<span class="token operator">:</span> <span class="token number">12</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 发送请求</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义指令实现埋点数据统计"><a href="#自定义指令实现埋点数据统计" class="headerlink" title="自定义指令实现埋点数据统计"></a>自定义指令实现埋点数据统计</h3><p>在项目中通常需要做数据埋点，这个时候，使用自定义指令将会变非常简单</p><p>在项目入口文件 <code>main.js</code> 中配置我们的自定义指令</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 坑位埋点指令</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'stat'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token keyword">let</span> prefix <span class="token operator">=</span> <span class="token string">'store'</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">OS</span><span class="token punctuation">.</span>isAndroid <span class="token operator">||</span> <span class="token constant">OS</span><span class="token punctuation">.</span>isPhone<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        prefix <span class="token operator">=</span> <span class="token string">'mall'</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      analytics<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        ty<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        dc<span class="token operator">:</span> data<span class="token punctuation">.</span>desc <span class="token operator">||</span> <span class="token string">''</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件中使用我们的自定义指令</p><p><img src="/images/15047890290376.jpg" alt=""></p><h3 id="使用路由拦截统计页面级别的-PV"><a href="#使用路由拦截统计页面级别的-PV" class="headerlink" title="使用路由拦截统计页面级别的 PV"></a>使用路由拦截统计页面级别的 PV</h3><p>由于第一次在单页应用中尝试数据埋点，在项目上线一个星期之后，数据统计后台发现，首页的 PV、UV 远远高于其它页面，数据很不正常。后来跟数据后台的人沟通询问他们的埋点统计原理之后，才发现其中的问题所在。</p><p><em>传统应用，一般都在页面加载的时候，会有一个异步的 js 加载，就像百度的统计代码类似，所以我们每个页面的加载的时候，都会统计到数据；然而在单页应用，页面加载初始化只有一次，所以其它页面的统计数据需要我们自己手动上报</em></p><p><strong>解决方案</strong></p><p>使用 <code>vue-router</code> 的 <code>beforeEach</code> 或者 <code>afterEach</code> 钩子上报数据，具体使用哪个最好是根据业务逻辑来选择。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">analyticsRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 只统计页面跳转数据，不统计当前页 query 不同的数据</span>  <span class="token comment">// 所以这里只使用了 path, 如果需要统计 query 的，可以使用 to.fullPath</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">!==</span> <span class="token keyword">from</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    analytics<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>location<span class="token punctuation">.</span>protocol<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">//</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>location<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>to<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">record</span> <span class="token operator">=></span> record<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiresAuth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里做登录等前置逻辑判断</span>    <span class="token comment">// 判断通过之后，再上报数据</span>    <span class="token operator">...</span>    <span class="token function">analyticsRequest</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 不需要判断的，直接上报数据</span>    <span class="token function">analyticsRequest</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用过滤器实现展示信息格式化"><a href="#使用过滤器实现展示信息格式化" class="headerlink" title="使用过滤器实现展示信息格式化"></a>使用过滤器实现展示信息格式化</h3><p>如下图中奖金数据信息，我们需要将后台返回的奖金格式化为带两位小数点的格式，同时，如果返回的金额是区间类型，需要额外加上 <span style="color:red;font-weight: bold;">起</span> 字和 <span style="color:red;font-weight: bold;">￥</span> 金额符号</p><p><img src="/images/15047891835499.jpg" alt=""></p><p>在入口文件 <code>main.js</code> 中配置我们自定义的过滤器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'money'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span> unit<span class="token operator">:</span> <span class="token string">'￥'</span><span class="token punctuation">,</span> fixed<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> moneyStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>moneyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> scope <span class="token operator">=</span> moneyStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>config<span class="token punctuation">.</span>unit<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>scope<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>fixed<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 起</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>config<span class="token punctuation">.</span>unit<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>moneyStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>fixed<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件中使用：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;detail.priceScope | money&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;singleWrapper: isMobile&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>比率：&#123;&#123;detail.commissionRateScope&#125;&#125;%<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>income<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>奖金：&#123;&#123;detail.expectedIncome | money&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios-使用配置"><a href="#axios-使用配置" class="headerlink" title="axios 使用配置"></a>axios 使用配置</h3><p>在项目中，我们使用了 <a href="https://github.com/mzabriskie/axios">axios</a> 做接口请求</p><p>在项目中全局配置 <code>/api/common.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'../store'</span><span class="token punctuation">;</span><span class="token comment">// 全局默认配置</span><span class="token comment">// 设置 POST 请求头</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">;</span><span class="token comment">// 配置 CORS 跨域</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>crossDomain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 请求发起前拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 全局 loading 状态，触发 loading 效果</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'updateLoadingStatus'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    isLoading<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// POST 请求参数处理成 axios post 方法所需的格式</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'post'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    config<span class="token punctuation">.</span>data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">// 这句不能省，不然后面的请求就无法成功发起，因为读不到配置参数</span>  <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 异常处理</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'updateLoadingStatus'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    isLoading<span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 响应拦截</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 关闭 loading 效果</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'updateLoadingStatus'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    isLoading<span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 全局登录过滤，如果没有登录，直接跳转到登录 URL</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 未登录</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token function">getLoginUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 这里返回的 response.data 是被 axios 包装过的一成，所以在这里抽取出来</span>  <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'updateLoadingStatus'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    isLoading<span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> axios<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在接口中使用就方便很多了 <code>/api/xxx.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'./common'</span><span class="token punctuation">;</span><span class="token keyword">const</span> baseURL <span class="token operator">=</span> <span class="token string">'/api/profile'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">USER_BASE_INFO</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>baseURL<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/getUserBaseInfo.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">UPDATE_USER_INFO</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>baseURL<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/saveUserInfo.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token comment">// 更新用户实名认证信息</span><span class="token keyword">const</span> <span class="token function-variable function">updateUserInfo</span> <span class="token operator">=</span> <span class="token parameter">userinfo</span> <span class="token operator">=></span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token constant">UPDATE_USER_INFO</span><span class="token punctuation">,</span> userinfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取用户基础信息</span><span class="token keyword">const</span> <span class="token function-variable function">getUserBaseInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">USER_BASE_INFO</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vuex-状态在响应式页面中的妙用"><a href="#vuex-状态在响应式页面中的妙用" class="headerlink" title="vuex 状态在响应式页面中的妙用"></a>vuex 状态在响应式页面中的妙用</h3><p>由于项目是响应式页面，PC 端和移动端在表现成有很多不一致的地方，有时候单单通过 CSS 无法实现交互，这个时候，我们的 <code>vuex</code> 状态就派上用场了，</p><p>我们一开始在 <code>App.vue</code> 里面监听了页面的 <code>resize</code> 事件，动态的更新 <code>vuex</code> 里面 <code>isMobile</code> 的状态值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updatePlatformStatus</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   isMobile<span class="token operator">:</span> <span class="token function">isMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们在组件层，就能响应式的渲染不同的 <code>dom</code> 结构了。其中最常见的是 PC 端和移动端加载的图片需要不同的规格的，这个时候我们可以这个做</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">loadImgAssets</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> suffix <span class="token operator">=</span> <span class="token string">'.jpg'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../assets/images/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>isMobile <span class="token operator">?</span> <span class="token string">'-mobile'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>suffix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"feed-back"</span> <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"loadImgAssets('feed-back')"</span><span class="token operator">&lt;</span>img v<span class="token operator">-</span>lazy<span class="token operator">=</span><span class="token string">"&#123;src: isMobile ? detail.imgUrlMobile : detail.imgUrlPc, loading: placeholder&#125;"</span><span class="token operator">></span><span class="token comment">// 动态渲染不同规格的 dislog</span><span class="token operator">&lt;</span>el<span class="token operator">-</span>dialog <span class="token operator">:</span>visible<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">"dialogVisible"</span> <span class="token operator">:</span>size<span class="token operator">=</span><span class="token string">"isMobile ? 'full' : 'tiny'"</span> top<span class="token operator">=</span><span class="token string">"30%"</span> custom<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"unCertification-dialog"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>dialog<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等等</p><p><img src="/images/15047927923111.jpg" alt=""></p><p><img src="/images/15047928103740.jpg" alt=""></p><h2 id="开发相关配置"><a href="#开发相关配置" class="headerlink" title="开发相关配置"></a>开发相关配置</h2><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>在项目目录的 <code>config</code> 文件下面的 <code>index.js</code> 配置我们的本地反向代理和端口信息</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">dev<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  env<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./dev.env'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  port<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>  autoOpenBrowser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  assetsSubDirectory<span class="token operator">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>  assetsPublicPath<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  proxyTable<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">'/api/profile'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      target<span class="token operator">:</span> <span class="token string">'[真实接口地址]:[端口号]'</span><span class="token punctuation">,</span> <span class="token comment">// 例如： http://api.xxx.com</span>      changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'^/api/profile'</span><span class="token operator">:</span> <span class="token string">'/profile'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们调用接口的形式就会变成如下映射，当我们调用 <code>/api/profile/xxxx</code> 的时候，其实是调用了 <code>[真实接口地址]/profile/xxxx</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">/</span>api<span class="token operator">/</span>profile<span class="token operator">/</span><span class="token parameter">xxxx</span> <span class="token operator">=></span> <span class="token punctuation">[</span>真实接口地址<span class="token punctuation">]</span><span class="token operator">/</span>profile<span class="token operator">/</span>xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>nginx 配置</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">upstream</span> api<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com<span class="token punctuation">&#123;</span> <span class="token comment">#ip_hash;</span>  <span class="token keyword">server</span> <span class="token punctuation">[</span>接口服务器 ip 地址<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span>端口<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">location</span> <span class="token operator">^</span><span class="token operator">~</span> <span class="token operator">/</span>api<span class="token operator">/</span>profile <span class="token punctuation">&#123;</span>    <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token keyword">proxy_redirect</span> off<span class="token punctuation">;</span>    <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">;</span>    <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>    <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>    <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">rewrite</span> <span class="token operator">^</span><span class="token operator">/</span>api<span class="token operator">/</span>profile<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token operator">/</span>profile<span class="token operator">/</span>$<span class="token number">1</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线上部署"><a href="#线上部署" class="headerlink" title="线上部署"></a>线上部署</h3><p>如果路由使用的是 <code>history</code> 模式的话，需要在 <code>nginx</code> 里面配置将所有的请求到转发到 <code>index.html</code> 去</p><p>在 <code>nginx.conf</code> 或者对应的站点 <code>vhost</code> 文件下面配置</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><strong>开启静态资源长缓存</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token operator">|</span>bmp<span class="token operator">|</span>swf<span class="token operator">|</span>woff<span class="token operator">|</span>ttf<span class="token operator">|</span>eot<span class="token operator">|</span>svg<span class="token punctuation">)</span>$ <span class="token punctuation">&#123;</span>    <span class="token keyword">expires</span> <span class="token number">1</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">location</span> <span class="token operator">~</span> <span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>js<span class="token operator">|</span>css<span class="token punctuation">)</span>$ <span class="token punctuation">&#123;</span>    <span class="token keyword">expires</span> <span class="token number">1</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>开启静态资源 gzip 压缩</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token operator">/</span><span class="token operator">/</span> 找到 nginx<span class="token punctuation">.</span>conf 配置文件vim <span class="token operator">/</span>data<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span class="token keyword">gzip</span> on<span class="token punctuation">;</span><span class="token keyword">gzip_min_length</span>  <span class="token number">1</span>k<span class="token punctuation">;</span><span class="token keyword">gzip_buffers</span>     <span class="token number">4</span> <span class="token number">8</span>k<span class="token punctuation">;</span><span class="token keyword">gzip_http_version</span> <span class="token number">1.1</span><span class="token punctuation">;</span><span class="token keyword">gzip_types</span> text<span class="token operator">/</span>plain application<span class="token operator">/</span>javascript application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>javascript text<span class="token operator">/</span>xml text<span class="token operator">/</span>css<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启了 gzip 压缩之后，页面资源请求大小将大大减小</p><p><img src="/images/15047931938668.jpg" alt=""></p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>还有一个小问题，就是在某些浏览器隐私模式下，js 是不具备对 localStorage 写的权限的，这一点在开发的时候需要特别注意下错误的处理。</p>]]></content>
    
    <summary type="html">
    
      关于 vue2.0 单页应用的小结
    
    </summary>
    
      <category term="技术类" scheme="https://heavenru.com/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
    
      <category term="总结" scheme="https://heavenru.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="vue" scheme="https://heavenru.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用 CANVAS 实现帧动画</title>
    <link href="https://heavenru.com//post/%E4%BD%BF%E7%94%A8CANVAS%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E5%8A%A8%E7%94%BB"/>
    <id>https://heavenru.com//post/使用CANVAS实现视频动画</id>
    <published>2017-07-31T11:38:52.000Z</published>
    <updated>2021-04-06T12:16:51.676Z</updated>
    
    <content type="html"><![CDATA[<p>在最近项目中需要实现一个精灵动画，素材方只提供了一个短视频素材，所以在实现精灵动画之前先介绍两个工具来帮助我们更好的实现需求。在这篇文章中，主要是介绍两个命令行工具来实现将一个短视频文件转化成一张 sprite 图片与如何使用 canvas 绘制精灵动画<br><span id="more"></span></p><p>两个工具官方地址如下：</p><ul><li><a href="https://www.ffmpeg.org/">ffmpeg</a></li><li><a href="http://www.imagemagick.org/script/montage.php">montage</a></li></ul><h2 id="1、ffmpeg-视频转图片工具"><a href="#1、ffmpeg-视频转图片工具" class="headerlink" title="1、ffmpeg 视频转图片工具"></a>1、ffmpeg 视频转图片工具</h2><p>ffmpeg 是「一个完整的跨平台解决方案，用于记录，转换和流式传输音频和视频的工具」，它的作用原不止于这篇文章中所介绍的，有兴趣的同学可以自己去官方网站了解更多。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./ffmpeg -i jellyfish.mp4 -vf <span class="token assign-left variable">scale</span><span class="token operator">=</span><span class="token number">138</span>:-1 -r <span class="token number">8</span> %04d.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-i</code> 视频流输入 URL</li><li><code>-vf</code> 创建由过滤器指定的过滤器，并使用它过滤流，过滤器是要应用于流的过滤器的描述，并且必须具有相同类型流的单个输入和单个输出。对应的过滤器参数必须跟在这个之后，不然无法生效</li><li><code>scale</code> 视频缩放，<code>scale=width:height</code> 其中，如果 <code>height=-1</code> ，则表示自适应高度，按照视频的宽高比输出,后面紧接这 <code>scale=width:height,setar=16:9</code> 则可以指定输出宽高比</li><li><code>-r</code> 视频输出 <code>fps</code> 值, 值越大，则以越高的 <code>fps</code> 切片视频，别名 <code>-framerate</code>，比如我们想以 60fps 去裁剪视频导出图片，则使用 <code>-r 60</code></li><li><code>-aspect</code> 视频输出宽高比，比如常用的 <code>4:3</code>、<code>16:9</code> 都是规范的参数用法</li><li><code>-ss</code> 裁剪开始位置，表示从视频的某个时间开始裁剪，是一个非常有用的参数，该参数使用位置放在 <code>-i</code> 前面，参数格式 <code>hh:mm:ss</code> 表示时分秒</li><li><code>-t</code> 持续时间，表示需要裁剪的视频长度，通常配合 <code>-ss</code> 一起使用，就能实现裁剪任意视频时间段的内容了，比如我们需要裁剪 <code>5-10</code> 秒的视频导出，可以这么配合使用 <code>ffmgeg -ss 00:00:05 -t 00:00:10</code></li><li><code>-vframes</code> 设定输出视频帧数，它是 <code>-frames:v</code> 的别名</li><li><code>-qscale:v 2</code> 指定输出图片质量，取值范围<code>2-31</code>，值越大，质量越差，建议取值 <code>2-5</code></li></ul><h3 id="综合应用："><a href="#综合应用：" class="headerlink" title="综合应用："></a>综合应用：</h3><pre class="line-numbers language-bash、" data-language="bash、"><code class="language-bash、">&#x2F;&#x2F; 截取 60 秒处的一张图片ffmpeg -ss 60 -i input.mp4 -qscale:v 2 -vframes 1 output.jpg&#x2F;&#x2F; 将视频按照 60fps 的速度导出所有图片ffmpeg -i input.mp4 -r 60 %04d.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、合并多个图片为一张图片-montage"><a href="#2、合并多个图片为一张图片-montage" class="headerlink" title="2、合并多个图片为一张图片 montage"></a>2、合并多个图片为一张图片 montage</h2><p>通过上面介绍的工具，我们能很轻易的将一个视频转化为一系列的图片文件，那么这个时候，我们就可以使用 <a href="http://www.imagemagick.org/script/montage.php">montage</a> 工具将前面导出的 n 张图片合并为一张图片</p><h3 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">montage -border <span class="token number">0</span> -geometry 138x -tile 89x -quality <span class="token number">100</span>% *.png myvideo.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-tile</code> 代表需要合并的一行图片数量，当超出这个数字的时候，将换行合并</li><li><code>-quality</code> 代表合成图片质量，取值范围 <code>0 - 100%</code></li></ul><h2 id="3、绘制-canvas-精灵动画"><a href="#3、绘制-canvas-精灵动画" class="headerlink" title="3、绘制 canvas 精灵动画"></a>3、绘制 canvas 精灵动画</h2><p>在开始编辑代码之前，我们整理一下需求：</p><ul><li>动画需要能循环播放</li><li>动画需要能指定从某一帧开始渲染</li><li>指定渲染多少帧动画</li><li>动画需要能控制渲染帧率</li><li>当精灵图片不是单行的时候，要能实现自动换行渲染</li></ul><p>OK，明白了我们的需求之后，我们开始编写代码。先来一个简易的参数合并工具方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> _extends <span class="token operator">=</span> Object<span class="token punctuation">.</span>assign <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> source <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 遍历传入的对象的属性</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 只操作该实例上的属性和方法, 避免循环原型</span>        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来是我们的 canvas 精灵对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Sprite</span><span class="token punctuation">(</span><span class="token parameter">canvas<span class="token punctuation">,</span> opts</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> defaults <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    loop<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 是否循环播放</span>    frameIndex<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">// 当前第几帧</span>    startFrameIndex<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 其实渲染位置</span>    tickCount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 每个时间段内计数器</span>    ticksPerFrame<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 每个渲染时间段帧数，通过这个来控制动画的渲染速度</span>    numberOfFrames<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 动画总帧数</span>    numberOfPerLine<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// 每行动画帧数</span>    width<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 画布宽度</span>    height<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 画屏高度</span>    sprite<span class="token operator">:</span> <span class="token keyword">undefined</span>  <span class="token comment">// 图片 image 对象</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> params <span class="token operator">=</span> opts <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>canvas <span class="token operator">=</span> canvas<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token function">_extends</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> defaults<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>image<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请传入图片对象'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里的取 Math.min() 的原因是，在 safari 下面，如果图片的大小超过了画布的大小，那么将不会渲染任何图像</span>  <span class="token comment">// 所以在这里，我们去画布和图片中的小者。</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>width <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>sprite<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>sprite<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>numberOfPerLine<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>numberOfPerLine <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>numberOfFrames <span class="token operator">||</span> <span class="token number">9999</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Sprite</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 核心绘制代码，主要使用了 canvas.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) API</span>  <span class="token comment">// this.options.frameIndex % this.options.numberOfPerLine 每次求余数，判断是否换行</span>  <span class="token comment">// Math.floor(this.options.frameIndex / this.options.numberOfPerLine)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>sprite<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>frameIndex <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>numberOfPerLine<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>height <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>frameIndex <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>numberOfPerLine<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Sprite</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>tickCount<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 控制帧率的核心部分，在每个绘制时间点，判断当前的计数器是否大于我们传入的值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>tickCount <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>ticksPerFrame<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>tickCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 动画循环判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>frameIndex <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>numberOfFrames <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>frameIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>loop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 每次循环都从给定的 startFrameIndex 开始</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>frameIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>startFrameIndex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，我们的精灵类基本完成了，接下来看下具体在业务代码中如何使用它</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> spriteCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'spriteCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>spriteCanvas<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">138</span><span class="token punctuation">;</span>spriteCanvas<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">308</span><span class="token punctuation">;</span><span class="token keyword">var</span> isSpriteLoaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> spriteImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sprite<span class="token punctuation">;</span><span class="token comment">// 这里有个 IE 下的 BUG，如果我们的 sprite 在图片没有加载完全就执行</span><span class="token comment">// 那么在 IE 下面会抛出一个 DOM Exception</span><span class="token comment">// 因此我们将 Sprite 初始化放在了 image.onlaod 回调函数中执行</span>sprite<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>spriteCanvas<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    sprite<span class="token operator">:</span> spriteImage<span class="token punctuation">,</span>    loop<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    numberOfFrames<span class="token operator">:</span> <span class="token number">92</span><span class="token punctuation">,</span>    ticksPerFrame<span class="token operator">:</span> <span class="token number">3</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">spriteAnimate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>sprite<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'xxxxx/sprite.jpg'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">spriteAnimate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>spriteAnimate<span class="token punctuation">)</span><span class="token punctuation">;</span>  sprite<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sprite<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文章到这里基本完成了，想要看具体效果的同学，可以去这里查看<br>传送门： <a href="https://www.meizu.com/pro7/fenetre/">水母动画</a>， <a href="https://www.meizu.com/pro7/summary/">蜂鸟动画</a></p><h2 id="4、参考资料"><a href="#4、参考资料" class="headerlink" title="4、参考资料"></a>4、参考资料</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage">https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage</a><br><a href="http://www.williammalone.com/articles/create-html5-canvas-javascript-sprite-animation/">http://www.williammalone.com/articles/create-html5-canvas-javascript-sprite-animation/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在最近项目中需要实现一个精灵动画，素材方只提供了一个短视频素材，所以在实现精灵动画之前先介绍两个工具来帮助我们更好的实现需求。在这篇文章中，主要是介绍两个命令行工具来实现将一个短视频文件转化成一张 sprite 图片与如何使用 canvas 绘制精灵动画&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://heavenru.com/categories/JavaScript/"/>
    
    
      <category term="原生 JS" scheme="https://heavenru.com/tags/%E5%8E%9F%E7%94%9F-JS/"/>
    
      <category term="CANVAS" scheme="https://heavenru.com/tags/CANVAS/"/>
    
  </entry>
  
  <entry>
    <title>自定义angular2输入组件</title>
    <link href="https://heavenru.com//post/%E8%87%AA%E5%AE%9A%E4%B9%89angular2%E8%BE%93%E5%85%A5%E7%BB%84%E4%BB%B6"/>
    <id>https://heavenru.com//post/自定义angular2输入组件</id>
    <published>2016-11-24T11:17:44.000Z</published>
    <updated>2021-04-06T12:17:28.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建一个自定义-angular2-输入组件"><a href="#构建一个自定义-angular2-输入组件" class="headerlink" title="构建一个自定义 angular2 输入组件"></a>构建一个自定义 angular2 输入组件</h1><p>今天我们来学习如何正确的构建和一个具有和 <code>&lt;input type=&quot;text&quot;&gt;</code> 同样作用，但同时也具有自己的逻辑的输入组件。<span id="more"></span></p><p>在开始文章之前，在读这篇文章之前，希望你已经把官方的文档和案例都看过至少一遍了，具体的一些概念和细节不会在文章中讲解。</p><p>我们先来看一下我们这篇文章里面所介绍的组件的表现形式是怎么样的：</p><p><img src="/images/angular2/angular2-demo.gif" alt="目标图"></p><p>OK，上图就是我们所要达到的效果了。那么，我们来分析下我们这个组件改具备哪些功能。</p><ul><li>聚焦的时候，底部边框为绿色</li><li>具有自己的部分逻辑，比如在有输入值的情况下，会出现一个删除图标</li><li>当输入值为空的时候，提示错误文案</li><li>可以插入其它的 DOM，比如最下面的发送验证码按钮</li><li>支持 <code>input</code> 的必要属性，比如 <code>maxlength、placeholder</code>等</li><li>支持表单 <code>angular2 form-control</code> 表单绑定，如上图中的值都是从 <code>FormBuilder</code> 中构建的</li></ul><p>我们将在后面一步步的来讲解如何实现这样一个自定义组件的功能；</p><h2 id="创建一个-angular2-组件"><a href="#创建一个-angular2-组件" class="headerlink" title="创建一个 angular2 组件"></a>创建一个 angular2 组件</h2><p>我们先来构建一个基础的 <code>angular2</code> 组件,这里我们先新建一个叫做 <code>input-control</code> 的组件。</p><p>首先是 <code>input-control.component.ts</code> 文件：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  selector<span class="token operator">:</span> <span class="token string">'input-control'</span><span class="token punctuation">,</span>  templateUrl<span class="token operator">:</span> <span class="token string">'input-control.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'input-control.component.scss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  encapsulation<span class="token operator">:</span> ViewEncapsulation<span class="token punctuation">.</span>None<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后是 <code>input-control.component.html</code> 文件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">#input</span>  <span class="token attr-name">[type]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type<span class="token punctuation">"</span></span>  <span class="token attr-name">[name]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>  <span class="token attr-name">(focus)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_handleFocus($event)<span class="token punctuation">"</span></span>  <span class="token attr-name">(blur)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_handleBlur($event)<span class="token punctuation">"</span></span>  <span class="token attr-name">[placeholder]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span>  <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span>  <span class="token attr-name">[minlength]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>minlength<span class="token punctuation">"</span></span>  <span class="token attr-name">[maxlength]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxlength<span class="token punctuation">"</span></span>  <span class="token attr-name">[readonly]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readonly<span class="token punctuation">"</span></span>  <span class="token attr-name">[disabled]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">#iconDelete</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>focused &amp;&amp; !readonly<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon icon-delete<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_handleClear($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下就是 <code>input-control.component.scss</code> 文件了，这里我就补贴出代码了，各位可以根据自己的项目来设置对应的样式</p><p>最后，就是我们调用的时候的方式:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input-control</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-control<span class="token punctuation">"</span></span>  <span class="token attr-name">[class.error]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!mobile.valid &amp;&amp; mobile.touched<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mobile<span class="token punctuation">"</span></span>  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>手机号<span class="token punctuation">"</span></span>  <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>11<span class="token punctuation">"</span></span>  <span class="token attr-name">[formControl]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mobile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mobile.touched &amp;&amp; mobile.hasError(<span class="token punctuation">'</span>mobile<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error-tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请输入正确的手机号码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input-control</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是否对于上面的一些属性和变量感到困惑，别急，让我一步步道来</p><h2 id="功能细分"><a href="#功能细分" class="headerlink" title="功能细分"></a>功能细分</h2><h3 id="输入属性-Input"><a href="#输入属性-Input" class="headerlink" title="输入属性 @Input()"></a>输入属性 <code>@Input()</code></h3><p>有一点要谨记：<strong>我们是在用 DIV 来模拟一个 input 的表现，同时具备自己的逻辑</strong>; 所以，当我们需要 <code>input</code> 的对应属性值的时候，我们都需要从父容器传递到组件内部的 <code>input</code> 上面，所以在这里我们需要用到 <code>@Input</code> 特性了</p><p>我们在 <code>input-control.component.ts</code> 定义我们所需的一些属性：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  selector<span class="token operator">:</span> <span class="token string">'input-control'</span><span class="token punctuation">,</span>  templateUrl<span class="token operator">:</span> <span class="token string">'input-control.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'input-control.component.scss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  host<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 宿主元素 click 事件，触发 focus() 事件</span>    <span class="token string">'(click)'</span><span class="token operator">:</span> <span class="token string">'focus()'</span><span class="token punctuation">,</span>    <span class="token comment">// 切换宿主元素 focus 样式</span>    <span class="token string">'[class.focus]'</span><span class="token operator">:</span> <span class="token string">'focused'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">InputControlComponent</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> _focused<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> _value<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> _disabled<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> _readonly<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> _required<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 外部传入属性</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">type</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> placeholder<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> minlength<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> maxlength<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token comment">// value 属性，以 get 方式拦截</span>  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    v <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_convertValueForInputType</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> v<span class="token punctuation">;</span>      <span class="token comment">// 触发值改变事件，冒泡给父级</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onChangeCallback</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 只读属性</span>  <span class="token keyword">get</span> <span class="token function">focused</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_focused<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">get</span> <span class="token function">disabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_disabled<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">set</span> <span class="token function">disabled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_disabled <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_coerceBooleanProperty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">get</span> <span class="token keyword">readonly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_readonly<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">set</span> <span class="token keyword">readonly</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_readonly <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_coerceBooleanProperty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">get</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_required<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">set</span> <span class="token function">required</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_required <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_coerceBooleanProperty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回顾的我们前面的 <code>input-control.component.html</code> 文件，我们定义了 <code>type</code>、<code>name</code>、<code>placeholder</code>、<code>minlength</code>、<code>maxlength</code> 可读写的属性，同时还有 <code>value</code>、<code>readonly</code>、<code>disabled</code>、<code>required</code> 等只读属性。通过 <code>[属性]=&quot;源&quot;</code> 方式，接收父级传入的数据。</p><p>OK，属性我们都知道如何从父级去接收了，那么接下来我们来实现 <strong>点击</strong> 操作： </p><p>我们先修改 <code>input-control.component.ts</code> 文件</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  ……  host<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 宿主元素 click 事件，触发 focus() 事件</span>    <span class="token string">'(click)'</span><span class="token operator">:</span> <span class="token string">'focus()'</span><span class="token punctuation">,</span>    <span class="token comment">// 切换宿主元素 focus 样式</span>    <span class="token string">'[class.focus]'</span><span class="token operator">:</span> <span class="token string">'focused'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们利用了 <code>host</code> 这个属性，用来给宿主元素对应操作，传送门 <a href="https://angular.cn/docs/ts/latest/api/core/index/Component-decorator.html">@Component 相关属性</a>;<br>我们给宿主元素也就是 <code>&lt;input-control&gt;&lt;/input-control&gt;</code> 绑定了一个 <code>click</code> 事件，同时根据自身属性 <code>focused</code> 来切换一个 <code>.focus</code> 类。在我们组件的 <code>focus()</code> 事件中，我们需要让组件内部的 <code>input</code> 聚焦，同时切换自身的 <code>focused</code> 值。为了拿到我们组件内部的 <code>input</code> 元素，这里我们需要使用 <code>@ViewChild()</code>。</p><p>修改 <code>input-control.component.ts</code> 文件如下：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  ……  host<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 宿主元素 click 事件，触发 focus() 事件</span>    <span class="token string">'(click)'</span><span class="token operator">:</span> <span class="token string">'focus()'</span><span class="token punctuation">,</span>    <span class="token comment">// 切换宿主元素 focus 样式</span>    <span class="token string">'[class.focus]'</span><span class="token operator">:</span> <span class="token string">'focused'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">InputControlComponent</span> <span class="token punctuation">&#123;</span>  ……  ……  <span class="token keyword">private</span> _focusEmitter<span class="token operator">:</span> EventEmitter<span class="token operator">&lt;</span>FocusEvent<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter<span class="token operator">&lt;</span>FocusEvent<span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  @<span class="token function">ViewChild</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span> _inputElement<span class="token operator">:</span> ElementRef<span class="token punctuation">;</span> <span class="token comment">// 组件内部 input 元素</span>  @<span class="token function">ViewChild</span><span class="token punctuation">(</span><span class="token string">'iconDelete'</span><span class="token punctuation">)</span> iconDelete<span class="token operator">:</span> ElementRef<span class="token punctuation">;</span> <span class="token comment">// 删除图标元素</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> hostRef<span class="token operator">:</span> ElementRef<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 监听全局的点击事件，如果不是当前 input-control 组，则视为失去焦点操作</span>  @<span class="token function">HostListener</span><span class="token punctuation">(</span><span class="token string">'window:click'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'$event'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">inputControlBlurHandler</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> parent <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>    <span class="token comment">// 如何当前节点不是宿主节点，并且不等于 document 节点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> parent <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hostRef<span class="token punctuation">.</span>nativeElement <span class="token operator">&amp;&amp;</span> parent <span class="token operator">!=</span> document<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 取当前节点的父节点继续寻找</span>      parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 找到最顶层，则表示已经不在宿主元素内部了，触发失去焦点 fn</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> document<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_focused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 宿主聚焦</span>  <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 触发下面的 _handleFocus() 事件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_inputElement<span class="token punctuation">.</span>nativeElement<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 输入框聚焦</span>  <span class="token function">_handleFocus</span><span class="token punctuation">(</span>event<span class="token operator">:</span> FocusEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_focused <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_focusEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 清空输入值</span>  <span class="token function">_handleClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 这里触发 blur 操作，但是不改变 this._focused 的值，</span>  <span class="token comment">// 不然删除图标无法实现它的功能，</span>  <span class="token comment">//设置 this._focused 的值将由上面的 @HostListener('window:click', ['$event']) 来处理</span>  <span class="token comment">// 触发父级的 blur 事件</span>  <span class="token function">_handleBlur</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onTouchedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_blurEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 对外暴露 focus 事件</span>  @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">)</span> onFocus <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_focusEmitter<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ……  ……<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，我们通过宿主的 <code>focus()</code> 事件，让 <code>input</code> 元素 <code>focus</code>, 同时 <code>input</code> 元素聚焦之后，会触发下面的 <code>_handleFocus()</code> 方法，在这个方法里面，我们修改组件自身的 <code>focused</code> 属性，并对外发射一个 <code>focus</code> 事件，用来像父级传递使用。同时，我们的删除图标也是根据组件的 <code>focused</code> 属性切换显示：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">#input</span>  <span class="token attr-name">[type]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type<span class="token punctuation">"</span></span>  <span class="token attr-name">[name]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>  <span class="token attr-name">(focus)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_handleFocus($event)<span class="token punctuation">"</span></span>  <span class="token attr-name">(blur)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_handleBlur($event)<span class="token punctuation">"</span></span>  <span class="token attr-name">[placeholder]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span>  <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">#iconDelete</span>     <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>focused &amp;&amp; !readonly<span class="token punctuation">"</span></span>     <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon icon-delete<span class="token punctuation">"</span></span>     <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_handleClear($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们的 <code>input</code> 和组件内部的 <code>value</code> 属性进行了双向绑定，所以在 <code>_handleClear</code> 之后，我们的输入框的值自然也就被清空了。</p><h3 id="值访问器-ControlValueAccessor"><a href="#值访问器-ControlValueAccessor" class="headerlink" title="值访问器 ControlValueAccessor"></a>值访问器 <a href="https://angular.cn/docs/ts/latest/api/forms/index/ControlValueAccessor-interface.html">ControlValueAccessor</a></h3><p>在完成上面的一些步骤之后，我们的组件基本功能完成了，但是接下来还有最重要的一部分内容，那就是让我们的自定义组件获得 <code>值访问</code> 权限。<br>在官方的文档中有提到一点 <a href="https://github.com/angular/material2/blob/master/src/lib/input/input.ts">https://github.com/angular/material2/blob/master/src/lib/input/input.ts</a> </p><p><img src="/images/angular2/control-access.png" alt="值访问器"><br>在查看官方的文档之后，我们发现要实现自定义组件的值访问权限，我们需要继承 <code>ControlValueAccessor</code> 接口，同时实现它内部的对应的接口</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 要实现双向数据绑定，这个不可少</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">INPUT_CONTROL_VALUE_ACCESSOR</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  provide<span class="token operator">:</span> <span class="token constant">NG_VALUE_ACCESSOR</span><span class="token punctuation">,</span>  useExisting<span class="token operator">:</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> InputControlComponent<span class="token punctuation">)</span><span class="token punctuation">,</span>  multi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">noop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  selector<span class="token operator">:</span> <span class="token string">'input-control'</span><span class="token punctuation">,</span>  templateUrl<span class="token operator">:</span> <span class="token string">'input-control.component.html'</span><span class="token punctuation">,</span>  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'input-control.component.scss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  host<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 宿主元素 click 事件，触发 focus() 事件</span>    <span class="token string">'(click)'</span><span class="token operator">:</span> <span class="token string">'focus()'</span><span class="token punctuation">,</span>    <span class="token comment">// 切换宿主元素 focus 样式</span>    <span class="token string">'[class.focus]'</span><span class="token operator">:</span> <span class="token string">'focused'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  encapsulation<span class="token operator">:</span> ViewEncapsulation<span class="token punctuation">.</span>None<span class="token punctuation">,</span>  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">INPUT_CONTROL_VALUE_ACCESSOR</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">InputControlComponent</span> <span class="token keyword">implements</span> <span class="token class-name">ControlValueAccessor</span> <span class="token punctuation">&#123;</span>  ……  ……  <span class="token comment">/** Callback registered via registerOnTouched (ControlValueAccessor)   * 此属性在做表单校验的时候，不可少，   * 如果缺少了这个属性，FormControl.touched 属性将监测不到，切记！！   */</span>  <span class="token keyword">private</span> <span class="token function-variable function">_onTouchedCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token operator">=</span> noop<span class="token punctuation">;</span>  <span class="token comment">/** Callback registered via registerOnChange (ControlValueAccessor) */</span>  <span class="token keyword">private</span> <span class="token function-variable function">_onChangeCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span>_<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token operator">=</span> noop<span class="token punctuation">;</span>  <span class="token comment">/**   * Write a new value to the element.   */</span>  <span class="token function">writeValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * Set the function to be called when the control receives a change event.   */</span>  <span class="token function">registerOnChange</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_onChangeCallback <span class="token operator">=</span> fn<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">/**   * Set the function to be called when the control receives a touch event.   */</span>  <span class="token function">registerOnTouched</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_onTouchedCallback <span class="token operator">=</span> fn<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  ……  ……<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正如上面代码中所示的一样，实现了这些对应的接口之后，我们就能像使用普通的 <code>input</code> 元素一样使用我们的自定义组件了。</p><h3 id="允许组件加载内部其它的-DOM-元素"><a href="#允许组件加载内部其它的-DOM-元素" class="headerlink" title="允许组件加载内部其它的 DOM 元素"></a>允许组件加载内部其它的 DOM 元素</h3><p>回顾我们前面文章开头的 GIF 图片，我们还有一个获取验证码的按钮，同时，我们的错误提示也是放在组件内部的。要支持这种形式的，我们需要在组件内部加上 <code>&lt;ng-content&gt;&lt;/ng-content&gt;</code> 标签<br>有了这个之后，所有包裹在 <code>&lt;input-control&gt;&lt;/input-control&gt;</code> 组件内部的元素都将被渲染到组件内部</p><p>父组件调用 <code>input-control</code>:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input-control</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-control sms-control<span class="token punctuation">"</span></span>  <span class="token attr-name">[class.error]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!captcha.valid &amp;&amp; captcha.touched<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>captcha<span class="token punctuation">"</span></span>  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入验证码<span class="token punctuation">"</span></span>  <span class="token attr-name">[formControl]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>captcha<span class="token punctuation">"</span></span>  <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>count-down</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-send-sms<span class="token punctuation">"</span></span> <span class="token attr-name">counter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>获取验证码<span class="token punctuation">"</span></span> <span class="token attr-name">countText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>秒后重新获取<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>count-down</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!captcha.valid &amp;&amp; captcha.touched<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error-tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请输入验证码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input-control</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器渲染之后的的 DOM 结构：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input-control</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-control sms-control ng-untouched ng-pristine ng-invalid<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>captcha<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入验证码<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">ng-reflect-maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">ng-reflect-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">ng-reflect-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>captcha<span class="token punctuation">"</span></span> <span class="token attr-name">ng-reflect-placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入验证码<span class="token punctuation">"</span></span> <span class="token attr-name">ng-reflect-form</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[object Object]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ng-reflect-maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">ng-reflect-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>captcha<span class="token punctuation">"</span></span> <span class="token attr-name">ng-reflect-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">ng-reflect-placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入验证码<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入验证码<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ng-untouched ng-pristine ng-valid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--template bindings=&#123;  "ng-reflect-ng-if": null&#125;--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>count-down</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-send-sms<span class="token punctuation">"</span></span> <span class="token attr-name">counttext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>秒后重新获取<span class="token punctuation">"</span></span> <span class="token attr-name">counter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>获取验证码<span class="token punctuation">"</span></span> <span class="token attr-name">ng-reflect-counter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">ng-reflect-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>获取验证码<span class="token punctuation">"</span></span> <span class="token attr-name">ng-reflect-count-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>秒后重新获取<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>获取验证码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>count-down</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--template bindings=&#123;  "ng-reflect-ng-if": null&#125;--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input-control</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="与-FormControl-结合使用注意事项"><a href="#与-FormControl-结合使用注意事项" class="headerlink" title="与 FormControl 结合使用注意事项"></a>与 FormControl 结合使用注意事项</h3><p>在后期的时候，我整合了自定输入组件与 <code>FormControl</code> 一起使用，在使用过程中，发现在需要使用 <code>.touched</code> 特性的时候，发现无法生效，通过查资料发现，如果需要让这个特性生性，我们的输入组件必须监听 <code>blur</code> 事件并且在处理事件中调用触发对外的 blur 事件，具体代码见前面的 <code>_handleBlur()</code> 内容。</p><p>完整 Demo 地址：<a href="https://github.com/lichenbuliren/mcare-app">mcare-app</a><br>这个 Demo 里面整合了路由、子模块、服务、动态表单等特性的使用方法，有兴趣的可以参考下，还在持续完善中。这个 Demo 是参照自己做过的项目部分UI，当然不会涉及核心的业务代码：）。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/angular/material2/blob/master/src/lib/input/input.ts">Angular2 material2 官方UI库</a><br><a href="http://blog.thoughtram.io/angular/2016/07/27/custom-form-controls-in-angular-2.html">CUSTOM FORM CONTROLS IN ANGULAR 2</a><br><a href="http://stackoverflow.com/questions/38447681/touched-untouched-not-updating-in-custom-input-component-angular-2">http://stackoverflow.com/questions/38447681/touched-untouched-not-updating-in-custom-input-component-angular-2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;构建一个自定义-angular2-输入组件&quot;&gt;&lt;a href=&quot;#构建一个自定义-angular2-输入组件&quot; class=&quot;headerlink&quot; title=&quot;构建一个自定义 angular2 输入组件&quot;&gt;&lt;/a&gt;构建一个自定义 angular2 输入组件&lt;/h1&gt;&lt;p&gt;今天我们来学习如何正确的构建和一个具有和 &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; 同样作用，但同时也具有自己的逻辑的输入组件。
    
    </summary>
    
      <category term="JavaScript" scheme="https://heavenru.com/categories/JavaScript/"/>
    
      <category term="angular2.js" scheme="https://heavenru.com/categories/JavaScript/angular2-js/"/>
    
    
      <category term="angular2" scheme="https://heavenru.com/tags/angular2/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue.js构建单页应用</title>
    <link href="https://heavenru.com//post/%E4%BD%BF%E7%94%A8Vue-js%E6%9E%84%E5%BB%BA%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8"/>
    <id>https://heavenru.com//post/使用Vue-js构建单页应用</id>
    <published>2016-07-03T12:56:24.000Z</published>
    <updated>2021-04-06T12:16:57.623Z</updated>
    
    <content type="html"><![CDATA[<p>前言：在最近学习 Vue.js 的时候，看到国外一篇讲述了如何使用 Vue.js 和 Vuex 来构建一个简单笔记的单页应用的文章。感觉收获挺多，自己在它的例子的基础上进行了一些优化和自定义功能，在这里和大家分享下学习心得。<br><span id="more"></span></p><p>原文地址：<a href="https://coligo.io/learn-vuex-by-building-notes-app/">https://coligo.io/learn-vuex-by-building-notes-app/</a></p><p>在这篇教程中我们将通过构建一个笔记应用来学习如何在我们的 Vue 项目中使用 Vuex。我们将大概的过一遍什么是 Vuex.js，在项目中什么时候使用它，和如何构建我们的 Vue 应用。</p><p>这里放一张我们项目的预览图片：<br><img src="/images/vue-notes-app/vue-notes-screenshot.png" alt="效果预览图"></p><p>项目源码：<a href="https://github.com/lichenbuliren/vuex-notes-app">vuex-notes-app</a>；有需要的同学可以直接下载源码查看。</p><h1 id="主要知识点"><a href="#主要知识点" class="headerlink" title="主要知识点"></a>主要知识点</h1><ul><li><a href="https://github.com/vuejs/vuex/blob/master/docs/zh-cn/intro.md">Vuex</a> 状态管理机制的使用</li><li><a href="https://github.com/vuejs/vue/">Vue.js</a> 的基础 api</li><li><a href="https://github.com/vuejs/vue-cli">Vue-cli</a> 脚手架的安装及使用</li><li><a href="https://github.com/vuejs/vue-router">vur-router</a> 的使用</li><li><a href="http://es6.ruanyifeng.com/">ES6</a> 的语法，这里推荐看下阮一峰的入门教程</li></ul><h1 id="Vuex-概述"><a href="#Vuex-概述" class="headerlink" title="Vuex 概述"></a>Vuex 概述</h1><p>在我们迫不及待的开始项目之前，我们最好先花几分钟来了解下 <a href="https://github.com/vuejs/vuex/blob/master/docs/zh-cn/intro.md">Vuex</a>  的核心概念。</p><p>Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。</p><p><code>state</code> 这样概念初次接触的时候可能会感觉到有点模糊，简单来说就是将 <code>state</code> 看成我们项目中使用的数据的集合。然后，Vuex 使得 组件本地状态（component local state）和 应用层级状态(application state) 有了一定的差异</p><ul><li>component local state: 该状态表示仅仅在组件内部使用的状态，有点类似通过配置选项传入 Vue 组件内部的意思。</li><li>application level state: 应用层级状态，表示同时被多个组件共享的状态层级。</li></ul><p>假设有这样一个场景：我们有一个父组件，同时包含两个子组件。父组件可以很容易的通过使用 <code>props</code> 属性来向子组件传递数据。</p><p>但是问题来了，当我们的两个子组件如何和对方互相通信的？ 或者子组件如何传递数据给他父组件的？在我们的项目很小的时候，这个两个问题都不会太难，因为我们可以通过事件派发和监听来完成父组件和子组件的通信。</p><p>然而，随着我们项目的增长：</p><ul><li>保持对所有的事件追踪将变得很困难。到底哪个事件是哪个组件派发的，哪个组件该监听哪个事件？</li><li>项目逻辑分散在各个组件当中，很容易导致逻辑的混乱，不利于我们项目的维护。</li><li>父组件将变得和子组件耦合越来越严重，因为它需要明确的派发和监听子组件的某些事件。</li></ul><p>这就是 Vuex 用来解决的问题。 Vuex 的四个核心概念分别是：</p><ul><li>The state tree：Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。至此它便作为一个『唯一数据源(SSOT)』而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</li><li>Getters:  用来从 store 获取 Vue 组件数据。</li><li>Mutators: 事件处理器用来驱动状态的变化。</li><li>Actions: 可以给组件使用的函数，以此用来驱动事件处理器 mutations</li></ul><p>如何你暂时还不太理解这个四个概念，不用着急，我们将在后面的项目实战中详细的解释。</p><p>下面这张图详细的解释了 Vuex 应用中数据的流向（Vuex 官方图）</p><p><img src="/images/vue-notes-app/vuex.png" alt="Vuex 数据流图"></p><p>简单解释下：</p><p>Vuex 规定，属于应用层级的状态只能通过 Mutation 中的方法来修改，而派发 Mutation 中的事件只能通过 action。</p><p>从左到又，从组件出发，组件中调用 action，在 action 这一层级我们可以和后台数据交互，比如获取初始化的数据源，或者中间数据的过滤等。然后在 action 中去派发 Mutation。Mutation 去触发状态的改变，状态的改变，将触发视图的更新。</p><p><strong>注意事项</strong></p><ul><li>数据流都是单向的</li><li>组件能够调用 action</li><li>action 用来派发 Mutation</li><li>只有 mutation 可以改变状态</li><li>store 是响应式的，无论 state 什么时候更新，组件都将同步更新</li></ul><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>这个应用将使用 <a href="https://webpack.github.io/">webpack</a> 来做模块打包，处理和热重启。使用 Vue 官方提供的脚手架 <a href="https://github.com/vuejs/vue-cli">vue-cli</a>。</p><h3 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 vue-cli</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g vue<span class="token operator">-</span>cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>*Node.js &gt;= 4.x,5.x最好</p><h3 id="初始化应用"><a href="#初始化应用" class="headerlink" title="初始化应用"></a>初始化应用</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vue init webpack vue<span class="token operator">-</span>notes<span class="token operator">-</span>appcd vue<span class="token operator">-</span>notes<span class="token operator">-</span>appnpm install <span class="token comment">// 安装依赖包</span>npm run dev <span class="token comment">// 启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>初始化一个项目名为<code>vue-notes-app</code>的应用，并选择使用 webpack 打包方式。在命令行中按照提示选择初始化配置项。其中在选择 JSLint 校验的时候，推荐选择 <a href="https://github.com/airbnb/javascript">AirBNB</a> 规范。</p><p>使用你最喜欢的编辑器打开我们刚刚新建的项目，项目的结构大概如下图：</p><p><img src="/images/vue-notes-app/project.png" alt="项目结构图"></p><ul><li>components/ 文件夹用来存放我们的 Vue 组件</li><li>vuex/ 文件夹存放的是和 Vuex store 相关的东西（state object，actions，mutators)</li><li>build/ 文件是 webpack 的打包编译配置文件</li><li>config/ 文件夹存放的是一些配置项，比如我们服务器访问的端口配置等</li><li>dist/ 该文件夹一开始是不存在，在我们的项目经过 build 之后才会产出</li><li>App.vue 根组件，所有的子组件都将在这里被引用</li><li>index.html 整个项目的入口文件，将会引用我们的根组件 App.vue</li><li>main.js 入口文件的 js 逻辑，在 webpack 打包之后将被注入到 index.html 中</li></ul><h2 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h2><ul><li>新增笔记，新增一篇笔记，编辑区显示空的笔记内容</li><li>删除笔记，删除一篇笔记之后，编辑区域显示当前笔记类别的第一项</li><li>笔记列表切换，分为全部笔记和收藏笔记两种，在切换之后，编辑区域显示当前列表的第一条笔记</li><li>收藏笔记，给当前激活的笔记打上收藏的标签</li></ul><h2 id="项目组件划分"><a href="#项目组件划分" class="headerlink" title="项目组件划分"></a>项目组件划分</h2><p>在这个项目中，我们将总共使用四个组件：根组件 App.vue，操作栏组件 Toolbar.vue，别表组件 NotesList.vue，笔记编辑组件 Editor.vue。</p><p><img src="/images/vue-notes-app/components.png" alt="组件划分图"></p><h3 id="创建-Vuex-Store"><a href="#创建-Vuex-Store" class="headerlink" title="创建 Vuex Store"></a>创建 Vuex Store</h3><p>按照上面我们列出来的功能模块，我们在 Vuex/ 下面建立一个 store.js 文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 需要维护的状态</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  notes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  activeNote<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  show<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化 state</span>  <span class="token constant">INIT_STORE</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>notes <span class="token operator">=</span> data<span class="token punctuation">.</span>notes<span class="token punctuation">,</span>    state<span class="token punctuation">.</span>show <span class="token operator">=</span> data<span class="token punctuation">.</span>show<span class="token punctuation">;</span>    state<span class="token punctuation">.</span>activeNote <span class="token operator">=</span> data<span class="token punctuation">.</span>activeNote<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 新增笔记</span>  <span class="token constant">NEW_NOTE</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> newNote <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      id<span class="token operator">:</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      title<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      content<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      favorite<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    state<span class="token punctuation">.</span>notes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newNote<span class="token punctuation">)</span><span class="token punctuation">;</span>    state<span class="token punctuation">.</span>activeNote <span class="token operator">=</span> newNote<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 修改笔记</span>  <span class="token constant">EDIT_NOTE</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> note</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>activeNote <span class="token operator">=</span> note<span class="token punctuation">;</span>    <span class="token comment">// 修改原始数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>notes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>notes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">===</span> note<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        state<span class="token punctuation">.</span>notes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> note<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 删除笔记</span>  <span class="token constant">DELETE_NOTE</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>notes<span class="token punctuation">.</span><span class="token function">$remove</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>activeNote<span class="token punctuation">)</span><span class="token punctuation">;</span>    state<span class="token punctuation">.</span>activeNote <span class="token operator">=</span> state<span class="token punctuation">.</span>notes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 切换笔记的收藏与取消收藏</span>  <span class="token constant">TOGGLE_FAVORITE</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>activeNote<span class="token punctuation">.</span>favorite <span class="token operator">=</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>activeNote<span class="token punctuation">.</span>favorite<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 切换显示数据列表类型：全部 or 收藏</span>  <span class="token constant">SET_SHOW_ALL</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> show</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>show <span class="token operator">=</span> show<span class="token punctuation">;</span>    <span class="token comment">// 切换数据展示，需要同步更新 activeNote</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>show <span class="token operator">===</span> <span class="token string">'favorite'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>activeNote <span class="token operator">=</span> state<span class="token punctuation">.</span>notes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">note</span> <span class="token operator">=></span> note<span class="token punctuation">.</span>favorite<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>activeNote <span class="token operator">=</span> state<span class="token punctuation">.</span>notes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 设置当前激活的笔记</span>  <span class="token constant">SET_ACTIVE_NOTE</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> note</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>activeNote <span class="token operator">=</span> note<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  state<span class="token punctuation">,</span>  mutations<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建-Vuex-Actions"><a href="#创建-Vuex-Actions" class="headerlink" title="创建 Vuex Actions"></a>创建 Vuex Actions</h3><p>在 Vuex/ 下面建立一个 action.js，用来给组件使用的函数<br><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeAction</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> dispatch <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> initNote <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  title<span class="token operator">:</span> <span class="token string">'我的笔记'</span><span class="token punctuation">,</span>  content<span class="token operator">:</span> <span class="token string">'第一篇笔记内容'</span><span class="token punctuation">,</span>  favorite<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 模拟初始化数据</span><span class="token keyword">const</span> initData <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  show<span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>  notes<span class="token operator">:</span> <span class="token punctuation">[</span>initNote<span class="token punctuation">]</span><span class="token punctuation">,</span>  activeNote<span class="token operator">:</span> initNote<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">initStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> dispatch <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'INIT_STORE'</span><span class="token punctuation">,</span> initData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 更新当前activeNote对象</span><span class="token keyword">export</span> <span class="token keyword">const</span> updateActiveNote <span class="token operator">=</span> <span class="token function">makeAction</span><span class="token punctuation">(</span><span class="token string">'SET_ACTIVE_NOTE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加一个note对象</span><span class="token keyword">export</span> <span class="token keyword">const</span> newNote <span class="token operator">=</span> <span class="token function">makeAction</span><span class="token punctuation">(</span><span class="token string">'NEW_NOTE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除一个note对象</span><span class="token keyword">export</span> <span class="token keyword">const</span> deleteNote <span class="token operator">=</span> <span class="token function">makeAction</span><span class="token punctuation">(</span><span class="token string">'DELETE_NOTE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> toggleFavorite <span class="token operator">=</span> <span class="token function">makeAction</span><span class="token punctuation">(</span><span class="token string">'TOGGLE_FAVORITE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> editNote <span class="token operator">=</span> <span class="token function">makeAction</span><span class="token punctuation">(</span><span class="token string">'EDIT_NOTE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 更新列表展示</span><span class="token keyword">export</span> <span class="token keyword">const</span> updateShow <span class="token operator">=</span> <span class="token function">makeAction</span><span class="token punctuation">(</span><span class="token string">'SET_SHOW_ALL'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="创建-Vuex-Getters"><a href="#创建-Vuex-Getters" class="headerlink" title="创建 Vuex Getters"></a>创建 Vuex Getters</h3><p>在 vuex/ 下面建立一个 getter.js 文件，用来从 store 获取数据<br><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取 noteList,这里将会根据 state.show 的状态做数据过滤</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">filteredNotes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>show <span class="token operator">===</span> <span class="token string">'all'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>notes <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>show <span class="token operator">===</span> <span class="token string">'favorite'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>notes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">note</span> <span class="token operator">=></span> note<span class="token punctuation">.</span>favorite<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 获取列表展示状态 ： all or favorite</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> state<span class="token punctuation">.</span>show<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 获取当前激活 note</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">activeNote</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> state<span class="token punctuation">.</span>activeNote<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>以上就是我们 Vuex 的所有逻辑了，在定下了我们需要完成的功能之后，接下来就是只需要在组件中去调用 action 来实现对应的功能了。</p><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><p>在这里我们将使用 vue-router 来做路由，引用 bootstrap 样式。</p><p><strong>index.html</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>vuex-notes-app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- built files will be auto injected --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的入口逻辑我们都将在 main.js 中编写</p><p><strong>main.js</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueResource <span class="token keyword">from</span> <span class="token string">'vue-resource'</span><span class="token punctuation">;</span><span class="token comment">// 路由模块和HTTP模块</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueResource<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string">'/index'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    component<span class="token operator">:</span> App  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string">'*'</span><span class="token operator">:</span> <span class="token string">'/index'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="根组件-App-vue"><a href="#根组件-App-vue" class="headerlink" title="根组件 App.vue"></a>根组件 App.vue</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>toolbar</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>toolbar</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>notes-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>notes-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>editor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>editor</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">html, #app</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">max-height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> Toolbar <span class="token keyword">from</span> <span class="token string">'./components/Toolbar'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> NotesList <span class="token keyword">from</span> <span class="token string">'./components/NotesList'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> Editor <span class="token keyword">from</span> <span class="token string">'./components/Editor'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./vuex/store'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> initStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./vuex/actions'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      Toolbar<span class="token punctuation">,</span>      NotesList<span class="token punctuation">,</span>      Editor    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    store<span class="token punctuation">,</span>    vuex<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        initStore      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在根组件中引用了三个子组件：Toolbar.vue, NotesList.vue, Editor.vue。</p><p>注意：我们在配置里面加入了 <code>vuex</code> 这么一个选项，这里用来将我们 action 里面定义的方法给暴露出来，我们在根组件中只做了一件事情，那就是初始化模拟数据，因此我们在组件生命周期的 ready 阶段调用了 actions 里面的 initStore 来初始化我们的 store 里面的 state</p><h3 id="Toolbar-vue"><a href="#Toolbar-vue" class="headerlink" title="Toolbar.vue"></a>Toolbar.vue</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toolbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>glyphicon logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../assets/logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newNote<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>glyphicon glyphicon-plus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggleFavorite<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>glyphicon glyphicon-star<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;starred: activeNote.favorite&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteNote<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>glyphicon glyphicon-remove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> newNote<span class="token punctuation">,</span> deleteNote<span class="token punctuation">,</span> toggleFavorite <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../vuex/actions'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> activeNote <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../vuex/getters'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  vuex<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      activeNote    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      newNote<span class="token punctuation">,</span>      deleteNote<span class="token punctuation">,</span>      toggleFavorite    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#toolbar</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #30414D<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #767676<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 35px 25px 25px 25px<span class="token selector">;    .starred</span> <span class="token punctuation">&#123;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #F7AE4F<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">i</span><span class="token punctuation">&#123;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span>      <span class="token property">transition</span><span class="token punctuation">:</span> opacity 0.5s ease<span class="token selector">;      &amp;:hover</span><span class="token punctuation">&#123;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们用到了 Vuex 的一个案例就是我们需要知道当前的激活的笔记是否是收藏类别的，如果是，我们需要高亮收藏按钮，那么如何知道呢？那就是通过 vuex 里面的 getters 获取当前激活的笔记对象，判断它的 favorite 是否为 true。</p><p>始终牢记一个概念，vuex 中数据是单向的，只能从 store 获取，而我们这个例子中的 activeNote 也是始终都在 store.js 中维护的，这样子就可以给其他组件公用了<br><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 需要维护的状态</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  notes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  activeNote<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  show<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="NotesList-vue"><a href="#NotesList-vue" class="headerlink" title="NotesList.vue"></a>NotesList.vue</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>notes-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Notes | heavenru.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-group btn-group-justified<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- all --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-group<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span>            <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggleShow(<span class="token punctuation">'</span>all<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span>            <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;active: show === <span class="token punctuation">'</span>all<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>All Notes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- favorites --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-group<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span>            <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggleShow(<span class="token punctuation">'</span>favorite<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span>            <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;active: show === <span class="token punctuation">'</span>favorite<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Favorites<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 渲染笔记列表 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>note in filteredNotes<span class="token punctuation">"</span></span>         <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span>         <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;active: activeNote === note&#125;<span class="token punctuation">"</span></span>         <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateActiveNote(note)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123;note.title.trim().substring(0,30)&#125;&#125;          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> updateActiveNote<span class="token punctuation">,</span> updateShow <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../vuex/actions'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> show<span class="token punctuation">,</span> filteredNotes<span class="token punctuation">,</span> activeNote <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../vuex/getters'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    vuex<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        show<span class="token punctuation">,</span>        filteredNotes<span class="token punctuation">,</span>        activeNote      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        updateActiveNote<span class="token punctuation">,</span>        updateShow      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">toggleShow</span><span class="token punctuation">(</span><span class="token parameter">show</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateShow</span><span class="token punctuation">(</span>show<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>笔记列表组件，主要有三个操作</p><ul><li>渲染笔记</li><li>切换渲染笔记</li><li>点击列表 title，切换 activeNote</li></ul><p>我们通过 getters 中的 filteredNotes 方法获取笔记列表</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取 noteList,这里将会根据 state.show 的状态做数据过滤</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">filteredNotes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>show <span class="token operator">===</span> <span class="token string">'all'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>notes <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>show <span class="token operator">===</span> <span class="token string">'favorite'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>notes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">note</span> <span class="token operator">=></span> note<span class="token punctuation">.</span>favorite<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，我们获取的列表是依赖于 state.show 这个状态的。而我们的切换列表操作恰好就是调用 actions 里面的方法来更新 state.show ，这样一来，实现了数据列表的动态刷新，而且我们对树的操作都是通过调用 actions 的方法来实现的。</p><p>我们再看，在切换列表的时候，我们还需要动态的更新 activeNote 。 看看我们在 store.js 中是如何做的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 切换显示数据列表类型：全部 or 收藏</span><span class="token constant">SET_SHOW_ALL</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> show</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  state<span class="token punctuation">.</span>show <span class="token operator">=</span> show<span class="token punctuation">;</span>  <span class="token comment">// 切换数据展示，需要同步更新 activeNote</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>show <span class="token operator">===</span> <span class="token string">'favorite'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>activeNote <span class="token operator">=</span> state<span class="token punctuation">.</span>notes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">note</span> <span class="token operator">=></span> note<span class="token punctuation">.</span>favorite<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>activeNote <span class="token operator">=</span> state<span class="token punctuation">.</span>notes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>触发这些操作的是我们给两个按钮分别绑定了我们自定义的函数，通过给函数传入不同的参数，然后调用 actions 里面的方法，来实现对数据的过滤，更新。</p><h3 id="Editor-vue"><a href="#Editor-vue" class="headerlink" title="Editor.vue"></a>Editor.vue</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>note-editor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title form-control<span class="token punctuation">"</span></span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入标题<span class="token punctuation">"</span></span>        <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateNote<span class="token punctuation">"</span></span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentNote.title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentNote.content<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">row</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入正文<span class="token punctuation">"</span></span>        <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateNote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> editNote <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../vuex/actions'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> activeNote <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../vuex/getters'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    vuex<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        activeNote      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        editNote      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 通过计算属性得到的一个对象，这样子我们就能愉快的使用 v-model 了</span>      currentNote<span class="token operator">:</span> activeNote    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 为什么这么做？ 因为在严格模式中不允许直接在模板层面去修改 state 中的值</span>      <span class="token function">updateNote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">editNote</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentNote<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Editor.vue 组件中，我们需要能够实时的更新当前的 activeNote 组件和列表中对应的我们正在修改的笔记对象的内容。</p><p>由于我们前面提到过，在组件中是不允许直接修改 store.js在里面的状态值的，所以在这里的时候，我们通过一个计算属性，将 store 里面的状态值赋值给一个对象，然后在自定义的 updateNotes() 方法中，去调用 action,同时传入 currentNote 对象。</p><p>在 store.js 中，我们是这么做的，找到对应的 id 的对象，重新赋值，因为前面提到过，我们的数据是响应式的，在这里进行了改变，对应的视图也将刷新改变，这样一来就实现了实时编辑，实时渲染的功能了。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 修改笔记</span><span class="token constant">EDIT_NOTE</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> note</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  state<span class="token punctuation">.</span>activeNote <span class="token operator">=</span> note<span class="token punctuation">;</span>  <span class="token comment">// 修改原始数据</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>notes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>notes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">===</span> note<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>notes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> note<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>在这个项目中，我们并没有引入 vue-resource 插件，只是自己模拟了部分的数据，有兴趣的同学可以自己去试试。</p><p>由于我们的例子相对简单，没有涉及到很深入的东西，更深层次的研究需要大家花更多的时间去实践了。</p><p>最后，再说一句，在 action 里面，我们其实可以做的还有更多，比如根据 id 动态的异步获取笔记内容等等，这些有兴趣的同学可以自己去尝试，一点点的丰富这个例子。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：在最近学习 Vue.js 的时候，看到国外一篇讲述了如何使用 Vue.js 和 Vuex 来构建一个简单笔记的单页应用的文章。感觉收获挺多，自己在它的例子的基础上进行了一些优化和自定义功能，在这里和大家分享下学习心得。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://heavenru.com/categories/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://heavenru.com/categories/JavaScript/Vue-js/"/>
    
    
      <category term="vue" scheme="https://heavenru.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>文件异步上传-下篇</title>
    <link href="https://heavenru.com//post/%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0-%E4%B8%8B%E7%AF%87"/>
    <id>https://heavenru.com//post/文件异步上传-下篇</id>
    <published>2016-05-17T06:43:07.000Z</published>
    <updated>2021-04-06T12:17:17.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>上一篇主要讲了文件异步上传的前端相关的东西，在这篇文章里面，我们主要讲解写使用<code>koa</code>框架来搭建一个简单的处理文件上传的<code>node</code>后台项目。<br><span id="more"></span></p><p>在这里我不会仔细的讲解每个模块中间件的具体使用方法，文章中提到的模块我都会给出链接，有需要的可以自己去看官方的API学习。</p><h3 id="主要功能模块"><a href="#主要功能模块" class="headerlink" title="主要功能模块"></a>主要功能模块</h3><ul><li><a href="https://github.com/alexmingoia/koa-router">koa-router</a> 抽取路由到单独的模块</li><li><a href="https://github.com/koajs/static">koa-static</a> 静态文件服务中间件模块</li><li><a href="https://github.com/cojs/busboy">koa-busboy</a> 文件域处理模块</li></ul><h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> routers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-logger'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> staticServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-static'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注册中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">staticServer</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自定义路由</span><span class="token function">routers</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听 3000 端口 </span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>ctx</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的 routers 为我们自己定义的路由模块，在这个模块里面，我们将配置整个项目的所有路由；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 配置静态文件目录</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">staticServer</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在配置了静态文件目录之后，我们在 <code>HTML</code> 文件里面就可以像下面这样引用了</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>HTML5 File Upload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主要逻辑代码：routers-index-js"><a href="#主要逻辑代码：routers-index-js" class="headerlink" title="主要逻辑代码：routers/index.js"></a>主要逻辑代码：routers/index.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> mime <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mime'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> render <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../lib/render.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 文件上传操作</span><span class="token keyword">var</span> parse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'co-busboy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 定义路由</span>    router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'upload'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>            title<span class="token operator">:</span> <span class="token string">'HTML5 File Upload'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token operator">*</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> parts <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> part<span class="token punctuation">;</span>        <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">,</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>part <span class="token operator">=</span> <span class="token keyword">yield</span> parts<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> stream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'../public/images'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> part<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 这里将 end 设置成 false,然后才能自定义 end 监听事件</span>            part<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>end<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 监听文件流写入完成事件，当 count == 文件个数的时候，表明文件全部上传完毕</span>            part<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> parts<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    _this<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                        <span class="token string">"status"</span> <span class="token operator">:</span> <span class="token number">200</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'uploading %s -> %s'</span><span class="token punctuation">,</span> part<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> stream<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注册路由</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们主要是<code>co-busboy</code> 模块来处理文件域的操作，在拦截到文件表单之后，我们创建了一个科协的流：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'../public/images'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> part<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后通过 <code>part.pipe(stream,&#123;end: false&#125;)</code> 方式写入文件</p><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>基本上的流程大致如此了，过程讲解的不是详细，有什么问题，可以通过下方的联系方式联系我，大家一起学习，一起进步！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;上一篇主要讲了文件异步上传的前端相关的东西，在这篇文章里面，我们主要讲解写使用&lt;code&gt;koa&lt;/code&gt;框架来搭建一个简单的处理文件上传的&lt;code&gt;node&lt;/code&gt;后台项目。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://heavenru.com/categories/JavaScript/"/>
    
      <category term="nodejs" scheme="https://heavenru.com/categories/JavaScript/nodejs/"/>
    
    
      <category term="HTML5" scheme="https://heavenru.com/tags/HTML5/"/>
    
      <category term="File Upload" scheme="https://heavenru.com/tags/File-Upload/"/>
    
      <category term="ajax" scheme="https://heavenru.com/tags/ajax/"/>
    
      <category term="nodejs" scheme="https://heavenru.com/tags/nodejs/"/>
    
      <category term="koa" scheme="https://heavenru.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>文件异步上传-上篇</title>
    <link href="https://heavenru.com//post/%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0-%E4%B8%8A%E7%AF%87"/>
    <id>https://heavenru.com//post/文件异步上传-上篇</id>
    <published>2016-05-12T08:43:36.000Z</published>
    <updated>2021-04-06T12:17:14.938Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><p>在这篇文章的里面和大家分享下 HTML5 的文件上传操作，后台是我用 <code>nodejs</code> 的<code>koa</code>框架搭建的一个Demo，所在在这篇文章里面，我也会顺带讲讲如何用<code>koa</code>搭建一个简单的node后台。</p><h3 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h3><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">FileReader</a> 用来实现图片预览、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData">FormData</a> 用来实现文件异步上传操作</li><li>koa 框架的简单使用</li><li>利用 FormData 实现文件异步上传操作</li></ol><span id="more"></span><h3 id="前端主要代码"><a href="#前端主要代码" class="headerlink" title="前端主要代码"></a>前端主要代码</h3><h4 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h4><p>原理：利用<code>FileReader</code>对象的<code>readAsDataURL</code>方法，我们可以得到一个图片文件的<code>base64</code>位的编码格式，然后讲得到的数据赋值给<code>img</code>对象的<code>src</code>属性，就能实现预览操作了，其中的<code>base64</code>数据通过<code>FileReader</code>的实例对象的<code>onload</code>之后得到的<code>event.target.result</code>就是我们需要的数据了。</p><p>图片文佳不宜过大，不然转成<code>base64</code>之后数据量太大，前端可以做适当的约束。通过原生<code>Dom</code>的<code>files</code>属性，我们可以得到用户选择的文件列表，是一个数组形式。通过<code>file.type</code>、<code>file.size</code>分别可以得到文件类型和文件的大小。</p><p><em>注意：监听<code>reader</code>的<code>load</code>事件需要在<code>reader.readAsDataURL()</code>之前</em></p><p>主要代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 监听文件域的 'change' 事件</span>$fileChooses<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token string">'.input-file'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> $<span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> $fileChoose <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">'.file-choose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> $thumb <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'.thumb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// HTML5 FileReader 对象</span>    <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// inject an image with the src url</span>    reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        $thumb<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        $fileChoose<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'file-choose-loaded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> $fileChooses<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $submit<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 过滤图片文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'image.*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请选择图片类型文件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $submit<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断文件大小，限制小于 1MB</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token operator">></span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'上传文件不能大于 1MB 或者 1024kb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $submit<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 读取文件预览</span>    reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清除图片预览"><a href="#清除图片预览" class="headerlink" title="清除图片预览"></a>清除图片预览</h4><p>看代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 关闭按钮</span>$fileChooses<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'.icon-delete'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 清除 .loaded 类，清空 .thumb 的src</span>  <span class="token keyword">var</span> $<span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      $fileChoose <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">'.file-choose'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      $file <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'.input-file'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      $thumb <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'.thumb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  $fileChoose<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'file-choose-loaded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  $submit<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 清除预览数据</span>  $thumb<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  count<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">// 这是可能出现兼容性问题，如果不将这里清空，</span>  <span class="token comment">// 下一次选择图片如果选择相同的将无法触发 change 事件</span>  $file<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="核心部分，文件上传"><a href="#核心部分，文件上传" class="headerlink" title="核心部分，文件上传"></a>核心部分，文件上传</h4><p>使用<code>FormData</code>有两种方式，一种是直接通过<code>FormData.append()</code>方法添加文件域，另外一种是直接使用现有的<code>form</code>表单当做构造参数实例化一个<code>FormData</code>对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$submit<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 方式1：用 formData 的形式提交</span>    <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'uploadify1'</span><span class="token punctuation">,</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.input-file'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'uploadify2'</span><span class="token punctuation">,</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.input-file'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 方式二：表单序列化</span>    <span class="token comment">// var formData = new FormData($form[0]);</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ajaxStatus<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    ajaxStatus <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 表单提交</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        url<span class="token operator">:</span> <span class="token string">'/upload'</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> formData<span class="token punctuation">,</span>        <span class="token comment">// 这两项必填，作为文件上传的时候</span>        contentType<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        processData<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'上传成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">always</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ajaxStatus <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"complete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码地址：<a href="https://github.com/lichenbuliren/html5-file-upload">https://github.com/lichenbuliren/html5-file-upload</a></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>到这里前端的基本代码都介绍完了，在下一章里面将会介绍和后端配合来实现文件的保存与请求响应操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h3&gt;&lt;p&gt;在这篇文章的里面和大家分享下 HTML5 的文件上传操作，后台是我用 &lt;code&gt;nodejs&lt;/code&gt; 的&lt;code&gt;koa&lt;/code&gt;框架搭建的一个Demo，所在在这篇文章里面，我也会顺带讲讲如何用&lt;code&gt;koa&lt;/code&gt;搭建一个简单的node后台。&lt;/p&gt;
&lt;h3 id=&quot;技术要点&quot;&gt;&lt;a href=&quot;#技术要点&quot; class=&quot;headerlink&quot; title=&quot;技术要点&quot;&gt;&lt;/a&gt;技术要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader&quot;&gt;FileReader&lt;/a&gt; 用来实现图片预览、&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/FormData&quot;&gt;FormData&lt;/a&gt; 用来实现文件异步上传操作&lt;/li&gt;
&lt;li&gt;koa 框架的简单使用&lt;/li&gt;
&lt;li&gt;利用 FormData 实现文件异步上传操作&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://heavenru.com/categories/JavaScript/"/>
    
      <category term="nodejs" scheme="https://heavenru.com/categories/JavaScript/nodejs/"/>
    
    
      <category term="HTML5" scheme="https://heavenru.com/tags/HTML5/"/>
    
      <category term="File Upload" scheme="https://heavenru.com/tags/File-Upload/"/>
    
      <category term="ajax" scheme="https://heavenru.com/tags/ajax/"/>
    
      <category term="nodejs" scheme="https://heavenru.com/tags/nodejs/"/>
    
      <category term="koa" scheme="https://heavenru.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>React 入门实践小结</title>
    <link href="https://heavenru.com//post/React-%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E5%B0%8F%E7%BB%93"/>
    <id>https://heavenru.com//post/React-入门实践小结</id>
    <published>2015-12-04T11:59:16.000Z</published>
    <updated>2021-04-06T12:16:16.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-入门练习实践总结"><a href="#React-入门练习实践总结" class="headerlink" title="React 入门练习实践总结"></a>React 入门练习实践总结</h2><span id="more"></span><h3 id="1、模板使用"><a href="#1、模板使用" class="headerlink" title="1、模板使用"></a>1、模板使用</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../lib/react.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../lib/react-dom.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../lib/browser.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>react-demo06<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、JSX-语法"><a href="#2、JSX-语法" class="headerlink" title="2、JSX 语法"></a>2、JSX 语法</h3><p>遇到 <code>HTML</code> 标签（以 &lt; 开头），就用 <code>HTML</code> 规则解析；遇到代码块（以 { 开头），就用 <code>JavaScript</code> 规则解析。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span><span class="token string">'Emily'</span><span class="token punctuation">,</span><span class="token string">'Kate'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">&#123;</span>        names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span><span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、自定义组件写法"><a href="#3、自定义组件写法" class="headerlink" title="3、自定义组件写法"></a>3、自定义组件写法</h3><p><code>React</code> 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。React.createClass 方法就用于生成一个组件类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> HelloMessage <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>HelloMessage name<span class="token operator">=</span><span class="token string">"Heaven"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、this-props-children"><a href="#4、this-props-children" class="headerlink" title="4、this.props.children"></a>4、this.props.children</h3><p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。它表示组件的所有子节点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> NotesList <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>ol<span class="token operator">></span>            <span class="token punctuation">&#123;</span>                React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>child<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>NotesList<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>world<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>NotesList<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、PropTypes"><a href="#5、PropTypes" class="headerlink" title="5、PropTypes"></a>5、PropTypes</h3><p>组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。组件类的 PropTypes 属性，就是用来验证组件实例的属性是否符合要求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> MyTitle <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 设置默认属性</span>    <span class="token function-variable function">getDefaultProps</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            title<span class="token operator">:</span> <span class="token string">'Hello world'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    propTypes<span class="token operator">:</span><span class="token punctuation">&#123;</span>        title<span class="token operator">:</span> React<span class="token punctuation">.</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// var data = 124; 用数子会有报错，title属性为必须的且是string类型</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>MyTitle<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、获取真实的-DOM-节点"><a href="#6、获取真实的-DOM-节点" class="headerlink" title="6、获取真实的 DOM 节点"></a>6、获取真实的 DOM 节点</h3><p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 ref 属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">handleClick</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>myTextInput<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token string">"myTextInput"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"Focus the text input"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>MyComponent<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，组件 MyComponent 的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，文本输入框必须有一个 ref 属性，然后 this.refs.[refName] 就会返回这个真实的 DOM 节点。<br>需要注意的是，由于 this.refs.[refName] 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。上面代码中，通过为组件指定 Click 事件的回调函数，确保了只有等到真实 DOM 发生 Click 事件之后，才会读取 this.refs.[refName] 属性。</p><h3 id="7、this-state"><a href="#7、this-state" class="headerlink" title="7、this.state"></a>7、this.state</h3><p>组件免不了要与用户互动，React 的一大创新，就是将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> LikeButton <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">getInitialState</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>liked<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">handleClick</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>liked<span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>liked<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>liked <span class="token operator">?</span> <span class="token string">'like'</span><span class="token operator">:</span> <span class="token string">'haven\'t liked'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>            You <span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span> <span class="token keyword">this</span><span class="token punctuation">.</span> Click to toggle<span class="token punctuation">.</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>LikeButton <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码是一个 LikeButton 组件，它的 getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。<br>由于 this.props 和 this.state 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。</p><h3 id="8、表单"><a href="#8、表单" class="headerlink" title="8、表单"></a>8、表单</h3><p>用户在表单填入的内容，属于用户跟组件的互动，所以不能用 this.props 读取</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Input <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">getInitialState</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>value<span class="token operator">:</span> <span class="token string">'Hello!'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">handleChange</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>value<span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，文本输入框的值，不能用 this.props.value 读取，而要定义一个 onChange 事件的回调函数，通过 event.target.value 读取用户输入的值。textarea 元素、select元素、radio元素都属于这种情况。</p><h3 id="9、组件的生命周期"><a href="#9、组件的生命周期" class="headerlink" title="9、组件的生命周期"></a>9、组件的生命周期</h3><p>组件的生命周期分成三个状态：</p><ul><li>Mounting: 已插入真实 DOM</li><li>Updating：正在被重新渲染</li><li>Unmounting：已移除真实 DOM</li></ul><p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。</p><ul><li>componentWillMount()</li><li>componentDidMount()</li><li>componentWillUpdate(object nextProps, object nextState)</li><li>componentDidUpdate(object prevProps, object prevState)</li><li>componentWillUnmount()</li></ul><p>此外，React 还提供两种特殊状态的处理函数。</p><ul><li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li><li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Hello <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">getInitialState</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            opacity<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>            direction<span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">componentDidMount</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> opacity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>opacity<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>direction<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                opacity <span class="token operator">-=</span> <span class="token number">0.02</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                opacity <span class="token operator">+=</span> <span class="token number">0.02</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>opacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>direction <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>opacity <span class="token operator">>=</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>direction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                opacity<span class="token operator">:</span> opacity            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>opacity<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>opacity<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>                Hello <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Hello name<span class="token operator">=</span><span class="token string">"world"</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码在 Hello 组件加载以后，通过 componentDidMount 方法设置一个定时器，每隔 100 毫秒，就重新设置组件的透明度，从而引发重新渲染。同时设置了一个方向变量来决定 opacity 是增加还是减少。</p><p>另外，组件的 <code>style</code> 属性的设置方式也值得注意，不能写成<br><pre class="line-numbers language-css" data-language="css"><code class="language-css">style=<span class="token string">"opacity: this.state.opacity"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>而要写成</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>opacity<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>opacity<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是因为 <a href="https://facebook.github.io/react/tips/inline-styles.html">React 组件样式</a>  是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。</p><h3 id="10、Ajax"><a href="#10、Ajax" class="headerlink" title="10、Ajax"></a>10、Ajax</h3><p>组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用前面提到的 <code>componentDidMount</code>  方法设置 <code>Ajax</code> 请求，等到请求成功，再用 <code>this.setState</code> 方法重新渲染 UI。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> UserGist <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">getInitialState</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            username<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            lastGistUrl<span class="token operator">:</span> <span class="token string">''</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">componentDidMount</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>source<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> lastGist <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isMounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    username<span class="token operator">:</span> lastGist<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>login<span class="token punctuation">,</span>                    lastGistUrl<span class="token operator">:</span> lastGist<span class="token punctuation">.</span>html_url                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>               <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">&#125;</span> last gist is               <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lastGistUrl<span class="token punctuation">&#125;</span><span class="token operator">></span>here<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">.</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>UserGist source<span class="token operator">=</span><span class="token string">"https://api.github.com/users/octocat/gists"</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React-入门练习实践总结&quot;&gt;&lt;a href=&quot;#React-入门练习实践总结&quot; class=&quot;headerlink&quot; title=&quot;React 入门练习实践总结&quot;&gt;&lt;/a&gt;React 入门练习实践总结&lt;/h2&gt;
    
    </summary>
    
      <category term="React" scheme="https://heavenru.com/categories/React/"/>
    
    
      <category term="javascript" scheme="https://heavenru.com/tags/javascript/"/>
    
      <category term="react" scheme="https://heavenru.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks 本地配置</title>
    <link href="https://heavenru.com//post/Shadowsocks-%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE"/>
    <id>https://heavenru.com//post/Shadowsocks-本地配置</id>
    <published>2015-12-01T11:37:34.000Z</published>
    <updated>2021-04-06T12:16:28.063Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇「挣脱牢笼之搭建 VPN」，我们已经购买了虚拟服务器，并且在上面开启了 「Shadowsocks」服务。</p><h3 id="本地「Shadowsocks」配置"><a href="#本地「Shadowsocks」配置" class="headerlink" title="本地「Shadowsocks」配置"></a>本地「Shadowsocks」配置</h3><p>打开我们已经安装的 「Shadowsocks」软件，点击小飞机图标，选择 <code>Servers-&gt;Open Server Preferences</code>，出现如下界面；</p><p><img src="/images/preferences.png" alt=""></p><ul><li>Address: 我们的虚拟服务器（VPS）地址 + 端口</li><li>Encryption: 服务器中开启的加密方式</li><li>Password: 密码</li><li>Remarks: 描述，取个别名</li></ul><span id="more"></span><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ssserver -p <span class="token number">443</span> -k password -m aes-256-cfb --user nobody -d start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如上代码：其中 <code>-k password</code> 中的 <code>password</code> 就是我们自己设置的访问密码，你可以修改为你自己喜欢常用的密码都OK；<code>-m aes-256-cfb</code> 表示的就是我们使用那种加密方式，这里我们不做深究，只要本地配置和服务器一样就可以了；</p><h3 id="配置拦截路由表"><a href="#配置拦截路由表" class="headerlink" title="配置拦截路由表"></a>配置拦截路由表</h3><p>我们知道，在访问国内网络的时候，是不需要使用我们自己的 VPN，那样子反而会更慢，所以我们需要一份配置文件，来告诉 「Shadowsocks」什么时候需要使用到 VPN，幸好，「Shadowsocks」已经给我们提供了这个一个功能，打开我们的小飞机图标也就是应用图片，找打菜单选项里面的 <code>Update PAC from GFWList</code> 来自动获取路由表，在提示 <code>update</code> 成功之后，再选择 <code>Audo Proxy Mode</code> 就能智能的访问那些被「qiang」的网站了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇「挣脱牢笼之搭建 VPN」，我们已经购买了虚拟服务器，并且在上面开启了 「Shadowsocks」服务。&lt;/p&gt;
&lt;h3 id=&quot;本地「Shadowsocks」配置&quot;&gt;&lt;a href=&quot;#本地「Shadowsocks」配置&quot; class=&quot;headerlink&quot; title=&quot;本地「Shadowsocks」配置&quot;&gt;&lt;/a&gt;本地「Shadowsocks」配置&lt;/h3&gt;&lt;p&gt;打开我们已经安装的 「Shadowsocks」软件，点击小飞机图标，选择 &lt;code&gt;Servers-&amp;gt;Open Server Preferences&lt;/code&gt;，出现如下界面；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/preferences.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Address: 我们的虚拟服务器（VPS）地址 + 端口&lt;/li&gt;
&lt;li&gt;Encryption: 服务器中开启的加密方式&lt;/li&gt;
&lt;li&gt;Password: 密码&lt;/li&gt;
&lt;li&gt;Remarks: 描述，取个别名&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="服务器" scheme="https://heavenru.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="VPS" scheme="https://heavenru.com/tags/VPS/"/>
    
      <category term="VPN" scheme="https://heavenru.com/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>挣脱牢笼之搭建 VPN</title>
    <link href="https://heavenru.com//post/%E6%8C%A3%E8%84%B1%E7%89%A2%E7%AC%BC%E4%B9%8B%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8B%20VPN"/>
    <id>https://heavenru.com//post/挣脱牢笼之搭建远程 VPN</id>
    <published>2015-11-27T11:54:17.000Z</published>
    <updated>2021-04-06T12:17:07.694Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/title-bg.png" width="100%"></p><p>为何会想到要翻个墙(为了被河蟹)，作为一个非著名、专业程序员，时常需要查找一下技术方面的资料；一般情况下可能会想到使用「百度」这个坑爹的搜索引擎去查资料。但是结果你会发现找的一堆的什么鬼东西，跟自己搜索的没有半毛钱关系。大多数是带有广告性质的博客或者纯粹的广告商排在最前面，恶心至极。<span id="more"></span></p><p>值得庆幸的是，不是所有的搜索引擎都和百度一样，那就是国外的「<a href="https://www.google.com">Google</a>」搜索引擎；送给各位同行的程序员们 「珍爱生命，远离百度」。</p><p>在 2010年3月23日，「Google」高级副总裁大卫·德拉蒙德公开发表声明，宣布将搜索服务由中国内地转至香港。至此，我们就犹如笼中之鸟一样，失去了与外界直接交流。所以想要使用 「Google」搜索服务只能通过其他办法了，也就是我们常说 「fangqiang」。</p><h2 id="搭建服务器-——-购买国外-VPS"><a href="#搭建服务器-——-购买国外-VPS" class="headerlink" title="搭建服务器 —— 购买国外 VPS"></a>搭建服务器 —— 购买国外 VPS</h2><p>VPS：虚拟服务器,虚拟专用服务器(Virtual Private Server),虚拟专属主机。</p><p>这里不要问我哪个 VPS 服务商最好，好不好要自己试过了才知道，这里我就以我自己使用的国外 VPS <a href="https://www.vultr.com/">Vultr</a> 为例。</p><h3 id="注册-Vultr"><a href="#注册-Vultr" class="headerlink" title="注册 Vultr"></a>注册 <strong>Vultr</strong></h3><p><img src="/images/regedit.png" width="100%"> </p><p>上图忘记提的一个就是 <strong>Security Code</strong> 也就是所谓的安全码，是我们信用卡背面的写在最后的那个三位数。</p><p>这里的信用卡只要你的信用卡上面有 <strong>VISA</strong>字样的就能够使用。我自己用的招行的信用卡，可以很方便的使用扣款，有一点就是，在你设置了信用卡之后，以后的付款行为都不需要再输入密码了，听起来有点不安全的感觉。。。</p><p>如果你有优惠码的话，可以在 <strong>Redeem Gift Codes Coupons</strong>那里填写，就能折扣购买了。</p><p>上面的基本信息填写完毕之后，接下来就是挑选我们自己所需要的服务器配置了。不多说，上图</p><p><img src="/images/hardware.png" width="100%"></p><p>选完上图的配置之后，其他的就可以不用再勾选了，找到底部的确认按钮提交就可以了。</p><p>提交之后，会进入到 <strong>My Server</strong> 界面，会列出刚刚选择的服务器基本信息。点击最右边的 <strong>manage</strong> 进入详细信息界面，看图：</p><p><img src="/images/machine.png" width="100%"><br><img src="/images/manage.png" width="100%"></p><p>好了，购买服务器的流程到这里就差不多结束了。接下是如何在服务器上面搭建我们自己能用的VPN了。</p><h3 id="远程登录服务器"><a href="#远程登录服务器" class="headerlink" title="远程登录服务器"></a>远程登录服务器</h3><p>由于作者用的是 Mac 这里就不介绍 window 下面的方法了，因为命令都是一样的。</p><p>这里我们使用 Github 上知名的软件 <a href="https://github.com/lichenbuliren/shadowsocks/tree/2.8.2">shadowsocks</a>；</p><p>打开我们的命令行工具 <strong>item</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token function">ssh</span> root@45.32.22.xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入密码，登录到我们的服务器上。登录服务器第一件事情就是修改 VPS 提供给我们的默认 ssh 密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改完毕之后，退出远程登录（使用 <code>exit</code> 命令）。重新登录我们远程服务器</p><h3 id="安装-shadowsocks-服务"><a href="#安装-shadowsocks-服务" class="headerlink" title="安装 shadowsocks 服务"></a>安装 shadowsocks 服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// CentOS:yum <span class="token function">install</span> python-setuptools <span class="token operator">&amp;&amp;</span> easy_install pippip <span class="token function">install</span> shadowsocks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装成功之后，启动我们的 shadowsocks</p><p><strong>正常启动</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssserver -p <span class="token number">443</span> -k password -m aes-256-cfb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>后台启动</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ssserver -p <span class="token number">443</span> -k password -m aes-256-cfb --user nobody -d start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中「443」可以任意替换成自己设置的端口，「password」替换成自己设置的密码，「aes-256-cfb」可选的加密方式，默认这个就好。</p><p><strong>停止服务</strong><br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ssserver -d stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p><strong>查看 log</strong><br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">less</span> /var/log/shadowsocks.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h3 id="开启防火墙端口"><a href="#开启防火墙端口" class="headerlink" title="开启防火墙端口"></a>开启防火墙端口</h3><p>上面我们假设对外开启了「443」端口，这个时候是还不能访问的，因为防火墙没有将它加入防火墙允许的名单里面。下面开启防火墙的端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables -I INPUT -p tcp --dport <span class="token number">8388</span> -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加完毕之后，执行<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> iptables status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>查看刚刚添加的端口是否在列表里面，如果在的话，表明添加成功，成功之后，我们保存下，然后重启防火墙<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> iptables save<span class="token function">service</span> iptables restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>至此，服务端的 shadowsocks 已经配置完毕，下篇文章我们将继续如何在自己的电脑上通过 shadowsocks 程序连接上远程的 VPN 服务，从而实现「翻墙」能力。下篇再会！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/title-bg.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;为何会想到要翻个墙(为了被河蟹)，作为一个非著名、专业程序员，时常需要查找一下技术方面的资料；一般情况下可能会想到使用「百度」这个坑爹的搜索引擎去查资料。但是结果你会发现找的一堆的什么鬼东西，跟自己搜索的没有半毛钱关系。大多数是带有广告性质的博客或者纯粹的广告商排在最前面，恶心至极。
    
    </summary>
    
      <category term="服务器" scheme="https://heavenru.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="VPS" scheme="https://heavenru.com/tags/VPS/"/>
    
      <category term="VPN" scheme="https://heavenru.com/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>CreateJS 学习笔记——初识 CreateJS</title>
    <link href="https://heavenru.com//post/CreateJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001"/>
    <id>https://heavenru.com//post/CreateJS学习笔记01</id>
    <published>2015-11-25T11:33:37.000Z</published>
    <updated>2021-04-06T12:16:03.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、什么是-CreateJS"><a href="#1、什么是-CreateJS" class="headerlink" title="1、什么是 CreateJS ?"></a>1、什么是 CreateJS ?</h2><p>CreateJS 是一套可以构建丰富交互体验的 HTML5 游戏的开源工具包，旨在降低 HTML5 项目的开发难度和成本，让开发者以熟悉的方式打造更具现代感的网络交互体验。</p><p>官方地址：<a href="www.createjs.com">www.createjs.com</a>;<br>Github: <a href="https://github.com/CreateJS">https://github.com/CreateJS</a></p><span id="more"></span><h2 id="2、CreateJS-库简介"><a href="#2、CreateJS-库简介" class="headerlink" title="2、CreateJS 库简介"></a>2、CreateJS 库简介</h2><p>CreateJS 库包包含五款工具：</p><ul><li>EaselJS：用于 Sprites、动画、向量和位图的绘制，创建 HTML5 Canvas 上的交互体验（包含多点触控），同时提供 Flash 中的 “显示列表” 功能。</li><li>TweenJS：一个简单的用于制作类似 Flash 中 “补间动画” 的引擎，可生成数字或非数字的连续变化效果。提供了丰富的动画接口。</li><li>SoundJS：一个音频播放引擎，能够根据浏览器性能选择音频播放方式。将音频文件作为模块，可随时加载和卸载。</li><li>PrloadJS：帮助你简化网站资源预加载工作，无论加载内容是图形、视频、声音、JS、数据……等等。</li><li>ZOE：将SWF动画导出为EaseIJS的sprite的工具。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、什么是-CreateJS&quot;&gt;&lt;a href=&quot;#1、什么是-CreateJS&quot; class=&quot;headerlink&quot; title=&quot;1、什么是 CreateJS ?&quot;&gt;&lt;/a&gt;1、什么是 CreateJS ?&lt;/h2&gt;&lt;p&gt;CreateJS 是一套可以构建丰富交互体验的 HTML5 游戏的开源工具包，旨在降低 HTML5 项目的开发难度和成本，让开发者以熟悉的方式打造更具现代感的网络交互体验。&lt;/p&gt;
&lt;p&gt;官方地址：&lt;a href=&quot;www.createjs.com&quot;&gt;www.createjs.com&lt;/a&gt;;&lt;br&gt;Github: &lt;a href=&quot;https://github.com/CreateJS&quot;&gt;https://github.com/CreateJS&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CreateJS" scheme="https://heavenru.com/categories/CreateJS/"/>
    
    
      <category term="html5 game engine" scheme="https://heavenru.com/tags/html5-game-engine/"/>
    
      <category term="study" scheme="https://heavenru.com/tags/study/"/>
    
      <category term="js" scheme="https://heavenru.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Three.js 学习笔记01——介绍和使用 Three.js</title>
    <link href="https://heavenru.com//post/Threejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0"/>
    <id>https://heavenru.com//post/Threejs学习笔记</id>
    <published>2015-11-19T09:26:26.000Z</published>
    <updated>2021-04-06T12:16:35.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebGL-登场"><a href="#WebGL-登场" class="headerlink" title="WebGL 登场"></a>WebGL 登场</h2><p>如今浏览器的功能越来越强大，而且这些功能可以通过 Javascript 直接调用。你可以用 HTML5 标签轻松的添加视频和音频，而且可以在 HTML5 画布上面创建各种交互组件。现在这个功能集合里又多了一个成员，即支持 WebGL。通过 WebGL，你可以直接使用显卡的计算资源，创建高性能的二维和三维计算机图形，然后在 javascript 里直接使用 WebGL 编程。</p><h2 id="Three-js-能做什么"><a href="#Three-js-能做什么" class="headerlink" title="Three.js 能做什么"></a>Three.js 能做什么</h2><p>Three.js 是一个 Javascript 库，针对 WebGL 提供了丰富的 API，只需要几行代码，就可以从简单的三维图形创建出逼真的、实时的场景来。你可以从它的官方地址查看各种炫酷的3D效果。</p><ul><li>创建简单的和复杂的三维图形</li><li>在三维场景中生成动画、移动物体</li><li>在物体上应用纹理和材质</li><li>从三维建模软件中加载图形</li><li>创建基于样条曲线的二维图形</li></ul><p>Three.js 官方地址：<a href="http://threejs.org/">http://threejs.org/</a></p><h2 id="使用-Three-js"><a href="#使用-Three-js" class="headerlink" title="使用 Three.js"></a>使用 Three.js</h2><ul><li>你需要一个好的编辑器，这里推荐 <a href="http://www.sublimetext.com/"><code>Sublime Text</code></a>，用过的都说好。</li><li>推荐使用 <code>chrome</code> 浏览器，作为一个开发人员，不要问我为什么。</li></ul><h2 id="下载-Three-js-源码"><a href="#下载-Three-js-源码" class="headerlink" title="下载 Three.js 源码"></a>下载 Three.js 源码</h2><p>这里假设读者电脑都安装了 <code>Git</code> ，如果不清楚的可以先去了解下。</p><p>从 <code>github.com</code> 下载 <a href="https://github.com/mrdoob/three.js"><code>Three.js</code></a> 源码，打开文件夹，发现文件目录大致如下图，图1 <code>build</code> 目录放的编译合并之后的库文件，<code>src</code> 目录放的为编译的源码文件，可以针对具体需要来加载对应的 js 文件。</p><div style="float:left;text-align:center;width:50%;"><br>    <img src="/images/threejs/three-build.png"><br>    <p>图1</p><br></div><div style="float:right;text-align:center;width:50%;"><br>    <img src="/images/threejs/three-build.png"><br>    <p>图2</p><br></div><br><div style="clear:both;"></div> <p>在后面的案例中，我们选择的是 <code>build</code> 目下的源文件 <code>three.js</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebGL-登场&quot;&gt;&lt;a href=&quot;#WebGL-登场&quot; class=&quot;headerlink&quot; title=&quot;WebGL 登场&quot;&gt;&lt;/a&gt;WebGL 登场&lt;/h2&gt;&lt;p&gt;如今浏览器的功能越来越强大，而且这些功能可以通过 Javascript 直接调用。你可以用 
      
    
    </summary>
    
      <category term="ThreeJS" scheme="https://heavenru.com/categories/ThreeJS/"/>
    
    
      <category term="webgl" scheme="https://heavenru.com/tags/webgl/"/>
    
      <category term="javascript" scheme="https://heavenru.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>对字体文件开启GZIP压缩</title>
    <link href="https://heavenru.com//post/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%BC%80%E5%90%AF%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6gzip%E5%8E%8B%E7%BC%A9"/>
    <id>https://heavenru.com//post/web性能优化-开启字体文件gzip压缩</id>
    <published>2015-11-18T03:21:35.000Z</published>
    <updated>2021-04-06T12:16:47.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字体类别"><a href="#字体类别" class="headerlink" title="字体类别"></a>字体类别</h2><h3 id="TrueType-ttf"><a href="#TrueType-ttf" class="headerlink" title="TrueType (.ttf)"></a>TrueType (.ttf)</h3><p>　　<code>Windows</code> 和 <code>Mac</code> 系统最常用的字体格式，其最大的特点就是它是由一种数学模式来进行定义的基于轮廓技术的字体，这使得它们比基于矢量的字体更容易处理，保证了屏幕与打印输出的一致性。同时，这类字体和矢量字体一样可以随意缩放、旋转而不必担心会出现锯齿。<br><span id="more"></span></p><h3 id="EOT-–-Embedded-Open-Type-eot"><a href="#EOT-–-Embedded-Open-Type-eot" class="headerlink" title="EOT – Embedded Open Type (.eot)"></a>EOT – Embedded Open Type (.eot)</h3><p>　　嵌入字体格式 <code>(EOT)</code> 是微软开发的一种技术，允许 <code>OpenType</code> 字体嵌入到网页并可以下载至浏览器渲染，浏览器根据 <code>CSS</code> 中 <code>@font-face</code> 的定义，下载，渲染这种 <code>.EOT</code> 后缀的字体文件。这些文件只在当前页活动的状态下，临时安装在用户的系统中。</p><h3 id="OpenType-otf"><a href="#OpenType-otf" class="headerlink" title="OpenType (.otf)"></a>OpenType (.otf)</h3><p>　　<code>OpenType</code> 是一种可缩放字型 <code>(scalable font)</code> 电脑字体类型，采用 <code>PostScript</code> 格式，是美国微软公司与Adobe公司联合开发，用来替代 <code>TrueType</code> 字型的新字型。这类字体的文件扩展名为 <code>.otf</code>，类型代码是 <code>OTTO</code>，现行标准为 <code>OpenType 1.4</code>。<code>OpenType</code> 最初发表于1996年，并在2000年之后出现大量字体。它源于微软公司的 <code>TrueType Open</code> 字型，<code>TrueType Open</code> 字型又源于 <code>TrueType</code> 字型。<code>OpenType font</code> 包括了Adobe CID-Keyed font技术。Adobe公司已经在2002年末将其字体库全部改用OpenType格式。</p><h3 id="WOFF-–-Web-Open-Font-Format-woff"><a href="#WOFF-–-Web-Open-Font-Format-woff" class="headerlink" title="WOFF – Web Open Font Format (.woff)"></a>WOFF – Web Open Font Format (.woff)</h3><p>　　相对于 TrueType 和 OpenType ，WOFF（Web开发字体格式）是一种专门为了 Web 而设计的字体格式标准，它并不复杂，实际上只是对于 TrueType / OpenType 等字体格式的封装，并针对网络使用加以优化：每个字体文件中含有字体以及针对字体的元数据（Metadata），字体文件被压缩，以便于网络传输，并且不包含任何加密或者 DRM 措施。包括 Adobe、 Lino Type、Monotype 在内的几乎所有主要的字体供应商都加入到支持 WOFF 的行列中来</p><h3 id="SVG-Scalable-Vector-Graphics-Fonts-svg"><a href="#SVG-Scalable-Vector-Graphics-Fonts-svg" class="headerlink" title="SVG (Scalable Vector Graphics) Fonts (.svg)"></a>SVG (Scalable Vector Graphics) Fonts (.svg)</h3><p>　　顾名思义，就是使用 <code>SVG</code> 技术来呈现字体，还有一种 <code>gzip</code> 压缩格式的 <code>SVG</code> 字体 <code>.svgz</code> 。<code>SVG</code> 可缩放矢量图形<code>（Scalable Vector Graphics）</code> 是基于可扩展标记语言 <code>(XML)</code>，用于描述二维矢量图形的一种图形格式。<code>SVG</code> 由W3C制定，是一个开放标准。SVG严格遵从XML语法，并用文本格式的描述性语言来描述图像内容，因此是一种和图像分辨率无关的矢量图形格式。SVG可以使你设计的网页可以更加精彩细致，使用简单的文本命令，SVG可实现色彩线性变化、路径、自定义字体、透明效果、滤镜效果等各式常见的图形图像效果。</p><h2 id="字体文件在服务器端开启gzip压缩"><a href="#字体文件在服务器端开启gzip压缩" class="headerlink" title="字体文件在服务器端开启gzip压缩"></a>字体文件在服务器端开启gzip压缩</h2><h3 id="什么是-GZIP-压缩"><a href="#什么是-GZIP-压缩" class="headerlink" title="什么是 GZIP 压缩"></a>什么是 <code>GZIP</code> 压缩</h3><p>GZIP网页压缩，是一种WEB服务器与浏览器之间共同遵守的协议，也就是说WEB服务器和浏览器都必须支持该技术才能实现GZIP压缩，而当下主流的浏览器都是支持GZIP压缩，包括IE6、IE7、IE8、IE9、FireFox、谷歌浏览器、Opera等，而常见的WEB服务器通常有Apache和IIS两种。</p><p>GZIP最早由Jean-loup Gailly和Mark Adler创建，用于UNIX系统的文件压缩。我们在Linux中经常会用到后缀为.gz的文件，它们就是GZIP格式的。目前，GZIP已经成为Internet上使用非常普遍的一种数据压缩格式，或者说一种文件格式。</p><p>GZIP压缩的比率往往在3倍到10倍。</p><h4 id="浏览器对-font-face-Web-fonts-的支持情况"><a href="#浏览器对-font-face-Web-fonts-的支持情况" class="headerlink" title="浏览器对 @font-face Web fonts 的支持情况:"></a>浏览器对 <code>@font-face</code> Web fonts 的支持情况:</h4><p><img src="/images/font-support.png" width="100%"></p><p><br><br></p><h4 id="ttf-otf-浏览器支持情况"><a href="#ttf-otf-浏览器支持情况" class="headerlink" title="ttf/otf 浏览器支持情况"></a>ttf/otf 浏览器支持情况</h4><p><img src="/images/ttf-font.png" width="100%"></p><p><br><br></p><h4 id="woff-浏览器支持情况"><a href="#woff-浏览器支持情况" class="headerlink" title="woff 浏览器支持情况"></a>woff 浏览器支持情况</h4><p><img src="/images/woff-font.png" width="100%"></p><p><br><br></p><h4 id="svg-浏览器支持情况"><a href="#svg-浏览器支持情况" class="headerlink" title="svg 浏览器支持情况"></a>svg 浏览器支持情况</h4><p><img src="/images/svg-font.png" width="100%"></p><p><br><br></p><h4 id="eot-IE-特有支持"><a href="#eot-IE-特有支持" class="headerlink" title="eot IE 特有支持"></a>eot IE 特有支持</h4><p><img src="/images/eot-font.png" width="100%"></p><p><strong>字体文件对应的 minetype </strong></p><ul><li>application/font-woff                 woff</li><li>application/font-sfnt                 ttf</li><li>application/vnd.ms-fontobj        ecteot</li><li>image/svg+xml                                    svg svgz</li></ul><p>以 <a href="m.meizu.com">m.meizu.com</a> 网站中 <code>KaiGenGothicCN-Light.woff</code> 字体文件为例</p><p>开启前字体文件大小为 <code>311kb</code>，开启后 <code>223kb</code>，相比开启前压缩了 <code>30%</code> 左右，如下图</p><p><img src="/images/font-compare.jpg" width="100%"></p><h3 id="步骤一：登录远程服务器"><a href="#步骤一：登录远程服务器" class="headerlink" title="步骤一：登录远程服务器"></a>步骤一：登录远程服务器</h3><p><code>ssh 用户名@远程ip地址</code> 输入密码</p><h3 id="步骤二：修改-nginx-配置文件-mime-types-文件"><a href="#步骤二：修改-nginx-配置文件-mime-types-文件" class="headerlink" title="步骤二：修改 nginx 配置文件 mime.types 文件"></a>步骤二：修改 nginx 配置文件 mime.types 文件</h3><p>打开配置文件，添加如下几个配置项:</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">application<span class="token operator">/</span>font<span class="token operator">-</span>woff woff  application<span class="token operator">/</span>font<span class="token operator">-</span>sfnt ttfapplication<span class="token operator">/</span>vnd<span class="token punctuation">.</span>ms<span class="token operator">-</span>fontobjecteotimage<span class="token operator">/</span>svg<span class="token operator">+</span>xmlsvg svgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤三：修改-nginx-配置文件-nginx-conf-文件"><a href="#步骤三：修改-nginx-配置文件-nginx-conf-文件" class="headerlink" title="步骤三：修改 nginx 配置文件 nginx.conf 文件"></a>步骤三：修改 nginx 配置文件 nginx.conf 文件</h3><p>打开 <code>nginx.conf</code> 文件，添加如下配置项</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">gzip_types</span>text<span class="token operator">/</span>plain application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>css application<span class="token operator">/</span>xml application<span class="token operator">/</span>font<span class="token operator">-</span>woff application<span class="token operator">/</span>vnd<span class="token punctuation">.</span>ms<span class="token operator">-</span>fontobject application<span class="token operator">/</span>font<span class="token operator">-</span>sfnt image<span class="token operator">/</span>svg<span class="token operator">+</span>xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里面新增的配置项就是刚刚在 <code>mime.types</code> 里面配置的键</p><p><strong>修改了配置文件，需要重启nginx</strong><br><strong>重启 nginx：/data/nginx/sbin/nginx -s reload</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字体类别&quot;&gt;&lt;a href=&quot;#字体类别&quot; class=&quot;headerlink&quot; title=&quot;字体类别&quot;&gt;&lt;/a&gt;字体类别&lt;/h2&gt;&lt;h3 id=&quot;TrueType-ttf&quot;&gt;&lt;a href=&quot;#TrueType-ttf&quot; class=&quot;headerlink&quot; title=&quot;TrueType (.ttf)&quot;&gt;&lt;/a&gt;TrueType (.ttf)&lt;/h3&gt;&lt;p&gt;　　&lt;code&gt;Windows&lt;/code&gt; 和 &lt;code&gt;Mac&lt;/code&gt; 系统最常用的字体格式，其最大的特点就是它是由一种数学模式来进行定义的基于轮廓技术的字体，这使得它们比基于矢量的字体更容易处理，保证了屏幕与打印输出的一致性。同时，这类字体和矢量字体一样可以随意缩放、旋转而不必担心会出现锯齿。&lt;br&gt;
    
    </summary>
    
      <category term="font" scheme="https://heavenru.com/categories/font/"/>
    
    
      <category term="移动端" scheme="https://heavenru.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="性能优化" scheme="https://heavenru.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="font" scheme="https://heavenru.com/tags/font/"/>
    
  </entry>
  
  <entry>
    <title>移动端样式常用技巧分享</title>
    <link href="https://heavenru.com//post/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BC%98%E5%8C%96"/>
    <id>https://heavenru.com//post/移动端优化</id>
    <published>2015-11-18T03:21:35.000Z</published>
    <updated>2021-04-06T12:17:25.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、居中显示"><a href="#1、居中显示" class="headerlink" title="1、居中显示"></a>1、居中显示</h3><p>主要使用 css3 <code>translate</code> 属性，如 <code>translate3d(-50%,-50%,0)</code> 这里的百分比相对元素自身宽高来计算的，所以在不清楚自身DOM宽高的情况下，可以很方便的居中布局</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    这是容器    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        居中显示    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>80%<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container .demo</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ddd<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 40%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 40%<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种居中方案：<a href="http://jsbin.com/medeserawe/edit?html,output">http://jsbin.com/medeserawe/edit?html,output</a></p><span id="more"></span><h3 id="2、开启-GPU-加速"><a href="#2、开启-GPU-加速" class="headerlink" title="2、开启 GPU 加速"></a>2、开启 GPU 加速</h3><p>为动画 <code>DOM</code> 元素添加 <code>CSS3</code> 样式 <code>transform:transition3d(0,0,0)</code> 或 <code>transform:translateZ(0)</code>;，这两个属性都会开启GPU硬件加速模式，从而让浏览器在渲染动画时从 <code>CPU</code> 转向 <code>GPU</code> ，提高动画渲染速度</p><h4 id="开启GPU硬件加速可能触发的问题："><a href="#开启GPU硬件加速可能触发的问题：" class="headerlink" title="开启GPU硬件加速可能触发的问题："></a>开启GPU硬件加速可能触发的问题：</h4><p>通过 <code>transform:transition3d/translateZ</code> 开启 <code>GPU</code> 硬件加速之后，有些时候可能会导致浏览器频繁闪烁或抖动，可以尝试以下办法解决之：</p><pre><code>-webkit-backface-visibility: hidden;</code></pre><h3 id="3、解决字体变虚问题"><a href="#3、解决字体变虚问题" class="headerlink" title="3、解决字体变虚问题"></a>3、解决字体变虚问题</h3><pre><code>// 开启抗锯齿 ，MacOS，个人感觉还是不开-webkit-font-smoothing: antialiased;</code></pre><p>参考资料：</p><p><a href="http://www.iyunlu.com/view/css-xhtml/67.html">http://www.iyunlu.com/view/css-xhtml/67.html</a><br><a href="http://www.iyunlu.com/view/css-xhtml/66.html">http://www.iyunlu.com/view/css-xhtml/66.html</a></p><h3 id="4、图片优化"><a href="#4、图片优化" class="headerlink" title="4、图片优化"></a>4、图片优化</h3><h4 id="索引透明颜色与Alpha透明通道"><a href="#索引透明颜色与Alpha透明通道" class="headerlink" title="索引透明颜色与Alpha透明通道"></a>索引透明颜色与Alpha透明通道</h4><ul><li><p><a href="http://baike.baidu.com/view/822336.htm?func=retitle">索引色透明</a></p><p>  挑选一副图片中最有代表性的若干种颜色（通常不超过256种），编制成颜色表。由这些颜色来组成我们的图片，后果就是会出现边缘</p></li></ul><ul><li><a href="http://baike.baidu.com/view/175060.htm?fromtitle=%E9%98%BF%E5%B0%94%E6%B3%95%E9%80%9A%E9%81%93&amp;fromid=6917656&amp;type=syn">Alpha透明通道</a></li></ul><p>png8有8位的布尔透明通道（要么完全透明，要么完全不透明，不支持半透明）最多只能展现256中颜色<br>，png24则有24位的布尔透明通道（所谓半透明）。</p><p>在不需要半透明，并且色彩度不高的情况下尽量使用PNG8图片，会比PNG24小很多</p><p>Mac下使用<code>ImageAlpha</code>软件针对<code>.png</code>图片的优化，使用<code>ImageOptim</code>对<code>.jpg</code>图片的优化</p><p>windows用户使用在线网站压缩，常见的有<a href="http://zhitu.tencent.com/">智图</a></p><h3 id="5、音乐播放问题"><a href="#5、音乐播放问题" class="headerlink" title="5、音乐播放问题"></a>5、音乐播放问题</h3><p>经过测试，在最新的 IOS 9.1 和 Android 5.0 版本中，音频均能够在微信端自动播放，但是在移动端的浏览器中，Android 中的 chrome 浏览器不支持自动播放，UC、QQ 浏览器支持自动播放；而 IOS 中的浏览器都不支持自动播放。</p><p>事件兼容:</p><p>测试发现，IOS 对 touchstart 事件的响应中，无法获取到 <code>audio.paused</code> 属性值，也无法响应 <code>audio.play()</code> 方法，<br>解决方案：将 <code>touchstart</code> 改为 <code>click</code> 事件就能够使 <code>audio</code> 元素正确响应</p><h4 id="多个音频播放的最佳方案-Audio-sprite"><a href="#多个音频播放的最佳方案-Audio-sprite" class="headerlink" title="多个音频播放的最佳方案 Audio sprite"></a>多个音频播放的最佳方案 Audio sprite</h4><p>将多个 <code>audio</code> 文件合并到一个文件中，各个音频文件之间要留下适当的空隙</p><p>简单的 <code>audio sprite</code> 实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> audioSprite <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'audio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> spriteData <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    meow1<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        length<span class="token operator">:</span> <span class="token number">1.1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    meow2<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        start<span class="token operator">:</span> <span class="token number">1.3</span><span class="token punctuation">,</span>        length<span class="token operator">:</span> <span class="token number">1.1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    whine<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        start<span class="token operator">:</span> <span class="token number">2.7</span><span class="token punctuation">,</span>        length<span class="token operator">:</span> <span class="token number">0.8</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    purr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        start<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        length<span class="token operator">:</span> <span class="token number">5</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// play meow2 sprite</span>audioSprite<span class="token punctuation">.</span>currentTime <span class="token operator">=</span> spriteData<span class="token punctuation">.</span>meow2<span class="token punctuation">.</span>start<span class="token punctuation">;</span>audioSprite<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当播放到结尾时，停止流的逻辑</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentTime <span class="token operator">>=</span> spriteData<span class="token punctuation">.</span>meow2<span class="token punctuation">.</span>start <span class="token operator">+</span> spriteData<span class="token punctuation">.</span>meow2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>audioSprite<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'timeupdate'</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://jsfiddle.net/aarongloege/rQv5h/light/">测试Demo</a>;</p><p>参考资料：<a href="http://www.ibm.com/developerworks/cn/web/wa-ioshtml5/">克服IOS的音频局限</a></p><h3 id="6、字体图标"><a href="#6、字体图标" class="headerlink" title="6、字体图标"></a>6、字体图标</h3><p>能用字体图标就使用字体图标，IE6据说都能支持；<a href="http://www.iconfont.cn/">iconfont</a></p><h3 id="7、meta头部优化"><a href="#7、meta头部优化" class="headerlink" title="7、meta头部优化"></a>7、meta头部优化</h3><pre><code>//iphone设备中的safari私有meta标签，允许全屏模式浏览；&lt;meta content=&quot;yes&quot; name=&quot;apple-mobile-web-app-capable&quot; /&gt;// 去除邮箱地址识别&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;&lt;!-- 宽度设置为设备实际宽度，初始化倍数为1，最小倍数为1，最大倍数为1，用户缩放为否 --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,inital-scale=1.0,minimum-scale=1.0,maximum-scake=1.0,user-scalable=no&quot; /&gt;  &lt;!-- 删除默认的苹果工具栏和菜单栏 --&gt;  &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt; &lt;!-- 苹果手机顶部为黑色 --&gt;  &lt;meta name=&quot;apple-mobile-web-status-bar-style&quot; content=&quot;black&quot; /&gt; &lt;!-- 屏蔽浏览器自动识别数字为电话号码 --&gt;  &lt;meta name=&quot;fromat-detecition&quot; content=&quot;telephone=no&quot; /&gt; </code></pre><h3 id="8、禁止用户某些操作"><a href="#8、禁止用户某些操作" class="headerlink" title="8、禁止用户某些操作"></a>8、禁止用户某些操作</h3><pre><code>a, img &#123;    -webkit-touch-callout: none; /* 禁止长按链接与图片弹出菜单 */&#125;html, body &#123;    -webkit-user-select: none;   /* 禁止选中文本（如无文本选中需求，此为必选项） */    user-select: none;&#125;</code></pre><h3 id="9、解决IOS中横屏字体变大问题"><a href="#9、解决IOS中横屏字体变大问题" class="headerlink" title="9、解决IOS中横屏字体变大问题"></a>9、解决IOS中横屏字体变大问题</h3><pre><code>/*禁止IOS横屏的时候字体变大*/-webkit-text-size-adjust: none;</code></pre><h3 id="10、目前少用flex布局，改用table布局"><a href="#10、目前少用flex布局，改用table布局" class="headerlink" title="10、目前少用flex布局，改用table布局"></a>10、目前少用flex布局，改用table布局</h3><p>目前在uc上面的对于 <code>flex</code> 布局支持不好，改用其他方案</p><h3 id="11、小图标元素改用base64位"><a href="#11、小图标元素改用base64位" class="headerlink" title="11、小图标元素改用base64位"></a>11、小图标元素改用base64位</h3><p>减少http请求，将小图标转化成base64格式，目前我们的mz-fis框架已经支持，使用<code>url?__inline</code>方式就可以方便的转化了</p><h3 id="12、图片默认会有一些白边框问题"><a href="#12、图片默认会有一些白边框问题" class="headerlink" title="12、图片默认会有一些白边框问题"></a>12、图片默认会有一些白边框问题</h3><p>Demo：<a href="http://m.meizu.com/smart/router/summary.html">http://m.meizu.com/smart/router/summary.html</a></p><ul><li>给图片的父容器设置 <code>line-height:0</code> 解决</li><li>给图片本身设置 <code>display:block</code> 解决，优先使用这个方法</li></ul><h3 id="13、在使用百分比的时候，尽量使用偶数"><a href="#13、在使用百分比的时候，尽量使用偶数" class="headerlink" title="13、在使用百分比的时候，尽量使用偶数"></a>13、在使用百分比的时候，尽量使用偶数</h3><p>Demo： <a href="http://m.meizu.com/products/meilanmetal/summary.html">http://m.meizu.com/products/meilanmetal/summary.html</a></p><p>在改成奇数的情况下，很容易出现手指断层的现象，对不齐等问题</p><h3 id="14、动画优化"><a href="#14、动画优化" class="headerlink" title="14、动画优化"></a>14、动画优化</h3><p>在使用<code>transition</code>属性的时候，尽量指名具体的动画属性，提高动画流畅度</p><p>需要做动画的 <code>DOM</code> 元素，优先使用 <code>position:absoulte</code> 脱离文档流，然后使用 <code>transform</code> 来执行动画操作，以减少dom重绘带来的性能消耗</p><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><ul><li>多音频播放问题？</li><li>对于 <code>viewport</code> 的正确使用问题？</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering">http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering</a>;</p><p><a href="https://github.com/AlloyTeam/Mars/blob/master/performance/css-property-animation-performance.md">https://github.com/AlloyTeam/Mars/blob/master/performance/css-property-animation-performance.md</a>;</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、居中显示&quot;&gt;&lt;a href=&quot;#1、居中显示&quot; class=&quot;headerlink&quot; title=&quot;1、居中显示&quot;&gt;&lt;/a&gt;1、居中显示&lt;/h3&gt;&lt;p&gt;主要使用 css3 &lt;code&gt;translate&lt;/code&gt; 属性，如 &lt;code&gt;translate3d(-50%,-50%,0)&lt;/code&gt; 这里的百分比相对元素自身宽高来计算的，所以在不清楚自身DOM宽高的情况下，可以很方便的居中布局&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-html&quot; data-language=&quot;html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    这是容器
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;demo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        居中显示
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;line-numbers language-css&quot; data-language=&quot;css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 80%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;80%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;translate3d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; -50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; border-box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.container .demo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid #ddd&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 40%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 40%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;translate3d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;-50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另一种居中方案：&lt;a href=&quot;http://jsbin.com/medeserawe/edit?html,output&quot;&gt;http://jsbin.com/medeserawe/edit?html,output&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="https://heavenru.com/categories/css/"/>
    
    
      <category term="移动端" scheme="https://heavenru.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="性能优化" scheme="https://heavenru.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="css" scheme="https://heavenru.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>原生JS Tab组件</title>
    <link href="https://heavenru.com//post/%E5%8E%9F%E7%94%9FJS-Tab%E7%BB%84%E4%BB%B6"/>
    <id>https://heavenru.com//post/原生JS-Tab组件</id>
    <published>2015-09-15T11:31:51.000Z</published>
    <updated>2021-04-06T12:17:04.100Z</updated>
    
    <content type="html"><![CDATA[<p>最近在<a href="https://github.com/">github</a>上面看到一个有意思的项目，名字叫做<a href="https://github.com/nimojs/learn-js">learnjs</a>，这里会提供一些基础的JS任务，由浅入深的完成一个个项目不同阶段，从而提高个人的编码水平。</p><p>好了，回到正题，在这里分享下个人编写的Tab组件这个项目的代码，由于没有使用第三方JS库<br>所以下面的代码中没有去考虑低版本浏览器的兼容性问题。</p><span id="more"></span><h2 id="html-代码布局"><a href="#html-代码布局" class="headerlink" title="html 代码布局"></a>html 代码布局</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>tab组件-level3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/tab.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tabl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-contents tab-contents-active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-contents<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-contents<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是内容3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-level3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> tab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tab</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            element<span class="token operator">:</span> <span class="token string">'.tab-container'</span><span class="token punctuation">,</span>            trigger<span class="token operator">:</span> <span class="token string">'.tab-nav-item'</span><span class="token punctuation">,</span>            triggerActiveClass<span class="token operator">:</span> <span class="token string">'ui-tab-active'</span><span class="token punctuation">,</span>            contents<span class="token operator">:</span> <span class="token string">'.tab-contents'</span><span class="token punctuation">,</span>            activeIndex<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token comment">//回调方法，在触发tab切换的时候执行</span>            <span class="token function-variable function">onSwitch</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"index %d count %d"</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS-代码"><a href="#CSS-代码" class="headerlink" title="CSS 代码"></a>CSS 代码</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.tab-container</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.tab-container .tab-nav</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.tab-container .tab-nav .tab-nav-item</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 20px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #fff<span class="token punctuation">;</span>    <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.tab-container .tab-nav .tab-nav-item.tab-nav-item-active</span><span class="token punctuation">&#123;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span>#ccc<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">border-bottom-color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.tab-container .tab-nav .tab-nav-item.ui-tab-active</span><span class="token punctuation">&#123;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span>#ccc<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">border-bottom-color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.tab-container .tab-contents</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span>1px solid #ccc<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.tab-container .tab-contents.tab-contents-active</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JS封装"><a href="#JS封装" class="headerlink" title="JS封装"></a>JS封装</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">w<span class="token punctuation">,</span> doc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 构造函数模式</span>    <span class="token keyword">function</span> <span class="token function">Tab</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            element<span class="token operator">:</span> <span class="token string">'.tab-container'</span><span class="token punctuation">,</span> <span class="token comment">//tab组件容器，必选</span>            triggers<span class="token operator">:</span> <span class="token string">'.tab-nav-item'</span><span class="token punctuation">,</span> <span class="token comment">//触发selector, 必选</span>            triggerClass<span class="token operator">:</span> <span class="token string">'tab-nav-item'</span><span class="token punctuation">,</span>            triggerActiveClass<span class="token operator">:</span> <span class="token string">'tab-nav-item-active'</span><span class="token punctuation">,</span>            contents<span class="token operator">:</span> <span class="token string">'.tab-contents'</span><span class="token punctuation">,</span>            activeIndex<span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Tab</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_extend</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showTab</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>activeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">_extend</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> options<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">/**         * 显示指定索引的面板         * @param  &#123;[type]&#125; index tab索引，如果为空，则取配置参数         * @return &#123;[type]&#125;       [description]         */</span>        <span class="token function-variable function">showTab</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> tabTrigger <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>triggers<span class="token punctuation">)</span><span class="token punctuation">,</span>                tabContents <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment">// 如果传入的激活索引大于元素最大索引值，则取默认的0</span>                activeIndex<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                activeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                activeIndex <span class="token operator">=</span> index <span class="token operator">></span> tabTrigger<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> index<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 初始化激活tab</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> tabTrigger<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>activeIndex <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    tabTrigger<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>triggerActiveClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tabContents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    tabTrigger<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>triggerActiveClass<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tabTrigger<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>triggerActiveClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tabContents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> tabTrigger<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">bindEvent</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> tabContainer <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                tabTrigger <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>triggers<span class="token punctuation">)</span><span class="token punctuation">,</span>                tabContents <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>                callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>onSwitch<span class="token punctuation">;</span>            tabContainer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> triggerClass <span class="token operator">=</span> that<span class="token punctuation">.</span>options<span class="token punctuation">.</span>triggerClass<span class="token punctuation">,</span>                    triggerActiveClass <span class="token operator">=</span> that<span class="token punctuation">.</span>options<span class="token punctuation">.</span>triggerActiveClass<span class="token punctuation">;</span>                <span class="token comment">// 判断事件源对象是否是trigger对象</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>triggerClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 获取当前触发索引</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> tabTrigger<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>tabTrigger<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> e<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            that<span class="token punctuation">.</span><span class="token function">showTab</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 绑定到window全局对象</span>    <span class="token keyword">return</span> w<span class="token punctuation">.</span>Tab <span class="token operator">=</span> Tab<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> tab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tab</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    element<span class="token operator">:</span> <span class="token string">'.tab-container'</span><span class="token punctuation">,</span>    trigger<span class="token operator">:</span> <span class="token string">'.tab-nav-item'</span><span class="token punctuation">,</span>    triggerActiveClass<span class="token operator">:</span> <span class="token string">'ui-tab-active'</span><span class="token punctuation">,</span>    contents<span class="token operator">:</span> <span class="token string">'.tab-contents'</span><span class="token punctuation">,</span>    activeIndex<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在&lt;a href=&quot;https://github.com/&quot;&gt;github&lt;/a&gt;上面看到一个有意思的项目，名字叫做&lt;a href=&quot;https://github.com/nimojs/learn-js&quot;&gt;learnjs&lt;/a&gt;，这里会提供一些基础的JS任务，由浅入深的完成一个个项目不同阶段，从而提高个人的编码水平。&lt;/p&gt;
&lt;p&gt;好了，回到正题，在这里分享下个人编写的Tab组件这个项目的代码，由于没有使用第三方JS库&lt;br&gt;所以下面的代码中没有去考虑低版本浏览器的兼容性问题。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://heavenru.com/categories/JavaScript/"/>
    
    
      <category term="原生JS" scheme="https://heavenru.com/tags/%E5%8E%9F%E7%94%9FJS/"/>
    
      <category term="Widget" scheme="https://heavenru.com/tags/Widget/"/>
    
      <category term="封装" scheme="https://heavenru.com/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
</feed>
