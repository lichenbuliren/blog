{"title":"高性能多级多选组件开发","uid":"b96b7a279b1101ad47f9f7bca4cd8e0d","slug":"高性能多级多选组件开发","date":"2020-05-31T12:13:09.000Z","updated":"2021-04-06T12:17:32.059Z","comments":true,"path":"api/articles/高性能多级多选组件开发.json","cover":"https://heaven-blog-1255884785.file.myqcloud.com/poster-thumbnail.jpg","content":"<blockquote>\n<p>最近在项目开发过程中，有个一个多级多选的公共组件开发需求，特在这里记录下开发过程中所做的一些优化以及分享一下我是如何从零开发并设计一个组件的思路，希望给阅读这篇文章的读者带来一点收获。</p>\n</blockquote>\n<h1 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h1><h2 id=\"单个项选中\"><a href=\"#单个项选中\" class=\"headerlink\" title=\"单个项选中\"></a>单个项选中</h2><p><img src=\"/images/selector/single-item-selected.png\" alt=\"单个选中项\"></p>\n<h2 id=\"多个部分项选中\"><a href=\"#多个部分项选中\" class=\"headerlink\" title=\"多个部分项选中\"></a>多个部分项选中</h2><p><img src=\"/images/selector/multiple-item-selected.png\" alt=\"多个选中项\"></p>\n<h1 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h1><p>在拿到需求之后，我们首先要做的是需求分析；通过上面的效果预览我们可以初步知道我们所需要处理的核心逻辑：</p>\n<ol>\n<li>默认加载第一层级数据</li>\n<li>鼠标 hover<ol>\n<li>异步获取数据</li>\n<li>切换下级渲染数据</li>\n</ol>\n</li>\n<li>鼠标点击<ol>\n<li>点击当前项状态改变：选中 or 未选中</li>\n<li>当前项的父级状态改变：选中、半选、不选中，并且需要递归处理</li>\n<li>当前项的子级状态改变：全选、全不选</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"组件设计\"><a href=\"#组件设计\" class=\"headerlink\" title=\"组件设计\"></a>组件设计</h1><p>在设计组件之前，我们需要考虑组件的性能、通用型等问题；如何设计一个与业务解耦的组件，是我们需要首先考虑的问题；那么，如何将组件数据请求与业务解耦呢：</p>\n<ul>\n<li>组件提供一个 service 入参，service 是一个返回 Promise 的异步请求方法</li>\n<li>组件提供一个 dataMapper，用来做数据转换，将 service 请求返回的值转化为符合我们组件数据解构的数据</li>\n<li>组件内部通过调用外部传入的 service 来获取数据</li>\n</ul>\n<p>入参设计如下：</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// 外部传入服务</span>\n  <span class=\"token function-variable function\">service</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> parentId<span class=\"token operator\">:</span> string <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> list<span class=\"token operator\">:</span> SelectorItemType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  dataMapper<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> list<span class=\"token operator\">:</span> SelectorItemType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n \t * 回显数据\n   * @default []\n   */</span>\n  data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> SelectorItemType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  onSubmit<span class=\"token operator\">?</span><span class=\"token operator\">:</span> SubmitCallback<span class=\"token punctuation\">;</span>\n  onCancel<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> parentId<span class=\"token operator\">:</span> itemId <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  nextColumnList <span class=\"token operator\">=</span> dataMapper <span class=\"token operator\">?</span> <span class=\"token function\">dataMapper</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Notification<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  nextColumnList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"整体思路设计\"><a href=\"#整体思路设计\" class=\"headerlink\" title=\"整体思路设计\"></a>整体思路设计</h1><p>通过上面的 UI 呈现，现在大家应该有个基础的认识，我们需要做什么样的需求了。</p>\n<p>我们在接到一个需求的时候，先不要着急着码代码，更好的方式是先规划我们的组件方案设计，并且提前思考好各种逻辑分支；<br>这里给大家看下我的设计初稿，我习惯性的选择脑图来发散自己的思维：</p>\n<p><img src=\"/images/selector/draft.png\" alt=\"脑图草稿\"></p>\n<p>通过上图，我们能够在大脑中有个大概的清晰认识到我们需要做哪些核心模块的设计与开发，接下来就是规划我们的核心模块划分：</p>\n<ul>\n<li>数据缓存</li>\n<li>异步数据获取</li>\n<li>选中数据缓存</li>\n<li>渲染数据源设计</li>\n</ul>\n<p><img src=\"/images/selector/main.png\" alt=\"核心模块\"></p>\n<h2 id=\"数据缓存设计\"><a href=\"#数据缓存设计\" class=\"headerlink\" title=\"数据缓存设计\"></a>数据缓存设计</h2><p>要设计一个高性能多级多选组件，肯定离不开我们的数据优化部分：<strong>数据缓存</strong></p>\n<p>那么如果如何设计才能做到性能最优呢？通过上面的脑图，我们初步是通过一个 <code>dataCaheMap</code> 来缓存异步拉取回来的数据，这样子我们在取的时候，时间复杂度就是 O(1) ；既然是有 <code>Map</code> 来缓存数据，那么用什么作为 <code>key</code> 也是我们缓存的关键；<br>在这个组件里面，最终我选择的是：<strong>列索引+行索引+id 作为缓存 key</strong></p>\n<p><em>这样设计的目的是，防止后台出现同时操作增删改类目配置；通过这种方式，能避免因为后台在同步操作到新增加或者删除了某个类目之后，取的缓存数据还是旧数据，这点是很关键的！</em></p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token comment\">// 数据缓存映射 Map</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dataCacheMap<span class=\"token punctuation\">,</span> setDataCacheMap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> SelectorItemType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 获取缓存 key\n * @param itemId selectedItem id\n * @param itemIndex selectedItem 当前 item 索引\n * @param columnIndex 当前 column 索引\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCacheKey</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>itemId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> itemIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> columnIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>itemId<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>itemIndex<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>columnIndex<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 取缓存值</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getItemList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> cacheKey <span class=\"token operator\">=</span> <span class=\"token function\">getCacheKey</span><span class=\"token punctuation\">(</span>itemId<span class=\"token punctuation\">,</span> itemIndex<span class=\"token punctuation\">,</span> columnIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> nextColumnList <span class=\"token operator\">=</span> dataCacheMap<span class=\"token punctuation\">[</span>cacheKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> _selectedValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>selectedValues <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextColumnList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> parentId<span class=\"token operator\">:</span> itemId <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dataMapper 用来自定义数据转换</span>\n    nextColumnList <span class=\"token operator\">=</span> dataMapper <span class=\"token operator\">?</span> <span class=\"token function\">dataMapper</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">setDataCacheMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>cacheKey<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> nextColumnList<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数据请求设计\"><a href=\"#数据请求设计\" class=\"headerlink\" title=\"数据请求设计\"></a>数据请求设计</h2><p>如果我们组件要与业务解耦，那么必须要将数据请求与组件解耦；所以我们设计组件的是，提供了一个 <code>service</code> 属性作为异步数据请求服务传入；并且通过 TS 来约束 参数与响应体结构，让接口服务返回的数据符合我们的组件所需的数据结构：单个数据项必须含有 id, parentId, label 三个必须属性，其中 parentId 是我们处理级联依赖的关键；针对不同的业务，可能第一级的 parentId 不一样，所以我们也提供了一个 <code>defaultParentId</code> 作为属性供外部传入</p>\n<p><em>如果服务层的数据无法改变，我们还提供了 dataMapper 回调函数来帮助我们格式化返回的数据</em></p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * 单个类目项\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SelectorItemType</span> <span class=\"token punctuation\">&#123;</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * @default '0'\n   */</span>\n  parentId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * 是否可选\n   * @default true\n   */</span>\n  disabled<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * 选项文案\n   * @default '-'\n   */</span>\n  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * 是否半选状态\n   * @default false\n   */</span>\n  indeterminate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// 外部传入请求数据服务</span>\n  <span class=\"token function-variable function\">service</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> parentId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> list<span class=\"token operator\">:</span> SelectorItemType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  defaultParentId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  dataMapper<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> list<span class=\"token operator\">:</span> SelectorItemType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * @default []\n   */</span>\n  data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> SelectorItemType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  onSubmit<span class=\"token operator\">?</span><span class=\"token operator\">:</span> SubmitCallback<span class=\"token punctuation\">;</span>\n  onCancel<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"渲染数据源设计\"><a href=\"#渲染数据源设计\" class=\"headerlink\" title=\"渲染数据源设计\"></a>渲染数据源设计</h2><p>在有了前面的『数据缓存』、『数据请求』之后，我们接下来设计渲染所需的数据结构；从交互层面，我们最容易想到的是二维数组数据结构；通过二维数组的方式，能方便的帮助我们渲染所需的 UI；</p>\n<p>假设我们的数据是如下数据格式：</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token comment\">// 组件内部数据源</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>source<span class=\"token punctuation\">,</span> setSource<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>SelectorItemType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>但是因为我们的交互上面，是有个『部分选中』这个状态存在，但是这个状态与后台类目无关，只是前端展示需要用到的字段，所以我们需要对接口返回的数据做一个初始化的操作：将数据源项新增一个半选状态 <code>indeterminate</code> 标志位，后续我们在处理级联状态的时候，需要频繁的改动到这个状态值</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">categoryList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span>item<span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>categoryId<span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 半选状态标志位</span>\n    indeterminate<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">.</span>selectorItemContainer<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">&#123;</span>column<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n        <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>columnIndex<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">.</span>selectorItem<span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">onMouseEnter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">debouncedHoverCallback</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> columnIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        &lt;Checkbox\n          value=</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>selectedValues<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n          disabled=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>disabled<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n          // 判断是否半选\n          indeterminate=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>indeterminate<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n          className=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">.</span>checkbox<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n          onClick=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">handleItemClick</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> columnIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n          >\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">.</span>labelText<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>label <span class=\"token operator\">||</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Checkbox</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Icon</span></span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">.</span>iconRight<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>arrowright<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"已选数据设计\"><a href=\"#已选数据设计\" class=\"headerlink\" title=\"已选数据设计\"></a>已选数据设计</h2><p>我们的组件是『多级多选』无限层级，在组件渲染的时候，如何判断当前 item 项是否选中，依靠的就是我们的已选数据 state：</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 已选择类目，组件内部维护状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selectedValues<span class=\"token punctuation\">,</span> setSelectedValues<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>SelectedMap<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>Checkbox\n  <span class=\"token comment\">// 判断是否选中</span>\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>selectedValues<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n  disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>disabled<span class=\"token punctuation\">&#125;</span>\n  indeterminate<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>indeterminate<span class=\"token punctuation\">&#125;</span>\n  className<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">.</span>checkbox<span class=\"token punctuation\">&#125;</span>\n  onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">handleItemClick</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> columnIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token operator\">></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">.</span>labelText<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>label <span class=\"token operator\">||</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Checkbox</span></span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过打平数据结构，我们无需关心渲染层级，时间复杂度层面也是保持 O(1)；</p>\n<h1 id=\"交互逻辑详解\"><a href=\"#交互逻辑详解\" class=\"headerlink\" title=\"交互逻辑详解\"></a>交互逻辑详解</h1><h2 id=\"Hover-事件逻辑详情\"><a href=\"#Hover-事件逻辑详情\" class=\"headerlink\" title=\"Hover 事件逻辑详情\"></a>Hover 事件逻辑详情</h2><p>鼠标 hover 操作，我们主要是需要：</p>\n<ol>\n<li>处理异步数据的获取与缓存</li>\n<li>处理当前项的子级数据状态；通过在 Hover 的时候来控制子级的状态，可以让我省去递归子级的操作来提高我们的整体性能</li>\n</ol>\n<p><strong>注意：在 Hover 事件过程中，我们需要对 debounce 操作</strong></p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useDebouncedCallback <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'use-debounce'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>debouncedHoverCallback<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDebouncedCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">itemId<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> itemIndex<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> columnIndex<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        itemId<span class=\"token punctuation\">,</span>\n        columnIndex<span class=\"token punctuation\">,</span>\n        itemIndex<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n  <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>columnIndex<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">&#125;</span></span>\n  <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>styles<span class=\"token punctuation\">.</span>selectorItem<span class=\"token punctuation\">&#125;</span></span>\n  <span class=\"token attr-name\">onMouseEnter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">debouncedHoverCallback</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> columnIndex<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  ....\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/images/selector/HandleHover.png\" alt=\"Hover Detail\"></p>\n<h2 id=\"多选项-Click-逻辑详情\"><a href=\"#多选项-Click-逻辑详情\" class=\"headerlink\" title=\"多选项 Click 逻辑详情\"></a>多选项 Click 逻辑详情</h2><p>鼠标 click 操作，核心逻辑：</p>\n<ol>\n<li>改变当前点击项状态</li>\n<li>改变子级状态</li>\n<li>改变父级状态</li>\n</ol>\n<p><img src=\"/images/selector/HandleItemClick.png\" alt=\"Click Detail\"></p>\n<h1 id=\"数据回调\"><a href=\"#数据回调\" class=\"headerlink\" title=\"数据回调\"></a>数据回调</h1><p>在我们选中操作完成之后，我们需要将用户选择的数据提交给后台，通常多级多选的数据结构设计是平级设计，所以当我们父级如果是选中的数据，那么它的子级数据就没有必要提交给后台了；</p>\n<p>所以我们需要冲选中池中过滤出<strong>父级 parentId 不在选中池中的数据</strong>，这个就是我们最终需要返回给用户与后台的数据</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> result<span class=\"token operator\">:</span> SelectorItemType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>selectedValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> selectedValues<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 核心逻辑：过滤出当前 parentId 不在选中池中数据，就表示它的父级没有选中</span>\n  <span class=\"token keyword\">const</span> filterData <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>selectedValues<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>parentId<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>parentId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  onSubmit <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onSubmit</span><span class=\"token punctuation\">(</span>filterData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h1><p>到这里我们就基本介绍完了如何从 0 到 1完整的设计一个多级多选的组件；该组件支持任意层级的数据，只需要满足我们的层级依赖关系的数据结构，将能复用这个组件</p>\n<p>但是我们还有几个思考题：</p>\n<ol>\n<li>如果多选组件还需要能展示禁选项，逻辑如何调整？</li>\n<li>如何解耦 DOM 结构与 CSS 实现</li>\n</ol>\n<p>这两个问题欢迎各位在下面讨论</p>\n","feature":null,"text":" 最近在项目开发过程中，有个一个多级多选的公共组件开发需求，特在这里记录下开发过程中所做的一些优化以及分享一下我是如何从零开发并设计一个组件的思路，希望给阅读这篇文章的读者带来一点收获。 效果预览单个项选中 多个部分项选中 需求分析在拿到需求之后，我们首先要做的是需求分析；通过上...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Typescript","slug":"Typescript","count":1,"path":"api/tags/Typescript.json"},{"name":"React","slug":"React","count":1,"path":"api/tags/React.json"},{"name":"性能","slug":"性能","count":1,"path":"api/tags/性能.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%88%E6%9E%9C%E9%A2%84%E8%A7%88\"><span class=\"toc-text\">效果预览</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%B8%AA%E9%A1%B9%E9%80%89%E4%B8%AD\"><span class=\"toc-text\">单个项选中</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E4%B8%AA%E9%83%A8%E5%88%86%E9%A1%B9%E9%80%89%E4%B8%AD\"><span class=\"toc-text\">多个部分项选中</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\"><span class=\"toc-text\">需求分析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">组件设计</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">整体思路设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">数据缓存设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">数据请求设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B8%B2%E6%9F%93%E6%95%B0%E6%8D%AE%E6%BA%90%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">渲染数据源设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%B2%E9%80%89%E6%95%B0%E6%8D%AE%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">已选数据设计</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E4%BA%92%E9%80%BB%E8%BE%91%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">交互逻辑详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hover-%E4%BA%8B%E4%BB%B6%E9%80%BB%E8%BE%91%E8%AF%A6%E6%83%85\"><span class=\"toc-text\">Hover 事件逻辑详情</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%80%89%E9%A1%B9-Click-%E9%80%BB%E8%BE%91%E8%AF%A6%E6%83%85\"><span class=\"toc-text\">多选项 Click 逻辑详情</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%9B%9E%E8%B0%83\"><span class=\"toc-text\">数据回调</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Q-amp-A\"><span class=\"toc-text\">Q&amp;A</span></a></li></ol>","author":{"name":"Heaven","avatar":"https://heaven-blog-1255884785.file.myqcloud.com/github-avatar.jpeg","link":""},"mapped":true,"prev_post":{"title":"Vite + React + Typescript 最佳实践","uid":"bc6522e08671d01b6b68ccb6991a87d3","slug":"Vite-with-React-最佳实践","date":"2021-03-22T12:02:16.000Z","updated":"2021-04-06T12:22:39.214Z","comments":true,"path":"api/articles/Vite-with-React-最佳实践.json","cover":"https://heaven-blog-1255884785.file.myqcloud.com/poster-thumbnail.jpg","text":"使用 Vite + React + Typescript 打造一个前端单页应用模板 最近前端大火的 Vite 2.0 版本终于出来了，在这里分享一下如何使用 vite 构建一个前端单页应用 该文章主要面向对 Vite 感兴趣，或者做前端项目架构的同学 源码地址：fe-projec...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"react","slug":"react","count":1,"path":"api/categories/react.json"}],"tags":[{"name":"react","slug":"react","count":3,"path":"api/tags/react.json"},{"name":"typescript","slug":"typescript","count":2,"path":"api/tags/typescript.json"},{"name":"vite","slug":"vite","count":1,"path":"api/tags/vite.json"},{"name":"single-page","slug":"single-page","count":1,"path":"api/tags/single-page.json"}],"author":{"name":"Heaven","avatar":"https://heaven-blog-1255884785.file.myqcloud.com/github-avatar.jpeg","link":""}},"next_post":{"title":"使用 TypeScript 开发小程序最佳实践","uid":"e5113338e0939e903a9a93fc32006e30","slug":"用-Typescript-编写微信小程序","date":"2020-01-28T07:34:33.000Z","updated":"2021-04-06T12:17:20.087Z","comments":true,"path":"api/articles/用-Typescript-编写微信小程序.json","cover":"https://heaven-blog-1255884785.file.myqcloud.com/poster-thumbnail.jpg","text":" 当微信小程序遇上 Typescript 会碰撞出怎样的火花？该文章将介绍一下如何使用 TS 来提升小程序的开发体验 该文章含有大量示例代码，读者有过小程序开发经验并且对 TypeScript 熟悉最佳 完整阅读该文章大概需要 10 分钟； 使用 TSLib 精简代码在 TS 中...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"小程序","slug":"小程序","count":1,"path":"api/categories/小程序.json"},{"name":"typescript","slug":"小程序/typescript","count":1,"path":"api/categories/小程序/typescript.json"}],"tags":[{"name":"小程序","slug":"小程序","count":1,"path":"api/tags/小程序.json"},{"name":"typescript","slug":"typescript","count":2,"path":"api/tags/typescript.json"}],"author":{"name":"Heaven","avatar":"https://heaven-blog-1255884785.file.myqcloud.com/github-avatar.jpeg","link":""}}}