{"title":"Vite + React + Typescript 最佳实践","uid":"bc6522e08671d01b6b68ccb6991a87d3","slug":"Vite-with-React-最佳实践","date":"2021-03-22T12:02:16.000Z","updated":"2021-04-06T12:22:39.214Z","comments":true,"path":"api/articles/Vite-with-React-最佳实践.json","cover":"https://heaven-blog-1255884785.file.myqcloud.com/poster-thumbnail.jpg","content":"<h1 id=\"使用-Vite-React-Typescript-打造一个前端单页应用模板\"><a href=\"#使用-Vite-React-Typescript-打造一个前端单页应用模板\" class=\"headerlink\" title=\"使用 Vite + React + Typescript 打造一个前端单页应用模板\"></a>使用 Vite + React + Typescript 打造一个前端单页应用模板</h1><blockquote>\n<p>最近前端大火的 Vite 2.0 版本终于出来了，在这里分享一下如何使用 vite 构建一个前端单页应用</p>\n</blockquote>\n<p><strong>该文章主要面向对 Vite 感兴趣，或者做前端项目架构的同学</strong></p>\n<p>源码地址：<a href=\"https://github.com/lichenbuliren/fe-project-base\">fe-project-base</a></p>\n<p>通过这篇文章，你能了解到以下几点：</p>\n<ul>\n<li><code>vscode 编辑器配置</code><a href=\"#editor\">#</a></li>\n<li><code>git pre-commit 如何配置</code><a href=\"#precommit\">#</a></li>\n<li><code>ESLint + Pritter 配置</code><a href=\"#eslint\">#</a></li>\n<li><code>标准前端单页应用目录规划</code><a href=\"#dir\">#</a></li>\n<li><code>从 0 到 1 学习 vite 构建优化</code><a href=\"#vite\">#</a></li>\n<li><code>mobx/6.x + react + TypeScript 最佳实践</code><a href=\"#mobx\">#</a></li>\n</ul>\n<p>想快速了解 Vite 配置构建的，可以直接跳到 <a href=\"#vite\">这里</a></p>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><p>这里我们项目名是 <a href=\"https://github.com/lichenbuliren/fe-project-base\">fe-project-base</a><br>这里我们采用的 <a href=\"https://vitejs.dev/guide/#overview\">vite 2.0</a> 来初始化我们的项目</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init @vitejs/app fe-project-base --template react-ts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个时候，会出现命令行提示，咱们按照自己想要的模板，选择对应初始化类型就 OK 了</p>\n<h2 id=\"安装项目依赖\"><a href=\"#安装项目依赖\" class=\"headerlink\" title=\"安装项目依赖\"></a>安装项目依赖</h2><p>首先，我们需要安装依赖，要打造一个基本的前端单页应用模板，咱们需要安装以下依赖：</p>\n<ol>\n<li><code>react</code> &amp; <code>react-dom</code>：基础核心</li>\n<li><code>react-router</code>：路由配置</li>\n<li><code>@loadable/component</code>：动态路由加载</li>\n<li><code>classnames</code>：更好的 className 写法</li>\n<li><code>react-router-config</code>：更好的 react-router 路由配置包</li>\n<li><code>mobx-react</code> &amp; <code>mobx-persist</code>：mobx 状态管理</li>\n<li><code>eslint</code> &amp; <code>lint-staged</code> &amp; <code>husky</code> &amp; <code>prettier</code>：代码校验配置</li>\n<li><code>eslint-config-alloy</code>：ESLint 配置插件</li>\n</ol>\n<p>dependencies:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save react react-dom react-router @loadable/component classnames react-router-config mobx-react mobx-persist<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>devDependencies：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint lint-staged husky@4.3.8 prettier<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"pre-commit-配置\"><a href=\"#pre-commit-配置\" class=\"headerlink\" title=\"pre-commit 配置\"></a>pre-commit 配置</h2><p>在安装完上面的依赖之后，通过 <code>cat .git/hooks/pre-commit</code> 来判断 husky 是否正常安装，如果不存在该文件，则说明安装失败，需要重新安装试试</p>\n<p><span style=\"color:red;font-weight:bold;\"><br>这里的 husky 使用 4.x 版本，5.x 版本已经不是免费协议了<br/>测试发现 node/14.15.1 版本会导致 husky 自动创建 .git/hooks/pre-commit 配置失败，升级 node/14.16.0 修复该问题<br></span></p>\n<p>在完成了以上安装配置之后，我们还需要对 <code>package.json</code> 添加相关配置</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"src/**/*.&#123;ts,tsx&#125;\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"eslint --cache --fix\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"git add\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"src/**/*.&#123;js,jsx&#125;\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"eslint --cache --fix\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"git add\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>到这里，我们的整个项目就具备了针对提交的文件做 ESLint 校验并修复格式化的能力了</p>\n<p><img src=\"/images/fe-base/eslint-error.png\" alt=\"ESLintError\"><em>**</em></p>\n<h2 id=\"编辑器配置\"><a href=\"#编辑器配置\" class=\"headerlink\" title=\"编辑器配置\"></a><a id=\"editor\">编辑器配置</a></h2><p>工欲善其事必先利其器，我们首要解决的是在团队内部编辑器协作问题，这个时候，就需要开发者的编辑器统一安装 <a href=\"https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig\">EditorConfig</a> 插件（这里以 vscode 插件为例）</p>\n<p>首先，我们在项目根目录新建一个配置文件：<code>.editorconfig</code></p>\n<p>参考配置：</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token constant\">root</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> true</span>\n\n<span class=\"token selector\">[*]</span>\n<span class=\"token constant\">indent_style</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> space</span>\n<span class=\"token constant\">indent_size</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> 2</span>\n<span class=\"token constant\">end_of_line</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> lf</span>\n<span class=\"token constant\">charset</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> utf-8</span>\n<span class=\"token constant\">trim_trailing_whitespace</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> true</span>\n<span class=\"token constant\">insert_final_newline</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>配置自动格式化与代码校验</strong></p>\n<p>在 vscode 编辑器中，Mac 快捷键 <code>command + ,</code> 来快速打开配置项，切换到 <code>workspace</code> 模块，并点击右上角的 <code>open settings json</code> 按钮，配置如下信息：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"editor.codeActionsOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"source.fixAll.tslint\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esbenp.prettier-vscode\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"[javascript]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esbenp.prettier-vscode\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"[typescript]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esbenp.prettier-vscode\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"typescript.tsdk\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node_modules/typescript/lib\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"[typescriptreact]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esbenp.prettier-vscode\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个时候，咱们的编辑器已经具备了保存并自动格式化的功能了</p>\n<h2 id=\"ESLint-Prettier\"><a href=\"#ESLint-Prettier\" class=\"headerlink\" title=\"ESLint + Prettier\"></a><a id=\"eslint\">ESLint + Prettier</a></h2><ol>\n<li><p><code>.eslintignore</code>：配置 ESLint 忽略文件</p>\n</li>\n<li><p><code>.eslintrc</code>：ESLint 编码规则配置，这里推荐使用业界统一标准，这里我推荐 AlloyTeam 的 <a href=\"https://github.com/AlloyTeam/eslint-config-alloy\">eslint-config-alloy</a>，按照文档安装对应的 ESLint 配置：</p>\n</li>\n<li> <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-plugin-react eslint-config-alloy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><code>.prettierignore</code>：配置 Prettier 忽略文件</p>\n</li>\n<li><p><code>.prettierrc</code>：格式化自定义配置</p>\n <pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"tabWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"bracketSpacing\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"overrides\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".prettierrc\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typescript\"</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>选择 <code>eslint-config-alloy</code> 的几大理由如下：</p>\n</li>\n<li><p>更清晰的 ESLint 提示：比如特殊字符需要转义的提示等等</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">error <span class=\"token variable\"><span class=\"token variable\">`</span>'<span class=\"token variable\">`</span></span> can be escaped with <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token operator\">&amp;</span>apos<span class=\"token punctuation\">;</span><span class=\"token variable\">`</span></span>, <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token operator\">&amp;</span>lsquo<span class=\"token punctuation\">;</span><span class=\"token variable\">`</span></span>, <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token operator\">&amp;</span><span class=\"token comment\">#39;</span><span class=\"token variable\">`</span></span>, <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token operator\">&amp;</span>rsquo<span class=\"token punctuation\">;</span><span class=\"token variable\">`</span></span>  react/no-unescaped-entities<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>更加严格的 ESLint 配置提示：比如会提示 ESLint 没有配置指明 React 的 version 就会告警 <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Warning: React version not specified <span class=\"token keyword\">in</span> eslint-plugin-react settings. See https://github.com/yannickcr/eslint-plugin-react<span class=\"token comment\">#configuration</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n 这里我们补上对 <code>react</code> 版本的配置 <pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// .eslintrc</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"detect\"</span> <span class=\"token comment\">// 表示探测当前 node_modules 安装的 react 版本</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"整体目录规划\"><a href=\"#整体目录规划\" class=\"headerlink\" title=\"整体目录规划\"></a><a id=\"dir\">整体目录规划</a></h2></li>\n</ol>\n<p>一个基本的前端单页应用，需要的大致的目录架构如下：</p>\n<p>这里以 <code>src</code> 下面的目录划分为例</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── app.tsx\n├── assets // 静态资源，会被打包优化\n│   ├── favicon.svg\n│   └── logo.svg\n├── common // 公共配置，比如统一请求封装，session 封装\n│   ├── http-client\n│   └── session\n├── components // 全局组件，分业务组件或 UI 组件\n│   ├── Toast\n├── config // 配置文件目录\n│   ├── index.ts\n├── hooks // 自定义 hook\n│   └── index.ts\n├── layouts // 模板，不同的路由，可以配置不同的模板\n│   └── index.tsx\n├── lib // 通常这里防止第三方库，比如 jweixin.js、jsBridge.js\n│   ├── README.md\n│   ├── jsBridge.js\n│   └── jweixin.js\n├── pages // 页面存放位置\n│   ├── components // 就近原则页面级别的组件\n│   ├── home\n├── routes // 路由配置\n│   └── index.ts\n├── store // 全局状态管理\n│   ├── common.ts\n│   ├── index.ts\n│   └── session.ts\n├── styles // 全局样式\n│   ├── global.less\n│   └── reset.less\n└── utils // 工具方法\n  └── index.ts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>OK，到这里，我们规划好了一个大致的前端项目目录结构，接下来我们要配置一下别名，来优化代码中的，比如： <code>import xxx from &#39;@/utils&#39;</code> 路径体验</p>\n<p><em>通常这里还会有一个 public 目录与 src 目录同级，该目录下的文件会直接拷贝到构建目录</em></p>\n<h3 id=\"别名配置\"><a href=\"#别名配置\" class=\"headerlink\" title=\"别名配置\"></a>别名配置</h3><p>别名的配置，我们需要关注的是两个地方：<code>vite.config.ts</code> &amp; <code>tsconfig.json</code></p>\n<p>其中 <code>vite.config.ts</code> 用来编译识别用的；<code>tsconfig.json</code> 是用来给 Typescript 识别用的；</p>\n<p>这里建议采用的是 <code>@/</code> 开头，为什么不用 <code>@</code> 开头，这是为了避免跟业界某些 npm 包名冲突（例如 @vitejs）</p>\n<ul>\n<li><code>vite.config.ts</code></li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// vite.config.ts</span>\n<span class=\"token punctuation\">&#123;</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">'@/'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@/config'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@/components'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/components'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@/styles'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/styles'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@/utils'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/utils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@/common'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/common'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@/assets'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/assets'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@/pages'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/pages'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@/routes'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/routes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@/layouts'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/layouts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@/hooks'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/hooks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'@/store'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/store'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>tsconfig.json</code></li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@/components/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/components/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@/styles/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/styles/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@/config/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/config/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@/utils/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/utils/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@/common/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/common/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@/assets/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/assets/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@/pages/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/pages/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@/routes/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/routes/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@/hooks/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/hooks/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"@/store/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/store/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./typings/\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./typings\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./vite.config.ts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"从-0-到-1-vite-构建配置\"><a href=\"#从-0-到-1-vite-构建配置\" class=\"headerlink\" title=\"从 0 到 1 vite 构建配置\"></a><a id=\"vite\">从 0 到 1 vite 构建配置</a></h2><p><strong>截止作者写该篇文章时，<code>vite</code> 版本为 <code>vite/2.1.2</code>，以下所有配置仅针对该版本负责</strong></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>默认的 <code>vite</code> 初始化项目，是不会给我们创建 <code>.env</code>，<code>.env.production</code>，<code>.env.devlopment</code> 三个配置文件的，然后官方模板默认提供的 <code>package.json</code> 文件中，三个 <code>script</code> 分别会要用到这几个文件，所以需要我们<strong>手动先创建</strong>，这里提供官方文档：<a href=\"https://vitejs.dev/guide/env-and-mode.html#env-files\">.env 配置</a></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"># package.json\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 等于 vite -m development，此时 command='serve',mode='development'</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc &amp;&amp; vite build\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 等于 vite -m production，此时 command='build', mode='production'</span>\n    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite preview\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start:qa\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite -m qa\"</span> <span class=\"token comment\">// 自定义命令，会寻找 .env.qa 的配置文件;此时 command='serve'，mode='qa'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>同时这里的命令，对应的配置文件：<a href=\"https://vitejs.dev/guide/env-and-mode.html#modes\">mode 区分</a><br><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ConfigEnv <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> command<span class=\"token punctuation\">,</span> mode <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> ConfigEnv</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 这里的 command 默认 === 'serve'</span>\n  <span class=\"token comment\">// 当执行 vite build 时，command === 'build'</span>\n  <span class=\"token comment\">// 所以这里可以根据 command 与 mode 做条件判断来导出对应环境的配置</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>具体配置文件参考：<a href=\"https://github.com/lichenbuliren/fe-project-base/blob/main/vite.config.ts\">fe-project-vite/vite.config.ts</a></p>\n<h3 id=\"路由规划\"><a href=\"#路由规划\" class=\"headerlink\" title=\"路由规划\"></a>路由规划</h3><p>首先，一个项目最重要的部分，就是路由配置；那么我们需要一个配置文件作为入口来配置所有的页面路由，这里以 <code>react-router</code> 为例：</p>\n<h4 id=\"路由配置文件配置\"><a href=\"#路由配置文件配置\" class=\"headerlink\" title=\"路由配置文件配置\"></a>路由配置文件配置</h4><p><code>src/routes/index.ts</code>，这里我们引入的了 <code>@loadable/component</code> 库来做路由动态加载，<a href=\"https://vitejs.dev/guide/features.html#dynamic-import-polyfill\">vite 默认支持动态加载特性</a>，以此提高程序打包效率</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> loadable <span class=\"token keyword\">from</span> <span class=\"token string\">'@loadable/component'</span>\n<span class=\"token keyword\">import</span> Layout<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> H5Layout <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/layouts'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> RouteConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-config'</span>\n<span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/home'</span>\n\n<span class=\"token keyword\">const</span> routesConfig<span class=\"token operator\">:</span> RouteConfig<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    exact<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> Home\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// hybird 路由</span>\n  <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/hybird'</span><span class=\"token punctuation\">,</span>\n    exact<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> Layout<span class=\"token punctuation\">,</span>\n    routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span>\n        path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n        exact<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        component<span class=\"token operator\">:</span> <span class=\"token function\">loadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/pages/hybird'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// H5 相关路由</span>\n  <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/h5'</span><span class=\"token punctuation\">,</span>\n    exact<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> H5Layout<span class=\"token punctuation\">,</span>\n    routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span>\n        path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n        exact<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        component<span class=\"token operator\">:</span> <span class=\"token function\">loadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/pages/h5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> routesConfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"入口-main-tsx-文件配置路由路口\"><a href=\"#入口-main-tsx-文件配置路由路口\" class=\"headerlink\" title=\"入口 main.tsx 文件配置路由路口\"></a>入口 main.tsx 文件配置路由路口</h4><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> BrowserRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@/styles/global.less'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> renderRoutes <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-config'</span>\n<span class=\"token keyword\">import</span> routes <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BrowserRouter</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">renderRoutes</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">BrowserRouter</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的面的 <code>renderRoutes</code> 采用的 <code>react-router-config</code> 提供的方法，其实就是咱们 <code>react-router</code> 的配置写法，通过查看 <a href=\"https://github.com/ReactTraining/react-router/blob/master/packages/react-router-config/modules/renderRoutes.js\">源码</a> 如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import React from &quot;react&quot;;\nimport &#123; Switch, Route &#125; from &quot;react-router&quot;;\n\nfunction renderRoutes(routes, extraProps &#x3D; &#123;&#125;, switchProps &#x3D; &#123;&#125;) &#123;\n  return routes ? (\n    &lt;Switch &#123;...switchProps&#125;&gt;\n      &#123;routes.map((route, i) &#x3D;&gt; (\n        &lt;Route\n          key&#x3D;&#123;route.key || i&#125;\n          path&#x3D;&#123;route.path&#125;\n          exact&#x3D;&#123;route.exact&#125;\n          strict&#x3D;&#123;route.strict&#125;\n          render&#x3D;&#123;props &#x3D;&gt;\n            route.render ? (\n              route.render(&#123; ...props, ...extraProps, route: route &#125;)\n            ) : (\n              &lt;route.component &#123;...props&#125; &#123;...extraProps&#125; route&#x3D;&#123;route&#125; &#x2F;&gt;\n            )\n          &#125;\n        &#x2F;&gt;\n      ))&#125;\n    &lt;&#x2F;Switch&gt;\n  ) : null;\n&#125;\n\nexport default renderRoutes;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过以上两个配置，咱们就基本能把项目跑起来了，同时也具备了路由的懒加载能力；</p>\n<p>执行 <code>npm run build</code>，查看文件输出，就能发现我们的动态路由加载已经配置成功了<br><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ tsc <span class=\"token operator\">&amp;&amp;</span> vite build\nvite v2.1.2 building <span class=\"token keyword\">for</span> production<span class=\"token punctuation\">..</span>.\n✓ <span class=\"token number\">53</span> modules transformed.\ndist/index.html                  <span class=\"token number\">0</span>.41kb\ndist/assets/index.c034ae3d.js    <span class=\"token number\">0</span>.11kb / brotli: <span class=\"token number\">0</span>.09kb\ndist/assets/index.c034ae3d.js.map <span class=\"token number\">0</span>.30kb\ndist/assets/index.f0d0ea4f.js    <span class=\"token number\">0</span>.10kb / brotli: <span class=\"token number\">0</span>.09kb\ndist/assets/index.f0d0ea4f.js.map <span class=\"token number\">0</span>.29kb\ndist/assets/index.8105412a.js    <span class=\"token number\">2</span>.25kb / brotli: <span class=\"token number\">0</span>.89kb\ndist/assets/index.8105412a.js.map <span class=\"token number\">8</span>.52kb\ndist/assets/index.7be450e7.css   <span class=\"token number\">1</span>.25kb / brotli: <span class=\"token number\">0</span>.57kb\ndist/assets/vendor.7573543b.js   <span class=\"token number\">151</span>.44kb / brotli: <span class=\"token number\">43</span>.17kb\ndist/assets/vendor.7573543b.js.map <span class=\"token number\">422</span>.16kb\n✨  Done <span class=\"token keyword\">in</span> <span class=\"token number\">9</span>.34s.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>细心的同学可能会发现，上面咱们的路由配置里面，特意拆分了两个 <code>Layout</code> &amp; <code>H5Layout</code>，这里这么做的目的是为了区分在微信 h5 与 hybird 之间的差异化而设置的模板入口，大家可以根据自己的业务来决定是否需要 <code>Layout</code> 层</p>\n<h3 id=\"样式处理\"><a href=\"#样式处理\" class=\"headerlink\" title=\"样式处理\"></a>样式处理</h3><p>说到样式处理，这里咱们的示例采用的是 <code>.less</code> 文件，所以在项目里面需要安装对应的解析库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev <span class=\"token function\">less</span> postcss<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果要支持 <code>css modules</code> 特性，需要在 <code>vite.config.ts</code> 文件中开启对应的配置项：<br><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//  vite.config.ts</span>\n<span class=\"token punctuation\">&#123;</span>\n  css<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    preprocessorOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      less<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 支持内联 JavaScript</span>\n        javascriptEnabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 样式小驼峰转化</span>\n      localsConvention<span class=\"token operator\">:</span> <span class=\"token string\">'camelCase'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"编译构建\"><a href=\"#编译构建\" class=\"headerlink\" title=\"编译构建\"></a>编译构建</h3><p>其实到这里，基本就讲完了 vite 的整个构建，参考前面提到的配置文件：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> command<span class=\"token punctuation\">,</span> mode <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> ConfigEnv</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> envFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.env'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.env.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>mode<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// 动态的将所有配置文件环境变量赋值到 process.env 上面</span>\n  <span class=\"token comment\">// 这个时候无法使用 import.meta.env 变量</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> file <span class=\"token keyword\">of</span> envFiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> envConfig <span class=\"token operator\">=</span> dotenv<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> k <span class=\"token keyword\">in</span> envConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>envConfig<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> envConfig<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> _config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span>\n    base<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VITE_STATIC_CDN</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">===</span> <span class=\"token string\">'serve'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token operator\">...</span>_config<span class=\"token punctuation\">,</span>\n      server<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 反向代理</span>\n        proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          api<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            target<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VITE_API_HOST</span><span class=\"token punctuation\">,</span>\n            changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">rewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\/api</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> _config\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这里，我们利用了一个 <code>dotenv</code> 的库，来帮我们将配置的内容绑定到 <code>process.env</code> 上面供我们配置文件使用</p>\n<h2 id=\"mobx-6-x-react-typescript-实践\"><a href=\"#mobx-6-x-react-typescript-实践\" class=\"headerlink\" title=\"mobx@6.x + react + typescript 实践\"></a><a href=\"mailto:mobx@6.x\">mobx@6.x</a> + react + typescript 实践</h2><p>作者在使用 <code>mobx</code> 的时候，版本已经是 <a href=\"mailto:`mobx@6.x\">`mobx@6.x</a>`，发现这里相比于旧版本，API 的使用上有了一些差异，特地在这里分享下踩坑经历</p>\n<h3 id=\"Store-划分\"><a href=\"#Store-划分\" class=\"headerlink\" title=\"Store 划分\"></a>Store 划分</h3><p>store 的划分，主要参考本文的<a href=\"https://github.com/lichenbuliren/fe-project-base\">示例</a><br>需要注意的是，在 store 初始化的时候，如果需要数据能够响应式绑定，需要在初始化的时候，给默认值，不能设置为 undefined 或者 null，这样子的话，数据是无法实现响应式的</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// store.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makeAutoObservable<span class=\"token punctuation\">,</span> observable <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CommonStore</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 这里必须给定一个初始化的只，否则响应式数据不生效</span>\n  title <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  theme <span class=\"token operator\">=</span> <span class=\"token string\">'default'</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">setTheme</span><span class=\"token punctuation\">(</span>theme<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>theme <span class=\"token operator\">=</span> theme\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Store-注入\"><a href=\"#Store-注入\" class=\"headerlink\" title=\"Store 注入\"></a>Store 注入</h3><p><code>mobx@6x</code>的数据注入，采用的 <code>react</code> 的 <code>context</code> 特性；主要分成以下三个步骤</p>\n<h4 id=\"根节点变更\"><a href=\"#根节点变更\" class=\"headerlink\" title=\"根节点变更\"></a>根节点变更</h4><p>通过 <code>Provider</code> 组件，注入全局 <code>store</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Provider <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx-react'</span>\n<span class=\"token keyword\">import</span> counterStore <span class=\"token keyword\">from</span> <span class=\"token string\">'./counter'</span>\n<span class=\"token keyword\">import</span> commonStore <span class=\"token keyword\">from</span> <span class=\"token string\">'./common'</span>\n\n<span class=\"token keyword\">const</span> stores <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  counterStore<span class=\"token punctuation\">,</span>\n  commonStore\n<span class=\"token punctuation\">&#125;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Provider stores<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>stores<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>BrowserRouter<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">renderRoutes</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BrowserRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a style=\"color:red;\"><em>这里的 Provider 是由 mobx-react 提供的</em></a><br>通过查看源码我们会发现，<code>Provier</code>内部实现也是 <a href=\"https://reactjs.org/docs/context.html\">React Context</a>：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// mobx-react Provider</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> shallowEqual <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./utils/utils\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> IValueMap <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./types/IValueMap\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> MobXProviderContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">createContext</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IValueMap<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProviderProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IValueMap</span> <span class=\"token punctuation\">&#123;</span>\n    children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Provider</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ProviderProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 除开 children 属性，其他的都作为 store 值</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>stores <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props\n    <span class=\"token keyword\">const</span> parentValue <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MobXProviderContext<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// store 引用最新值</span>\n    <span class=\"token keyword\">const</span> mutableProviderRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>parentValue<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>stores <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> mutableProviderRef<span class=\"token punctuation\">.</span>current\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> newValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>value<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>stores <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// spread in previous state for the context based stores</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"MobX Provider: The set of provided stores has changed. See: https://github.com/mobxjs/mobx-react#the-set-of-provided-stores-has-changed-error.\"</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>MobXProviderContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>children<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MobXProviderContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 供调试工具显示 Provider 名称</span>\nProvider<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token string\">\"MobXProvider\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Store-使用\"><a href=\"#Store-使用\" class=\"headerlink\" title=\"Store 使用\"></a>Store 使用</h3><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\">React Hook useContext</a></li>\n</ul>\n","feature":true,"text":"使用 Vite + React + Typescript 打造一个前端单页应用模板 最近前端大火的 Vite 2.0 版本终于出来了，在这里分享一下如何使用 vite 构建一个前端单页应用 该文章主要面向对 Vite 感兴趣，或者做前端项目架构的同学 源码地址：fe-projec...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"react","slug":"react","count":1,"path":"api/categories/react.json"}],"tags":[{"name":"react","slug":"react","count":3,"path":"api/tags/react.json"},{"name":"typescript","slug":"typescript","count":2,"path":"api/tags/typescript.json"},{"name":"vite","slug":"vite","count":1,"path":"api/tags/vite.json"},{"name":"single-page","slug":"single-page","count":1,"path":"api/tags/single-page.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-Vite-React-Typescript-%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E5%89%8D%E7%AB%AF%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">使用 Vite + React + Typescript 打造一个前端单页应用模板</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">初始化项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">安装项目依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pre-commit-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">pre-commit 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">编辑器配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ESLint-Prettier\"><span class=\"toc-text\">ESLint + Prettier</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%BD%93%E7%9B%AE%E5%BD%95%E8%A7%84%E5%88%92\"><span class=\"toc-text\">整体目录规划</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%AB%E5%90%8D%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">别名配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8E-0-%E5%88%B0-1-vite-%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">从 0 到 1 vite 构建配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%92\"><span class=\"toc-text\">路由规划</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">路由配置文件配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A5%E5%8F%A3-main-tsx-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1%E8%B7%AF%E5%8F%A3\"><span class=\"toc-text\">入口 main.tsx 文件配置路由路口</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E5%BC%8F%E5%A4%84%E7%90%86\"><span class=\"toc-text\">样式处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">编译构建</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mobx-6-x-react-typescript-%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">mobx@6.x + react + typescript 实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Store-%E5%88%92%E5%88%86\"><span class=\"toc-text\">Store 划分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Store-%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">Store 注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E8%8A%82%E7%82%B9%E5%8F%98%E6%9B%B4\"><span class=\"toc-text\">根节点变更</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Store-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Store 使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol></li></ol>","author":{"name":"Heaven","avatar":"https://heaven-blog-1255884785.file.myqcloud.com/github-avatar.jpeg","link":""},"mapped":true,"prev_post":{},"next_post":{"title":"高性能多级多选组件开发","uid":"b96b7a279b1101ad47f9f7bca4cd8e0d","slug":"高性能多级多选组件开发","date":"2020-05-31T12:13:09.000Z","updated":"2021-04-06T12:17:32.059Z","comments":true,"path":"api/articles/高性能多级多选组件开发.json","cover":"https://heaven-blog-1255884785.file.myqcloud.com/poster-thumbnail.jpg","text":" 最近在项目开发过程中，有个一个多级多选的公共组件开发需求，特在这里记录下开发过程中所做的一些优化以及分享一下我是如何从零开发并设计一个组件的思路，希望给阅读这篇文章的读者带来一点收获。 效果预览单个项选中 多个部分项选中 需求分析在拿到需求之后，我们首先要做的是需求分析；通过上...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Typescript","slug":"Typescript","count":1,"path":"api/tags/Typescript.json"},{"name":"React","slug":"React","count":1,"path":"api/tags/React.json"},{"name":"性能","slug":"性能","count":1,"path":"api/tags/性能.json"}],"author":{"name":"Heaven","avatar":"https://heaven-blog-1255884785.file.myqcloud.com/github-avatar.jpeg","link":""}}}