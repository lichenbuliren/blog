{"title":"React Hook 不完全指南","uid":"e88fe6a6229c00317a00aa25a4bec6fe","slug":"react-hook","date":"2019-05-18T08:31:27.000Z","updated":"2021-04-06T12:16:13.650Z","comments":true,"path":"api/articles/react-hook.json","cover":"https://heaven-blog-1255884785.file.myqcloud.com/poster-thumbnail.jpg","content":"<h1 id=\"React-Hook-不完全指南\"><a href=\"#React-Hook-不完全指南\" class=\"headerlink\" title=\"React Hook 不完全指南\"></a>React Hook 不完全指南</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>本文内容大部分参考了 <a href=\"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\">overreacted.io</a> 博客一文，同时结合 <a href=\"https://zh-hans.reactjs.org/docs/hooks-intro.html\">React Hook 官方</a> 文章，整理并归纳一些笔记和输出个人的一些理解</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"什么是-Hook-？\"><a href=\"#什么是-Hook-？\" class=\"headerlink\" title=\"什么是 Hook ？\"></a>什么是 Hook ？</h2><blockquote>\n<p>官方介绍：Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n</blockquote>\n<h2 id=\"React-中内置的-Hook-API\"><a href=\"#React-中内置的-Hook-API\" class=\"headerlink\" title=\"React 中内置的 Hook API\"></a><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#usestate\">React 中内置的 Hook API</a></h2><ul>\n<li><p>基础 Hook</p>\n<ul>\n<li>useState<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 传入初始值，作为 state</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//  `惰性初始 state`；传入函数，由函数计算出的值作为 state</span>\n<span class=\"token comment\">// 此函数只在初始渲染时被调用</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token function\">someExpensiveComputation</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> initialState\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>useEffect</p>\n<ul>\n<li>该 Hook 接收一个包含命令式、且可能有副作用代码的函数.</li>\n<li>在函数组件主体内（这里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器、记录日志以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性。</li>\n<li><strong>使用 useEffect 完成副作用操作，赋值给 useEffect 的函数会在组件渲染到屏幕之后</strong>。你可以把 effect 看作从 React 的纯函数式世界通往命令式世界的逃生通道。</li>\n<li>默认情况下，<strong style=\"color: red;\">effect 将在每轮渲染结束后执行</strong>，但你可以选择让它 在只有某些值改变的时候才执行。详情见后面。</li>\n<li><p><strong>清除 effect</strong><br>通常，组件卸载时需要清除 effect 创建的诸如订阅或计时器 ID 等资源。要实现这一点，useEffect 函数需返回一个清除函数。以下就是一个创建订阅的例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> subscription <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 清除订阅</span>\n    subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>依赖<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>useContext</li>\n</ul>\n</li>\n<li>额外的 Hook<ul>\n<li>useReducer</li>\n<li>useCallback</li>\n<li>useMemo</li>\n<li>useRef</li>\n<li>useImperativeHandle</li>\n<li>useLayoutEffect</li>\n<li>useDebugValue</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"我们为什么选择使用-Hook\"><a href=\"#我们为什么选择使用-Hook\" class=\"headerlink\" title=\"我们为什么选择使用 Hook ?\"></a>我们为什么选择使用 Hook ?</h2><h3 id=\"1-在组件之间复用状态逻辑很难\"><a href=\"#1-在组件之间复用状态逻辑很难\" class=\"headerlink\" title=\"1. 在组件之间复用状态逻辑很难\"></a>1. 在组件之间复用状态逻辑很难</h3><blockquote>\n<p>React 没有提供将可复用性行为“附加”到组件的途径（例如，把组件连接到 store）。如果你使用过 React 一段时间，你也许会熟悉一些解决此类问题的方案，比如 render props 和 高阶组件。但是这类方案需要重新组织你的组件结构，这可能会很麻烦，使你的代码难以理解。如果你在 React DevTools 中观察过 React 应用，你会发现由 providers，consumers，高阶组件，render props 等其他抽象层组成的组件会形成“嵌套地狱”。尽管我们可以在 DevTools 过滤掉它们，但这说明了一个更深层次的问题：React 需要为共享状态逻辑提供更好的原生途径。</p>\n</blockquote>\n<p>你可以使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。Hook 使你在无需修改组件结构的情况下复用状态逻辑。 这使得在组件间或社区内共享 Hook 变得更便捷。</p>\n<h3 id=\"2-复杂组件变得难以理解\"><a href=\"#2-复杂组件变得难以理解\" class=\"headerlink\" title=\"2. 复杂组件变得难以理解\"></a>2. 复杂组件变得难以理解</h3><blockquote>\n<p>我们经常维护一些组件，组件起初很简单，但是逐渐会被状态逻辑和副作用充斥。每个生命周期常常包含一些不相关的逻辑。例如，组件常常在 componentDidMount 和 componentDidUpdate 中获取数据。但是，同一个 componentDidMount 中可能也包含很多其它的逻辑，如设置事件监听，而之后需在 componentWillUnmount 中清除。相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起。如此很容易产生 bug，并且导致逻辑不一致。</p>\n</blockquote>\n<p>在多数情况下，不可能将组件拆分为更小的粒度，因为状态逻辑无处不在。这也给测试带来了一定挑战。同时，这也是很多人将 React 与状态管理库结合使用的原因之一。但是，这往往会引入了很多抽象概念，需要你在不同的文件之间来回切换，使得复用变得更加困难。</p>\n<p>为了解决这个问题，Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。你还可以使用 reducer 来管理组件的内部状态，使其更加可预测。</p>\n<h3 id=\"3-用更少的代码，实现同样的效果\"><a href=\"#3-用更少的代码，实现同样的效果\" class=\"headerlink\" title=\"3. 用更少的代码，实现同样的效果\"></a>3. 用更少的代码，实现同样的效果</h3><p>下面的代码可以直观的体现出来，在某些场景下，使用 hook 来实现对应的功能，可以节省大部分的代码</p>\n<iframe src=\"https://codesandbox.io/embed/9j77887n1r?fontsize=14\" title=\"CounterHook vs CounterClass\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n\n<h4 id=\"3-1-清除副作用更加紧凑\"><a href=\"#3-1-清除副作用更加紧凑\" class=\"headerlink\" title=\"3.1 清除副作用更加紧凑\"></a>3.1 清除副作用更加紧凑</h4><p>对比 <code>Class</code> 组件来说，清除副作用要简单的多，如下代码，在 <code>useEffect</code> hook 里面返回一个函数，当我们的函数组件卸载的时候，就会自动执行这个函数，从而来清除副作用。想想我们在 <code>Class</code> 组件里面需要在 <code>componentWillUnmount</code> 生命周期里面去编写对应的代码。</p>\n<p>对比两者我们发现，使用 <code>useEffect</code> 的方式，能够将挂载和卸载的逻辑更加紧密的耦合在一起，从而减少 BUG 的发生</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 比如给 windows 挂载监听函数</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reszie'</span><span class=\"token punctuation\">,</span> handleRezie<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleRezie<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"如何正确的使用-Hook\"><a href=\"#如何正确的使用-Hook\" class=\"headerlink\" title=\"如何正确的使用 Hook ?\"></a>如何正确的使用 Hook ?</h2><h3 id=\"1-使用规则\"><a href=\"#1-使用规则\" class=\"headerlink\" title=\"1. 使用规则\"></a>1. 使用规则</h3><ol>\n<li>只在最顶层使用 Hook：不要在循环，条件或嵌套函数中调用 Hook， 确保总是在你的 React 函数的最顶层调用他们。</li>\n<li>不要在普通的 JavaScript 函数中调用 Hook。你可以<ul>\n<li>[x] 在 React 的函数组件中调用 Hook</li>\n<li>[x] 在自定义 Hook 中调用其他 Hook</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-只有在自己依赖更新时才执行-effect\"><a href=\"#2-只有在自己依赖更新时才执行-effect\" class=\"headerlink\" title=\"2. 只有在自己依赖更新时才执行 effect\"></a>2. 只有在自己依赖更新时才执行 effect</h3><p><strong>使用 useEffect 完成副作用操作，赋值给 useEffect 的函数会在组件渲染到屏幕之后</strong>；牢记这句话。</p>\n<p>仔细观察如下代码，当函数组件里面，有多个 <code>effect</code> 的时候，默认的 <code>effect</code> 将在每次 UI render 之后被调用。当我们通过 <code>useEffect</code> 的第二个数组类型参数，指明当前 <code>effect</code> 的依赖，就能避免不相关的执行开销了。</p>\n<p>通过启用 <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\">eslint-plugin-react-hooks</a> 插件，来强制提醒我们在使用 <code>effect</code> 的时候，申明所需要的依赖</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">\"react-hooks\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"react-hooks/rules-of-hooks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-hooks/exhaustive-deps\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warn\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CounterHook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heaven'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">counterWithHook </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>count<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you name is'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>Counter <span class=\"token keyword\">with</span> Hook<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>You click <span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span> times<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Click me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"输入姓名\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        your name is <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-1-不要忘记函数依赖\"><a href=\"#2-1-不要忘记函数依赖\" class=\"headerlink\" title=\"2.1 不要忘记函数依赖\"></a>2.1 不要忘记函数依赖</h4><p>对于 <code>useEffect</code> 内部方法，一旦引用外部的函数，那么这个时候需要注意了：<br><strong>需要把 useEffect 内部引用到的方式，声明为当前 effect 的依赖</strong><br>在下图的代码中，我们可以看到，在 effect 函数内部，引入外部的函数，我们的 <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\">eslint-plugin-react-hooks</a> 插件会自动提示我们需要把对应的函数作为依赖添加进去</p>\n<p>不规范示例：这里在安装了插件的情况下，会自动提示我们将 <code>fetchData</code> 函数移入 effect 内部</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFetchUrl</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>query<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>正确的写法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFetchUrl</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://hn.algolia.com/api/v1/search?query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>query<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">getFetchUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>query<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3、理解每一次的-Rendering\"><a href=\"#3、理解每一次的-Rendering\" class=\"headerlink\" title=\"3、理解每一次的 Rendering\"></a>3、理解每一次的 Rendering</h3><blockquote>\n<p>每一次渲染都有它自己的 Props and State<br>每一次渲染都有它自己的事件处理函数<br>每次渲染都有它自己的 Effects</p>\n</blockquote>\n<p>运行如下代码之后，在我们点击 <code>Show alert</code> 按钮之后，然后点击 <code>Click me</code> 按钮，<code>alert</code> 输出的永远是在点击的那个时刻的 count;</p>\n<p>换句话来说；在 hooks 组件里面，每一次的渲染，都相当于记录当前次的『快照』</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleAlertClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Yout clicked me: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>count<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Yout clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>count<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>You clicked <span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span> times<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Click me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleAlertClick<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Show alert<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Counter<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"使用自定义-Hook\"><a href=\"#使用自定义-Hook\" class=\"headerlink\" title=\"使用自定义 Hook\"></a>使用自定义 Hook</h2><blockquote>\n<p>通过自定义 Hook，可以将组件逻辑提取到可重用的函数中。</p>\n</blockquote>\n<p>当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中。而组件和 Hook 都是函数，所以也同样适用这种方式。</p>\n<p><strong>自定义 Hook 是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook。</strong></p>\n<h3 id=\"自定义-useService-hook\"><a href=\"#自定义-useService-hook\" class=\"headerlink\" title=\"自定义 useService hook\"></a>自定义 useService hook</h3><p><code>useService.js</code> 自定义的一个 server hook，该 hook 封装了 <code>ajax</code> 请求中的 <code>&#123; loading, error, response &#125;</code> 三个基础逻辑；有了这个 <code>hook</code> 我们就能很轻松的在每次网络请求里面去处理各种异常逻辑了；详细用法看文章最后的 <a href=\"#table-分页操作实例\">Table 分页操作实例</a></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useEffect<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">,</span> useCallback <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isEqual <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useService</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">service<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> prevParams <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>callback<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> response <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useServiceCallback</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>prevParams<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      prevParams<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> params\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> response <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useServiceCallback</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">service</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>response<span class=\"token punctuation\">,</span> setResponse<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 使用 useCallback，来判断 service 是否改变</span>\n  <span class=\"token keyword\">const</span> callback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">params</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">service</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n          <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">setResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>service<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>callback<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> response <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"实例剖析\"><a href=\"#实例剖析\" class=\"headerlink\" title=\"实例剖析\"></a>实例剖析</h2><h3 id=\"Table-分页操作\"><a href=\"#Table-分页操作\" class=\"headerlink\" title=\"Table 分页操作\"></a>Table 分页操作</h3><p>如下代码，使用 <code>hook</code> 的方式来实现表格的分页，数据请求操作，</p>\n<p><a href=\"https://codesandbox.io/s/0o8169rx4w?fontsize=14\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit 0o8169rx4w\"></a></p>\n<h3 id=\"跑马灯中奖\"><a href=\"#跑马灯中奖\" class=\"headerlink\" title=\"跑马灯中奖\"></a>跑马灯中奖</h3><p>使用 <code>hook</code> 实现一个简易版的跑马灯抽奖逻辑</p>\n<p><a href=\"https://codesandbox.io/s/reactprize-8316t?fontsize=14\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit react-prize\"></a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://zh-hans.reactjs.org/docs/hooks-overview.html\">官方 Hook 介绍</a><br><a href=\"https://zh-hans.reactjs.org/docs/hooks-rules.html\">Hook 规则</a><br><a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html\">Hook API 索引</a><br><a href=\"https://www.robinwieruch.de/react-hooks-fetch-data/\">如何在 Hook 中发起请求</a><br><a href=\"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\">useEffect 详解</a></p>\n","feature":null,"text":"React Hook 不完全指南前言 本文内容大部分参考了 overreacted.io 博客一文，同时结合 React Hook 官方 文章，整理并归纳一些笔记和输出个人的一些理解 什么是 Hook ？ 官方介绍：Hook 是 React 16.8 的新增特性。它可以让你在不编...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"React","slug":"React","count":2,"path":"api/categories/React.json"}],"tags":[{"name":"javascript","slug":"javascript","count":4,"path":"api/tags/javascript.json"},{"name":"react","slug":"react","count":3,"path":"api/tags/react.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#React-Hook-%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97\"><span class=\"toc-text\">React Hook 不完全指南</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-Hook-%EF%BC%9F\"><span class=\"toc-text\">什么是 Hook ？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-%E4%B8%AD%E5%86%85%E7%BD%AE%E7%9A%84-Hook-API\"><span class=\"toc-text\">React 中内置的 Hook API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E4%BD%BF%E7%94%A8-Hook\"><span class=\"toc-text\">我们为什么选择使用 Hook ?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E5%A4%8D%E7%94%A8%E7%8A%B6%E6%80%81%E9%80%BB%E8%BE%91%E5%BE%88%E9%9A%BE\"><span class=\"toc-text\">1. 在组件之间复用状态逻辑很难</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A4%8D%E6%9D%82%E7%BB%84%E4%BB%B6%E5%8F%98%E5%BE%97%E9%9A%BE%E4%BB%A5%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">2. 复杂组件变得难以理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%94%A8%E6%9B%B4%E5%B0%91%E7%9A%84%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%90%8C%E6%A0%B7%E7%9A%84%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">3. 用更少的代码，实现同样的效果</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E6%B8%85%E9%99%A4%E5%89%AF%E4%BD%9C%E7%94%A8%E6%9B%B4%E5%8A%A0%E7%B4%A7%E5%87%91\"><span class=\"toc-text\">3.1 清除副作用更加紧凑</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E4%BD%BF%E7%94%A8-Hook\"><span class=\"toc-text\">如何正确的使用 Hook ?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8%E8%A7%84%E5%88%99\"><span class=\"toc-text\">1. 使用规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8F%AA%E6%9C%89%E5%9C%A8%E8%87%AA%E5%B7%B1%E4%BE%9D%E8%B5%96%E6%9B%B4%E6%96%B0%E6%97%B6%E6%89%8D%E6%89%A7%E8%A1%8C-effect\"><span class=\"toc-text\">2. 只有在自己依赖更新时才执行 effect</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E4%B8%8D%E8%A6%81%E5%BF%98%E8%AE%B0%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">2.1 不要忘记函数依赖</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%90%86%E8%A7%A3%E6%AF%8F%E4%B8%80%E6%AC%A1%E7%9A%84-Rendering\"><span class=\"toc-text\">3、理解每一次的 Rendering</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89-Hook\"><span class=\"toc-text\">使用自定义 Hook</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89-useService-hook\"><span class=\"toc-text\">自定义 useService hook</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E5%89%96%E6%9E%90\"><span class=\"toc-text\">实例剖析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Table-%E5%88%86%E9%A1%B5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Table 分页操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%91%E9%A9%AC%E7%81%AF%E4%B8%AD%E5%A5%96\"><span class=\"toc-text\">跑马灯中奖</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol></li></ol>","author":{"name":"Heaven","avatar":"https://heaven-blog-1255884785.file.myqcloud.com/github-avatar.jpeg","link":""},"mapped":true,"prev_post":{"title":"小程序插件开发小结","uid":"c00700d4b7ee04c5f2fbc4cd62042e68","slug":"miniprogram-plugin","date":"2019-05-29T02:14:05.000Z","updated":"2021-04-06T12:18:50.819Z","comments":true,"path":"api/articles/miniprogram-plugin.json","cover":"https://heaven-blog-1255884785.file.myqcloud.com/poster-thumbnail.jpg","text":"小程序插件开发小结 本文主要是整理了与总结了一些小程序插件开发相关资料，按顺序阅读按文章即可对小程序插件开发有个基本了解了 基础概念什么是小程序插件 插件是对一组js 接口、自定义组件或页面的封装，用于嵌入到小程序中使用。插件不能独立运行，必须嵌入在其他小程序中才能被用户使用；而...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"wechat","slug":"wechat","count":1,"path":"api/categories/wechat.json"}],"tags":[{"name":"javascript","slug":"javascript","count":4,"path":"api/tags/javascript.json"},{"name":"miniprogram","slug":"miniprogram","count":1,"path":"api/tags/miniprogram.json"}],"author":{"name":"Heaven","avatar":"https://heaven-blog-1255884785.file.myqcloud.com/github-avatar.jpeg","link":""}},"next_post":{"title":"CSS GPU Animation: Doing It Right","uid":"4931952b103f0e0f53e02f61f21073ef","slug":"CSS-GPU-Animation-Doing-It-Right","date":"2017-09-22T03:36:43.000Z","updated":"2021-04-06T12:08:05.830Z","comments":true,"path":"api/articles/CSS-GPU-Animation-Doing-It-Right.json","cover":"https://heaven-blog-1255884785.file.myqcloud.com/css-animation.png","text":"CSS GPU Animation: Doing It Right 看完这篇文章收货良多，特地在这里留存下。 原文地址：https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/译文版：https:...","link":"","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[],"tags":[],"author":{"name":"Heaven","avatar":"https://heaven-blog-1255884785.file.myqcloud.com/github-avatar.jpeg","link":""}}}