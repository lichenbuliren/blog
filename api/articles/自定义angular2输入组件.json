{"title":"自定义angular2输入组件","uid":"ebefc0122063cc2fea0104d51ae15024","slug":"自定义angular2输入组件","date":"2016-11-24T11:17:44.000Z","updated":"2021-04-06T12:17:28.401Z","comments":true,"path":"api/articles/自定义angular2输入组件.json","cover":"https://heaven-blog-1255884785.file.myqcloud.com/poster-thumbnail.jpg","content":"<h1 id=\"构建一个自定义-angular2-输入组件\"><a href=\"#构建一个自定义-angular2-输入组件\" class=\"headerlink\" title=\"构建一个自定义 angular2 输入组件\"></a>构建一个自定义 angular2 输入组件</h1><p>今天我们来学习如何正确的构建和一个具有和 <code>&lt;input type=&quot;text&quot;&gt;</code> 同样作用，但同时也具有自己的逻辑的输入组件。<span id=\"more\"></span></p>\n<p>在开始文章之前，在读这篇文章之前，希望你已经把官方的文档和案例都看过至少一遍了，具体的一些概念和细节不会在文章中讲解。</p>\n<p>我们先来看一下我们这篇文章里面所介绍的组件的表现形式是怎么样的：</p>\n<p><img src=\"/images/angular2/angular2-demo.gif\" alt=\"目标图\"></p>\n<p>OK，上图就是我们所要达到的效果了。那么，我们来分析下我们这个组件改具备哪些功能。</p>\n<ul>\n<li>聚焦的时候，底部边框为绿色</li>\n<li>具有自己的部分逻辑，比如在有输入值的情况下，会出现一个删除图标</li>\n<li>当输入值为空的时候，提示错误文案</li>\n<li>可以插入其它的 DOM，比如最下面的发送验证码按钮</li>\n<li>支持 <code>input</code> 的必要属性，比如 <code>maxlength、placeholder</code>等</li>\n<li>支持表单 <code>angular2 form-control</code> 表单绑定，如上图中的值都是从 <code>FormBuilder</code> 中构建的</li>\n</ul>\n<p>我们将在后面一步步的来讲解如何实现这样一个自定义组件的功能；</p>\n<h2 id=\"创建一个-angular2-组件\"><a href=\"#创建一个-angular2-组件\" class=\"headerlink\" title=\"创建一个 angular2 组件\"></a>创建一个 angular2 组件</h2><p>我们先来构建一个基础的 <code>angular2</code> 组件,这里我们先新建一个叫做 <code>input-control</code> 的组件。</p>\n<p>首先是 <code>input-control.component.ts</code> 文件：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'input-control'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token operator\">:</span> <span class=\"token string\">'input-control.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'input-control.component.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  encapsulation<span class=\"token operator\">:</span> ViewEncapsulation<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后是 <code>input-control.component.html</code> 文件：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">#input</span>\n  <span class=\"token attr-name\">[type]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>type<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[name]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">(focus)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_handleFocus($event)<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">(blur)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_handleBlur($event)<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[placeholder]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>placeholder<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[(ngModel)]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[minlength]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>minlength<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[maxlength]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxlength<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[readonly]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>readonly<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[disabled]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>disabled<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">#iconDelete</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>focused &amp;&amp; !readonly<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon icon-delete<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_handleClear($event)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>剩下就是 <code>input-control.component.scss</code> 文件了，这里我就补贴出代码了，各位可以根据自己的项目来设置对应的样式</p>\n<p>最后，就是我们调用的时候的方式:</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input-control</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>input-control<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[class.error]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>!mobile.valid &amp;&amp; mobile.touched<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tel<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mobile<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>手机号<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">maxlength</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>11<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[formControl]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mobile<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mobile.touched &amp;&amp; mobile.hasError(<span class=\"token punctuation\">'</span>mobile<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>error-tips<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>请输入正确的手机号码<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input-control</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>是否对于上面的一些属性和变量感到困惑，别急，让我一步步道来</p>\n<h2 id=\"功能细分\"><a href=\"#功能细分\" class=\"headerlink\" title=\"功能细分\"></a>功能细分</h2><h3 id=\"输入属性-Input\"><a href=\"#输入属性-Input\" class=\"headerlink\" title=\"输入属性 @Input()\"></a>输入属性 <code>@Input()</code></h3><p>有一点要谨记：<strong>我们是在用 DIV 来模拟一个 input 的表现，同时具备自己的逻辑</strong>; 所以，当我们需要 <code>input</code> 的对应属性值的时候，我们都需要从父容器传递到组件内部的 <code>input</code> 上面，所以在这里我们需要用到 <code>@Input</code> 特性了</p>\n<p>我们在 <code>input-control.component.ts</code> 定义我们所需的一些属性：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'input-control'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token operator\">:</span> <span class=\"token string\">'input-control.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'input-control.component.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  host<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 宿主元素 click 事件，触发 focus() 事件</span>\n    <span class=\"token string\">'(click)'</span><span class=\"token operator\">:</span> <span class=\"token string\">'focus()'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 切换宿主元素 focus 样式</span>\n    <span class=\"token string\">'[class.focus]'</span><span class=\"token operator\">:</span> <span class=\"token string\">'focused'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputControlComponent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> _focused<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> _value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> _disabled<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> _readonly<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> _required<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 外部传入属性</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> placeholder<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> minlength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> maxlength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// value 属性，以 get 方式拦截</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    v <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_convertValueForInputType</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 触发值改变事件，冒泡给父级</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onChangeCallback</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 只读属性</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">focused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_focused<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">disabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disabled<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">disabled</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disabled <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_coerceBooleanProperty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">get</span> <span class=\"token keyword\">readonly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_readonly<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">set</span> <span class=\"token keyword\">readonly</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_readonly <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_coerceBooleanProperty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_required<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">required</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_required <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_coerceBooleanProperty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>回顾的我们前面的 <code>input-control.component.html</code> 文件，我们定义了 <code>type</code>、<code>name</code>、<code>placeholder</code>、<code>minlength</code>、<code>maxlength</code> 可读写的属性，同时还有 <code>value</code>、<code>readonly</code>、<code>disabled</code>、<code>required</code> 等只读属性。通过 <code>[属性]=&quot;源&quot;</code> 方式，接收父级传入的数据。</p>\n<p>OK，属性我们都知道如何从父级去接收了，那么接下来我们来实现 <strong>点击</strong> 操作： </p>\n<p>我们先修改 <code>input-control.component.ts</code> 文件</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  ……\n  host<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 宿主元素 click 事件，触发 focus() 事件</span>\n    <span class=\"token string\">'(click)'</span><span class=\"token operator\">:</span> <span class=\"token string\">'focus()'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 切换宿主元素 focus 样式</span>\n    <span class=\"token string\">'[class.focus]'</span><span class=\"token operator\">:</span> <span class=\"token string\">'focused'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们利用了 <code>host</code> 这个属性，用来给宿主元素对应操作，传送门 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Component-decorator.html\">@Component 相关属性</a>;<br>我们给宿主元素也就是 <code>&lt;input-control&gt;&lt;/input-control&gt;</code> 绑定了一个 <code>click</code> 事件，同时根据自身属性 <code>focused</code> 来切换一个 <code>.focus</code> 类。在我们组件的 <code>focus()</code> 事件中，我们需要让组件内部的 <code>input</code> 聚焦，同时切换自身的 <code>focused</code> 值。为了拿到我们组件内部的 <code>input</code> 元素，这里我们需要使用 <code>@ViewChild()</code>。</p>\n<p>修改 <code>input-control.component.ts</code> 文件如下：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  ……\n  host<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 宿主元素 click 事件，触发 focus() 事件</span>\n    <span class=\"token string\">'(click)'</span><span class=\"token operator\">:</span> <span class=\"token string\">'focus()'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 切换宿主元素 focus 样式</span>\n    <span class=\"token string\">'[class.focus]'</span><span class=\"token operator\">:</span> <span class=\"token string\">'focused'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputControlComponent</span> <span class=\"token punctuation\">&#123;</span>\n  ……\n  ……\n\n  <span class=\"token keyword\">private</span> _focusEmitter<span class=\"token operator\">:</span> EventEmitter<span class=\"token operator\">&lt;</span>FocusEvent<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventEmitter<span class=\"token operator\">&lt;</span>FocusEvent<span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">ViewChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span> _inputElement<span class=\"token operator\">:</span> ElementRef<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 组件内部 input 元素</span>\n  @<span class=\"token function\">ViewChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iconDelete'</span><span class=\"token punctuation\">)</span> iconDelete<span class=\"token operator\">:</span> ElementRef<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除图标元素</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> hostRef<span class=\"token operator\">:</span> ElementRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 监听全局的点击事件，如果不是当前 input-control 组，则视为失去焦点操作</span>\n  @<span class=\"token function\">HostListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'window:click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'$event'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">inputControlBlurHandler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> parent <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如何当前节点不是宿主节点，并且不等于 document 节点</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hostRef<span class=\"token punctuation\">.</span>nativeElement <span class=\"token operator\">&amp;&amp;</span> parent <span class=\"token operator\">!=</span> document<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 取当前节点的父节点继续寻找</span>\n      parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 找到最顶层，则表示已经不在宿主元素内部了，触发失去焦点 fn</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> document<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_focused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 宿主聚焦</span>\n  <span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 触发下面的 _handleFocus() 事件</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_inputElement<span class=\"token punctuation\">.</span>nativeElement<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 输入框聚焦</span>\n  <span class=\"token function\">_handleFocus</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FocusEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_focused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_focusEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 清空输入值</span>\n  <span class=\"token function\">_handleClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 这里触发 blur 操作，但是不改变 this._focused 的值，</span>\n  <span class=\"token comment\">// 不然删除图标无法实现它的功能，</span>\n  <span class=\"token comment\">//设置 this._focused 的值将由上面的 @HostListener('window:click', ['$event']) 来处理</span>\n  <span class=\"token comment\">// 触发父级的 blur 事件</span>\n  <span class=\"token function\">_handleBlur</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onTouchedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_blurEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 对外暴露 focus 事件</span>\n  @<span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">)</span> onFocus <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_focusEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">asObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ……\n  ……\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上面的代码中，我们通过宿主的 <code>focus()</code> 事件，让 <code>input</code> 元素 <code>focus</code>, 同时 <code>input</code> 元素聚焦之后，会触发下面的 <code>_handleFocus()</code> 方法，在这个方法里面，我们修改组件自身的 <code>focused</code> 属性，并对外发射一个 <code>focus</code> 事件，用来像父级传递使用。同时，我们的删除图标也是根据组件的 <code>focused</code> 属性切换显示：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">#input</span>\n  <span class=\"token attr-name\">[type]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>type<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[name]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">(focus)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_handleFocus($event)<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">(blur)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_handleBlur($event)<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[placeholder]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>placeholder<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[(ngModel)]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">#iconDelete</span> \n    <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>focused &amp;&amp; !readonly<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon icon-delete<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_handleClear($event)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们的 <code>input</code> 和组件内部的 <code>value</code> 属性进行了双向绑定，所以在 <code>_handleClear</code> 之后，我们的输入框的值自然也就被清空了。</p>\n<h3 id=\"值访问器-ControlValueAccessor\"><a href=\"#值访问器-ControlValueAccessor\" class=\"headerlink\" title=\"值访问器 ControlValueAccessor\"></a>值访问器 <a href=\"https://angular.cn/docs/ts/latest/api/forms/index/ControlValueAccessor-interface.html\">ControlValueAccessor</a></h3><p>在完成上面的一些步骤之后，我们的组件基本功能完成了，但是接下来还有最重要的一部分内容，那就是让我们的自定义组件获得 <code>值访问</code> 权限。<br>在官方的文档中有提到一点 <a href=\"https://github.com/angular/material2/blob/master/src/lib/input/input.ts\">https://github.com/angular/material2/blob/master/src/lib/input/input.ts</a> </p>\n<p><img src=\"/images/angular2/control-access.png\" alt=\"值访问器\"><br>在查看官方的文档之后，我们发现要实现自定义组件的值访问权限，我们需要继承 <code>ControlValueAccessor</code> 接口，同时实现它内部的对应的接口</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 要实现双向数据绑定，这个不可少</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">INPUT_CONTROL_VALUE_ACCESSOR</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  provide<span class=\"token operator\">:</span> <span class=\"token constant\">NG_VALUE_ACCESSOR</span><span class=\"token punctuation\">,</span>\n  useExisting<span class=\"token operator\">:</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> InputControlComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  multi<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'input-control'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token operator\">:</span> <span class=\"token string\">'input-control.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'input-control.component.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  host<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 宿主元素 click 事件，触发 focus() 事件</span>\n    <span class=\"token string\">'(click)'</span><span class=\"token operator\">:</span> <span class=\"token string\">'focus()'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 切换宿主元素 focus 样式</span>\n    <span class=\"token string\">'[class.focus]'</span><span class=\"token operator\">:</span> <span class=\"token string\">'focused'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  encapsulation<span class=\"token operator\">:</span> ViewEncapsulation<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">INPUT_CONTROL_VALUE_ACCESSOR</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputControlComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ControlValueAccessor</span> <span class=\"token punctuation\">&#123;</span>\n  ……\n  ……\n  <span class=\"token comment\">/** Callback registered via registerOnTouched (ControlValueAccessor)\n   * 此属性在做表单校验的时候，不可少，\n   * 如果缺少了这个属性，FormControl.touched 属性将监测不到，切记！！\n   */</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">_onTouchedCallback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> noop<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** Callback registered via registerOnChange (ControlValueAccessor) */</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">_onChangeCallback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>_<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> noop<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * Write a new value to the element.\n   */</span>\n  <span class=\"token function\">writeValue</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">/**\n   * Set the function to be called when the control receives a change event.\n   */</span>\n  <span class=\"token function\">registerOnChange</span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onChangeCallback <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * Set the function to be called when the control receives a touch event.\n   */</span>\n  <span class=\"token function\">registerOnTouched</span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onTouchedCallback <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  ……\n  ……\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>正如上面代码中所示的一样，实现了这些对应的接口之后，我们就能像使用普通的 <code>input</code> 元素一样使用我们的自定义组件了。</p>\n<h3 id=\"允许组件加载内部其它的-DOM-元素\"><a href=\"#允许组件加载内部其它的-DOM-元素\" class=\"headerlink\" title=\"允许组件加载内部其它的 DOM 元素\"></a>允许组件加载内部其它的 DOM 元素</h3><p>回顾我们前面文章开头的 GIF 图片，我们还有一个获取验证码的按钮，同时，我们的错误提示也是放在组件内部的。要支持这种形式的，我们需要在组件内部加上 <code>&lt;ng-content&gt;&lt;/ng-content&gt;</code> 标签<br>有了这个之后，所有包裹在 <code>&lt;input-control&gt;&lt;/input-control&gt;</code> 组件内部的元素都将被渲染到组件内部</p>\n<p>父组件调用 <code>input-control</code>:</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input-control</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>input-control sms-control<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[class.error]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>!captcha.valid &amp;&amp; captcha.touched<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tel<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>captcha<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请输入验证码<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[formControl]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>captcha<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">maxlength</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>count-down</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn-send-sms<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">counter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>获取验证码<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">countText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>秒后重新获取<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>count-down</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>!captcha.valid &amp;&amp; captcha.touched<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>error-tips<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>请输入验证码<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input-control</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>浏览器渲染之后的的 DOM 结构：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input-control</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>input-control sms-control ng-untouched ng-pristine ng-invalid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxlength</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>captcha<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请输入验证码<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-reflect-maxlength</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-reflect-type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-reflect-name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>captcha<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-reflect-placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请输入验证码<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-reflect-form</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[object Object]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ng-reflect-maxlength</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-reflect-name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>captcha<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-reflect-type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-reflect-placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请输入验证码<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请输入验证码<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxlength</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ng-untouched ng-pristine ng-valid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--template bindings=&#123;\n  \"ng-reflect-ng-if\": null\n&#125;--></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>count-down</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn-send-sms<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">counttext</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>秒后重新获取<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">counter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>获取验证码<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-reflect-counter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-reflect-title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>获取验证码<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-reflect-count-text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>秒后重新获取<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>获取验证码<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>count-down</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\">&lt;!--template bindings=&#123;\n  \"ng-reflect-ng-if\": null\n&#125;--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input-control</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"与-FormControl-结合使用注意事项\"><a href=\"#与-FormControl-结合使用注意事项\" class=\"headerlink\" title=\"与 FormControl 结合使用注意事项\"></a>与 FormControl 结合使用注意事项</h3><p>在后期的时候，我整合了自定输入组件与 <code>FormControl</code> 一起使用，在使用过程中，发现在需要使用 <code>.touched</code> 特性的时候，发现无法生效，通过查资料发现，如果需要让这个特性生性，我们的输入组件必须监听 <code>blur</code> 事件并且在处理事件中调用触发对外的 blur 事件，具体代码见前面的 <code>_handleBlur()</code> 内容。</p>\n<p>完整 Demo 地址：<a href=\"https://github.com/lichenbuliren/mcare-app\">mcare-app</a><br>这个 Demo 里面整合了路由、子模块、服务、动态表单等特性的使用方法，有兴趣的可以参考下，还在持续完善中。这个 Demo 是参照自己做过的项目部分UI，当然不会涉及核心的业务代码：）。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/angular/material2/blob/master/src/lib/input/input.ts\">Angular2 material2 官方UI库</a><br><a href=\"http://blog.thoughtram.io/angular/2016/07/27/custom-form-controls-in-angular-2.html\">CUSTOM FORM CONTROLS IN ANGULAR 2</a><br><a href=\"http://stackoverflow.com/questions/38447681/touched-untouched-not-updating-in-custom-input-component-angular-2\">http://stackoverflow.com/questions/38447681/touched-untouched-not-updating-in-custom-input-component-angular-2</a></p>\n","feature":null,"text":"构建一个自定义 angular2 输入组件今天我们来学习如何正确的构建和一个具有和 &lt;input type=&quot;text&quot;&gt; 同样作用，但同时也具有自己的逻辑的输入组件。 在开始文章之前，在读这篇文章之前，希望你已经把官方的文档和案例都看过至少一遍了...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":7,"path":"api/categories/JavaScript.json"},{"name":"angular2.js","slug":"JavaScript/angular2-js","count":1,"path":"api/categories/JavaScript/angular2-js.json"}],"tags":[{"name":"angular2","slug":"angular2","count":1,"path":"api/tags/angular2.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89-angular2-%E8%BE%93%E5%85%A5%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">构建一个自定义 angular2 输入组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-angular2-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">创建一个 angular2 组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD%E7%BB%86%E5%88%86\"><span class=\"toc-text\">功能细分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E5%B1%9E%E6%80%A7-Input\"><span class=\"toc-text\">输入属性 @Input()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%80%BC%E8%AE%BF%E9%97%AE%E5%99%A8-ControlValueAccessor\"><span class=\"toc-text\">值访问器 ControlValueAccessor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%81%E8%AE%B8%E7%BB%84%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%86%85%E9%83%A8%E5%85%B6%E5%AE%83%E7%9A%84-DOM-%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">允许组件加载内部其它的 DOM 元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8E-FormControl-%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">与 FormControl 结合使用注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol></li></ol>","author":{"name":"Heaven","avatar":"https://heaven-blog-1255884785.file.myqcloud.com/github-avatar.jpeg","link":""},"mapped":true,"prev_post":{"title":"使用 CANVAS 实现帧动画","uid":"e6706670dc28c3dce80c813a5c86cd7b","slug":"使用CANVAS实现视频动画","date":"2017-07-31T11:38:52.000Z","updated":"2021-04-06T12:16:51.676Z","comments":true,"path":"api/articles/使用CANVAS实现视频动画.json","cover":"https://heaven-blog-1255884785.file.myqcloud.com/poster-thumbnail.jpg","text":"在最近项目中需要实现一个精灵动画，素材方只提供了一个短视频素材，所以在实现精灵动画之前先介绍两个工具来帮助我们更好的实现需求。在这篇文章中，主要是介绍两个命令行工具来实现将一个短视频文件转化成一张 sprite 图片与如何使用 canvas 绘制精灵动画 两个工具官方地址如下： ...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":7,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"原生 JS","slug":"原生-JS","count":1,"path":"api/tags/原生-JS.json"},{"name":"CANVAS","slug":"CANVAS","count":1,"path":"api/tags/CANVAS.json"}],"author":{"name":"Heaven","avatar":"https://heaven-blog-1255884785.file.myqcloud.com/github-avatar.jpeg","link":""}},"next_post":{"title":"使用Vue.js构建单页应用","uid":"1196d4804432f0371741528deb127a90","slug":"使用Vue-js构建单页应用","date":"2016-07-03T12:56:24.000Z","updated":"2021-04-06T12:16:57.623Z","comments":true,"path":"api/articles/使用Vue-js构建单页应用.json","cover":"https://heaven-blog-1255884785.file.myqcloud.com/poster-thumbnail.jpg","text":"前言：在最近学习 Vue.js 的时候，看到国外一篇讲述了如何使用 Vue.js 和 Vuex 来构建一个简单笔记的单页应用的文章。感觉收获挺多，自己在它的例子的基础上进行了一些优化和自定义功能，在这里和大家分享下学习心得。 原文地址：https://coligo.io/lear...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":7,"path":"api/categories/JavaScript.json"},{"name":"Vue.js","slug":"JavaScript/Vue-js","count":1,"path":"api/categories/JavaScript/Vue-js.json"}],"tags":[{"name":"vue","slug":"vue","count":2,"path":"api/tags/vue.json"}],"author":{"name":"Heaven","avatar":"https://heaven-blog-1255884785.file.myqcloud.com/github-avatar.jpeg","link":""}}}